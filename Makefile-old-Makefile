#############################################################################

# Targets to use:
#	all:	make a binary distribution
#	doc:	make the documentation
#	port:   make a porting source distribution
# The default is 'all' and 'doc'.

# Warning: if you move the directory tree, then factory needs to be reconfigured

#############################################################################
.PHONY : all always dirs clean FACTORYmade FACTORYconfigured FACTORYexports \
	announce MACAULAY2 MACAULAY2.doc doc port default
################################# default
default: all # doc
################################# all
all::
#################################
TOPDIR = .
include Makeconf
FILES := Makefile Makeconf README patches
SUBDIRS := gc gmp factory libfac Macaulay2
export PATH := bin:$(PATH)
################################# preparation
always:
lib/.exists:; mkdir -p lib; touch $@
clean::; rm -rf lib
include/.exists:; mkdir -p include; touch $@
clean::; rm -rf include
clean::; rm -f config.cache
clean::; rm -f core
rmcores :; find . '(' -name core -o -name gmon.out -o -name profile ')' -exec rm '{}' ';'
################################ SETUP
ifeq "$(CC)" "cl"
all::;	$(MAKE) -C WindowsNT
TARGET := Macaulay2-$(DESC).zip
DOCTARGET := Macaulay2-$(VERSION)-doc.zip
else
TARGET := Macaulay2-$(DESC).tar.gz
DOCTARGET := Macaulay2-$(VERSION)-doc.tar.gz
endif
all:: announce
announce ::
	@echo '## making $(TARGET)'
doc:: announce.doc
announce.doc ::
	@echo '## making $(DOCTARGET)'
################################ GC
all:: GC
clean::; rm -f gc/*.obj gc/*.lib
GC:: gc include/gc.h include/gc_cpp.h

ifeq "$(CC)" "cl"
GC:: lib/gc.lib
else
GC:: lib/libgc.a
endif

GC_TARGETS := gc.a

GC_CFLAGS := $(CFLAGS)
GC_CFLAGS += -DLARGE_CONFIG -DNO_SIGNALS
ifeq "$(DEBUG)" "TRUE"
# Hans Boehm has verified that -DALL_INTERIOR_POINTERS is not needed with -DGC_DEBUG
GC_CFLAGS += -DGC_DEBUG
endif

# The only reason to have ALL_INTERIOR_POINTERS on is if we are using GC_malloc for C++ routines.
# GC_CFLAGS +=  -DALL_INTERIOR_POINTERS

ifndef VERBOSE
GC_CFLAGS += -DSILENT
endif

ifdef DEBUG
else
# GC_dump() will not be compiled!
# GC_CFLAGS += -DNO_DEBUGGING
endif

lib/libgc.a: 		gc/gc.a lib/.exists;	 	cp $< $@; ranlib $@
lib/gc.lib: 		gc/gc.lib lib/.exists;	 	cp $< $@
include/gc.h:		gc/gc.h include/.exists;	cp $< $@
include/gc_cpp.h: 	gc/gc_cpp.h include/.exists;	cp $< $@

ifeq "$(CC)" "cl"
gc/gc.lib:	  always
	cd gc; MAKEFLAGS= nmake /nologo /f NT_MAKEFILE
else
gc/gc.a: 	  always
	$(MAKE) -C gc CXX='$(CXX)' CC='$(CC)' AS='$(AS)' \
		AR='$(AR)' RANLIB='$(RANLIB)' \
		CFLAGS='$(GC_CFLAGS)' $(GC_TARGETS)
endif

clean::; $(MAKE) -C gc clean
clean::; rm -f gc/base_lib

###################### GMP

all:: GMP

ifeq "$(CC)" "cl"
GMPlibs = lib/gmp.lib
lib/gmp.lib: gmp/gmp.lib lib/.exists; cp $< $@
gmp/gmp.lib : make-gmp
else
GMPnames := gmp
# GMPnames += mpn mpz mpq mpf 
GMPFLAGS := -g -O2
GMPlibs := $(foreach i, $(GMPnames), lib/lib$(i).a)
# lib/libmpn.a: gmp/mpn/libmpn.a lib/.exists; cp $< $@; ranlib $@
# lib/libmpz.a: gmp/mpz/libmpz.a lib/.exists; cp $< $@; ranlib $@
# lib/libmpq.a: gmp/mpq/libmpq.a lib/.exists; cp $< $@; ranlib $@
# lib/libmpf.a: gmp/mpf/libmpf.a lib/.exists; cp $< $@; ranlib $@
lib/libgmp.a: gmp/libgmp.a     lib/.exists; cp $< $@; ranlib $@
# gmp/mpn/libmpn.a : make-gmp
# gmp/mpz/libmpz.a : make-gmp
# gmp/mpq/libmpq.a : make-gmp
# gmp/mpf/libmpf.a : make-gmp
gmp/libgmp.a : make-gmp
endif

GMP : 	gmp include/gmp.h $(GMPlibs)

include/gmp.h: gmp/gmp.h include/.exists; cp $< $@

make-gmp : GMPconfigure
	$(MAKE) CFLAGS="$(GMPFLAGS)" -C gmp

ifeq "$(CC)" "cl"
GMPconfigure : gmp/Makefile
gmp/Makefile: WindowsNT/gmp/Makefile
	cp WindowsNT/$@ $@
else
GMPconfigure : gmp/config.status
gmp/config.status: gmp/configure
	cd gmp; \
	./configure --silent --cache-file=../config.cache
endif

GMPclean clean::
	-$(MAKE) -C gmp distclean
	rm -f lib/gmp.lib lib/libmpn.a lib/libmpz.a lib/libmpq.a lib/libmpf.a lib/libgmp.a

###################### FACTORY

# when importing a new version of factory, make sure the directory is clean,
# (look to see if factory/config.status is there)

all:: FACTORY

FACTORYMFLAGS :=
FACTORYINC :=

FACTORY:: include/gmp.h FACTORYconfigured FACTORYmade lib/libcf.a lib/FACTORYinstalled

ifdef SHAREDLIBS
FACTORY:: Macaulay2/lib/libcf.so
Macaulay2/lib/.exists:; mkdir -p Macaulay2/lib; touch $@
Macaulay2/lib/libcf.so : lib/libcf.a Macaulay2/lib/.exists
	rm -rf tmplib
	mkdir tmplib
	(cd tmplib; ar x ../$<; $(CC) -shared *.o -o ../$@)
	rm -rf tmplib
endif

factory/clean :
	$(MAKE) -C factory clean

FACTORYexports := \
		factory/factory.h \
		factory/factoryconf.h \
		factory/templates/array.cc     \
		factory/templates/array.h      \
		factory/templates/factor.cc    \
		factory/templates/factor.h     \
		factory/templates/functions.h  \
		factory/templates/list.cc      \
		factory/templates/list.h       \
		factory/templates/matrix.cc    \
		factory/templates/matrix.h     \
		factory/tmpl_inst.cc

FACFLAGS :=

ifeq "$(CC)" "cl"
FACTORYexports += factory/cf.lib
clean::; rm -f factory/malloc.h
FACTORYMAKEFLAGS += -f ../WindowsNT/factory/GNUmakefile
FACTORYconfigured: factory/config.h factory/factoryconf.h
FACTORYINC += -I../WindowsNT/factory
factory/config.h : WindowsNT/factory/config.h
	cp $< $@
factory/factoryconf.h : WindowsNT/factory/factoryconf.h
	cp $< $@
else
ifdef SHAREDLIBS
FACFLAGS += -fPIC
endif
FACTORYexports += factory/libcf.a
FACTORYconfigured: factory/config.status
factory/config.status factory/GNUmakefile : \
		factory/GNUmakefile.in factory/configure
	cd factory;\
	GMP_INCLUDE_PATH=../include \
	CFLAGS="$(CFLAGS) $(FACFLAGS)" \
	CXXFLAGS="$(CXXFLAGS) $(FACFLAGS)" \
	LDFLAGS="$(LDFLAGS)" \
	./configure --cache-file=../config.cache --prefix=.. --with-memman --with-optimize
endif

FACTORYmade:
	$(MAKE) -C factory $(FACTORYMAKEFLAGS) \
	   CFLAGS="$(CFLAGS) $(FACFLAGS)" \
	   CXXFLAGS="$(CXXFLAGS) $(FACFLAGS)" \
	   CPPFLAGS="$(CPPFLAGS) -I../include $(FACTORYINC)"

lib/libcf.a lib/FACTORYinstalled: lib/.exists include/.exists $(FACTORYexports)
	$(MAKE) -C factory $(FACTORYMAKEFLAGS) install
	rm -f lib/libcfmem.a
	touch $@
FACTORYclean clean::
	-$(MAKE) -C factory $(FACTORYMAKEFLAGS) distclean
	cd factory; rm -f *.cpp *.pdb
	rm -f lib/cf.lib lib/libcf.a lib/FACTORYinstalled
clean::; rm -rf share
###################### LIBFAC
all:: LIBFAC

ifdef SHAREDLIBS
LIBFACFLAGS := -fPIC
else
LIBFACFLAGS := 
endif

libfac/clean :
	$(MAKE) -C libfac clean

ifeq "$(CC)" "cl"
LIBFAC:: libfac libfac/Makefile lib/libfac.lib include/factor.h
libfac/Makefile : WindowsNT/libfac/Makefile
	cp WindowsNT/$@ $@
lib/libfac.lib: libfac/libfac.lib lib/.exists; cp $< $@; ranlib $@
libfac/libfac.lib : always
	$(MAKE) -C libfac
else
LIBFAC:: libfac libfac/OPTOBJ libfac/config.status libfac/libfac.a include/factor.h
ifdef SHAREDLIBS
LIBFAC:: Macaulay2/lib/libfac.so
Macaulay2/lib/libfac.so : libfac/libfac.a
	rm -rf tmplib
	mkdir tmplib
	(cd tmplib; ar x ../$<; $(CC) -shared *.o -o ../$@)
	rm -rf tmplib
else
LIBFAC:: lib/libfac.a
endif
libfac/OPTOBJ :; mkdir $@
libfac/config.status : libfac/configure
	cd libfac; ./configure --silent --cache-file=../config.cache --includedir=../include
lib/libfac.a: libfac/libfac.a lib/.exists; cp $< $@; ranlib $@
libfac/libfac.a : always
	$(MAKE) CXX=$(CXX) OPTCXX=$(CXX) \
		CXXFLAGS="-O2 -g $(LIBFACFLAGS)" CFLAGS="-O2 -g $(LIBFACFLAGS)" \
		-C libfac libfac
endif

include/factor.h: libfac/factor.h include/.exists; cp $< $@
LIBFACclean clean::
	-$(MAKE) -C libfac distclean
	rm -f lib/libfac.a lib/libfac.lib

###################### MP

# warning: perl is needed to recreate mp/MP/MP.h - but this file is
# provided with the distribution.
ifdef MP
all:: MP
endif
MP:	mp mp/config.status mp/Makefile mp/libMP.a \
	lib/libMP.a include/MP.h include/MP_Config.h
mp/config.status mp/Makefile : mp/configure
	cd mp; ./configure --cache-file=../config.cache --prefix=$(TOPDIR) # --with-debug
mp/libMP.a: mp/Makefile
	$(MAKE) -C mp libMP.a
lib/libMP.a: mp/MP/libMP.a lib/.exists; cp $< $@; ranlib $@
include/MP.h: mp/MP/MP.h include/.exists; cp $< $@
include/MP_Config.h: mp/MP/MP_Config.h include/.exists; cp $< $@
clean::; -$(MAKE) -C mp distclean
clean::; rm -f 'mp/&'
################################# Makeconf.h
all:: Makeconf.h
Makeconf.h : Makeconf Makeconf.var Makeconf.lcl
	echo "/* This file created automatically, don't edit. */" >tmp.tmp
	echo '#define VERSION "$(VERSION)"' >>tmp.tmp
	echo '#define NODENAME "$(NODENAME)"' >>tmp.tmp
	echo '#define OS "$(OS)"' >>tmp.tmp
	echo '#define ARCH "$(ARCH)"' >>tmp.tmp
	echo '#define REL "$(REL)"' >>tmp.tmp
	echo '#define SHAREDLIBS "$(SHAREDLIBS)"' >>tmp.tmp
ifdef FACTORYVERSION
	echo '#define FACTORYVERSION $(FACTORYVERSION)' >>tmp.tmp
else
	echo '#undef FACTORYVERSION' >>tmp.tmp
endif
ifdef DUMPDATA
	echo '#define DUMPDATA' >>tmp.tmp
else
	echo '#undef DUMPDATA' >>tmp.tmp
endif
ifdef NEWDUMPDATA
	echo '#define NEWDUMPDATA' >>tmp.tmp
else
	echo '#undef NEWDUMPDATA' >>tmp.tmp
endif
ifdef MP
	echo '#define MP' >>tmp.tmp
else
	echo '#undef MP' >>tmp.tmp
endif
ifdef SOCKS
	echo '#define SOCKS' >>tmp.tmp
else
	echo '#undef SOCKS' >>tmp.tmp
endif
ifdef FACTORY
	echo '#define FACTORY' >>tmp.tmp
else
	echo '#undef FACTORY' >>tmp.tmp
endif
	echo '#undef GCMALLOC' >>tmp.tmp
ifdef GCMALLOC
	echo '#define GCMALLOC' >>tmp.tmp
endif
	mv tmp.tmp $@
clean::; rm -f Makeconf.h
###################### Macaulay 2 binary distribution
all :: MACAULAY2
all :: $(TARGET)
MACAULAY2: Macaulay2
	$(MAKE) -C Macaulay2 all tests
DISTFILES := 	Macaulay2/README.txt \
		Macaulay2/CHANGES \
		Macaulay2/licenses \
		Macaulay2/setup \
		Macaulay2/cache/Macaulay2-doc \
		Macaulay2/packages \
		Macaulay2/bin \
		Macaulay2/m2 \
		Macaulay2/emacs \
		Macaulay2/tutorial/final
ifdef SHAREDLIBS
DISTFILES += Macaulay2/lib
endif
Macaulay2-$(DESC).tar.gz : Makefile $(DISTFILES) rmcores
	tar cf - $(DISTFILES) | gzip >$@
	@echo "-----------------------------------------------------------------------------"
	@echo "  $@ contains everything but the documentation"
	@echo "-----------------------------------------------------------------------------"
Macaulay2-$(DESC).zip : Makefile $(DISTFILES)
	winzip32 -u -r -p $@ @WindowsNT/DistributionFiles.lst
	@echo "-----------------------------------------------------------------------------"
	@echo "  $@ contains everything but the documentation"
	@echo "-----------------------------------------------------------------------------"
clean ::; rm -f Macaulay2-$(DESC).tar.gz Macaulay2-$(DESC).zip
clean ::; $(MAKE) -C Macaulay2 clean
###################### Macaulay 2 porting source distribution
PORTING := CVS \
	M2.dsw WindowsDistribution.dsp root.dsp \
	Macaulay2/Macaulay2.dsp Macaulay2/WindowsFixUps.dsp \
	Macaulay2/setup.nodumpdata Macaulay2/setup.dumpdata \
	Macaulay2/CVS \
	Macaulay2/Vasconcelos-appendix \
	Macaulay2/basictests \
	Macaulay2/book \
	Macaulay2/c \
	Macaulay2/c2 \
	Macaulay2/d \
	Macaulay2/dbm \
	Macaulay2/dumpdata/Makefile Macaulay2/dumpdata/tagettypes.c  \
	Macaulay2/e/CVS \
	Macaulay2/e/misc \
	Macaulay2/emacs \
	Macaulay2/html \
	Macaulay2/licenses \
	Macaulay2/m2 \
	Macaulay2/c2/Makefile Macaulay2/c2/targettypes.c \
	Macaulay2/msdos \
	Macaulay2/packages \
	Macaulay2/schubert \
	Macaulay2/test \
	Macaulay2/tutorial \
	Macaulay2/util \
	WindowsNT \
	bin factory gc gcStatic gmp libfac
port : rmcores Macaulay2-$(VERSION)-porting-src.tar.gz
Macaulay2-$(VERSION)-porting-src.tar.gz : Makefile
	tar cf - `Export3 $(PORTING)` | gzip >$@
###################### Macaulay 2 documentation
DOCFILES = Macaulay2/html
ifdef CYGWIN32
DOCFILES += Macaulay2/book/M2book.tex
else
DOCFILES += Macaulay2/Vasconcelos-appendix/appendix.dvi
DOCFILES += Macaulay2/book/M2book.dvi
endif

Macaulay2-$(VERSION)-doc.tar.gz : $(DOCFILES) rmcores
	tar cf - $(DOCFILES) | gzip >$@
	@echo "-----------------------------------------------------------------------------"
	@echo "  $@ contains the documentation"
	@echo "-----------------------------------------------------------------------------"
Macaulay2-$(VERSION)-doc.zip : $(DOCFILES)
	winzip32 -u -r -p $@ $(DOCFILES)
	@echo "-----------------------------------------------------------------------------"
	@echo "  $@ contains the documentation"
	@echo "-----------------------------------------------------------------------------"
MACAULAY2.doc:
	$(MAKE) -C Macaulay2 doc
doc:: # MACAULAY2
doc:: MACAULAY2.doc 
doc:: $(DOCTARGET)
################################# nondist
# print the files in the directory tree that are not part of the distribution
nondist :
	(Export; find . -name CVS -prune -o -type f -print ) | sort | uniq -u
################################# CVS
clean::
	find .  \( \
		   -type f -name '.#*' \
		-o -type d -name Release \
		-o -name '*.pdb' \
		\) -exec rm -r '{}' ';'
	rm -f M2.ncb M2.opt
################################# status messages
all::
	@echo "--------------------- done making 'all' --------------------"
doc::
	@echo "--------------------- done making 'doc' --------------------"
################################# tar manufactured files
manufactured.tgz : Makefile
	make -C Macaulay2/d all-c-files
	make -C Macaulay2/tutorial
	tar cfz $@ \
		Macaulay2/e/geovec.hpp \
		Macaulay2/e/geores.hpp \
		Macaulay2/e/cmdnames.m2 \
		Macaulay2/e/cmdnames.hpp \
		Macaulay2/e/cmdinst.hpp \
		Macaulay2/m2/tutorials.m2 \
		Macaulay2/tutorial/final/*.out \
		Macaulay2/m2/gbdoc.m2 \
		Macaulay2/m2/gbfunctions.m2 \
		Macaulay2/m2/loads.m2 \
		Macaulay2/d/*.c \
		Macaulay2/tmp/Examples/*.m2 \
		Macaulay2/tmp/Tests/*.m2 \
		Macaulay2/html
################################# automated compilation
update:
	cvs update -d
	$(MAKE)
checkin:
	cvs ci -m "check-in from $(NODENAME) [$(SYSTEM)]"
################################# TAGS
TAGS:
	etags `find . \( -name '*.h' -o -name '*.c' -o -name '*.s' -o -name '*.S' \)`
PATH:
	printenv $@
