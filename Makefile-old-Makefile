#############################################################################
# targets to use:
#	all:	make a binary distribution
#	doc:	make the documentation
#############################################################################
# warning: if you move the directory tree, then factory needs to be reconfigured
#############################################################################
include Makeconf
FILES := Makefile Makeconf README patches
SUBDIRS := gc gmp factory libfac Macaulay2
.PHONY : all always dirs clean FACTORYmade FACTORYconfigured \
	announce MACAULAY2 MACAULAY2.doc doc
all:: announce
announce ::
	@echo "######################################################"
	@echo 'making Macaulay 2 version $(VERSION) for $(SYSTEM)'
	@echo "######################################################"
################################# all
all:: GC GMP FACTORY LIBFAC MP Makeconf.h MACAULAY2
################################# Makeconf.h
Makeconf.h : Makeconf envh.awk Makeconf.var
	awk -f envh.awk <Makeconf.var >tmp.tmp
	mv tmp.tmp $@
clean::; rm -f Makeconf.h
################################# preparation
always:
lib/.exists:; mkdir -p lib; touch $@
clean::; rm -rf lib
include/.exists:; mkdir -p include; touch $@
clean::; rm -rf include
clean::; rm -f config.cache
clean::; rm -f core
################################ GC
GC: gc lib/libgc.a include/gc.h include/gc_cpp.h
# GC_CFLAGS = -DNO_SIGNALS -g -O -DALL_INTERIOR_POINTERS -DGC_DEBUG
GC_CFLAGS = -DNO_SIGNALS -g -O -DNO_DEBUGGING -DSILENT -DALL_INTERIOR_POINTERS
lib/libgc.a: 	  gc/gc.a lib/.exists;	 	cp $< $@; ranlib $@
include/gc.h:	  gc/gc.h include/.exists;	cp $< $@
include/gc_cpp.h: gc/gc_cpp.h include/.exists;	cp $< $@
gc/gc.a: 	  always
	$(MAKE) -C gc CC=gcc AS=$(AS) CFLAGS='$(GC_CFLAGS)' gc.a
clean::; $(MAKE) -C gc clean
clean::; rm -f gc/base_lib
###################### GMP
GMP : 	gmp include/gmp.h \
	lib/libmpn.a lib/libmpz.a lib/libmpq.a lib/libmpf.a lib/libgmp.a
include/gmp.h: gmp/gmp.h include/.exists; cp $< $@
lib/libmpn.a: gmp/mpn/libmpn.a lib/.exists; cp $< $@; ranlib $@
lib/libmpz.a: gmp/mpz/libmpz.a lib/.exists; cp $< $@; ranlib $@
lib/libmpq.a: gmp/mpq/libmpq.a lib/.exists; cp $< $@; ranlib $@
lib/libmpf.a: gmp/mpf/libmpf.a lib/.exists; cp $< $@; ranlib $@
lib/libgmp.a: gmp/libgmp.a lib/.exists; cp $< $@; ranlib $@

gmp/mpn/libmpn.a : make-gmp
gmp/mpz/libmpz.a : make-gmp
gmp/mpq/libmpq.a : make-gmp
gmp/mpf/libmpf.a : make-gmp
gmp/libgmp.a : make-gmp

make-gmp : gmp/config.status
	$(MAKE) -C gmp
gmp/config.status: gmp/configure
	cd gmp; ./configure --cache-file=../config.cache

clean::; -$(MAKE) -C gmp distclean

###################### FACTORY

# when importing a new version of factory, make sure the directory is clean,
# (look to see if factory/config.status is there)

FACTORY: FACTORYconfigured FACTORYmade lib/FACTORYinstalled

FACTORYexports := \
		factory/libcf.a \
		factory/factory.h \
		factory/factoryconf.h \
		factory/templates/array.cc     \
		factory/templates/array.h      \
		factory/templates/factor.cc    \
		factory/templates/factor.h     \
		factory/templates/functions.h  \
		factory/templates/list.cc      \
		factory/templates/list.h       \
		factory/templates/matrix.cc    \
		factory/templates/matrix.h     \
		factory/tmpl_inst.cc

FACTORYconfigured: factory/config.status
factory/config.status factory/GNUmakefile : factory/GNUmakefile.in factory/configure
	cd factory;\
	GMP_INCLUDE_PATH=../include;\
	export GMP_INCLUDE_PATH;\
	./configure --cache-file=../config.cache --prefix=.. --with-memman --with-optimize
FACTORYmade:; $(MAKE) -C factory
lib/FACTORYinstalled: lib/.exists include/.exists $(FACTORYexports)
	$(MAKE) -C factory install
	ranlib lib/libcfmem.a
	touch $@
clean::; -$(MAKE) -C factory distclean
clean::; rm -rf share
###################### LIBFAC
LIBFAC:		libfac \
		libfac/config.status libfac/libfac.a include/factor.h lib/libfac.a
libfac/config.status : libfac/configure
	cd libfac; ./configure --cache-file=../config.cache --includedir=../include
libfac/libfac.a : always
	$(MAKE) CXX=g++ OPTCXX=g++ -C libfac libfac
include/factor.h: libfac/factor.h include/.exists; cp $< $@
lib/libfac.a: libfac/libfac.a lib/.exists; cp $< $@; ranlib $@
clean::; -$(MAKE) -C libfac distclean
###################### MP
# warning: perl is needed to recreate mp/MP/MP.h - but this file is
# provided with the distribution.
MP:	mp mp/config.status mp/Makefile mp/libMP.a \
	lib/libMP.a include/MP.h include/MP_Config.h
mp/config.status mp/Makefile : mp/configure
	cd mp; ./configure --cache-file=../config.cache --prefix=$(TOPDIR) # --with-debug
mp/libMP.a: mp/Makefile
	$(MAKE) -C mp libMP.a
lib/libMP.a: mp/MP/libMP.a lib/.exists; cp $< $@; ranlib $@
include/MP.h: mp/MP/MP.h include/.exists; cp $< $@
include/MP_Config.h: mp/MP/MP_Config.h include/.exists; cp $< $@
clean::; -$(MAKE) -C mp distclean
clean::; rm -f 'mp/&'
###################### Macaulay 2 binary distribution
MACAULAY2: Macaulay2
	$(MAKE) -C Macaulay2 all tests
DISTFILES = 	Macaulay2/README \
		Macaulay2/CHANGES \
		Macaulay2/licenses \
		Macaulay2/setup \
		Macaulay2/cache/Macaulay2.doc \
		Macaulay2/tutorial/final/*.out \
		Macaulay2/bin Macaulay2/m2 Macaulay2/emacs
Macaulay2-$(DESC).tar.gz : Makefile $(DISTFILES)
	tar cf - $(DISTFILES) | gzip >$@
clean ::; rm -f Macaulay2-$(DESC).tar.gz
all :: MACAULAY2 Macaulay2-$(DESC).tar.gz
clean ::; $(MAKE) -C Macaulay2 clean
###################### Macaulay 2 documentation
DOCFILES = 	Macaulay2/html \
		Macaulay2/book/M2book.dvi \
		Macaulay2/book/M2hbook.dvi \
		Macaulay2/Vasconcelos-appendix/appendix.dvi
Macaulay2-$(VERSION)-doc.tar.gz : $(DOCFILES)
	tar cf - $(DOCFILES) | gzip >$@
MACAULAY2.doc: MACAULAY2
	$(MAKE) -C Macaulay2 doc
doc :: MACAULAY2.doc Macaulay2-$(VERSION)-doc.tar.gz
################################# nondist
# print the files in the directory tree that are not part of the distribution
export PATH := bin:$(PATH)
nondist :
	(Export; find . -name CVS -prune -o -type f -print ) | sort | uniq -u
################################# CVS
clean::
	@echo pruning old CVS version files
	find . -type f -name '.#*' -exec rm '{}' ';'
