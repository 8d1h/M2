 -*- Mode: sh -*-

# see also ./aclocal.m4

AC_INIT(Macaulay2.LSM)

# 5 compiler messages saved in config.log
# 6 checking for... messages and results

if make -n --version nothing | grep GNU >/dev/null 2>&1
then :
else echo "`basename $0`: make: GNU make is required" >&2
     exit 1
fi

VERSION="`cat $srcdir/version`"
AC_SUBST(VERSION)
AC_DEFINE_UNQUOTED(VERSION,"$VERSION",version number)

NODENAME="`uname -n`"
AC_SUBST(NODENAME)
AC_DEFINE_UNQUOTED(NODENAME,"$NODENAME",hostname used for compilation)

REL="`  uname -r | sed -e s=/=-=g -e 's= =+=' -e 's=[()]==g'  `"
AC_SUBST(REL)
AC_DEFINE_UNQUOTED(REL,"$REL",[operating system release, obtained with uname -r])

ARCH="`  uname -m | sed s=/=-=g  `"
AC_SUBST(ARCH)
AC_DEFINE_UNQUOTED(ARCH,"$ARCH",[machine hardware type, obtained with uname -m])

OS="`  uname -s | sed s=/=-=g  `"
AC_SUBST(OS)
AC_DEFINE_UNQUOTED(OS,"$OS",[operating system name, obtained with uname -s])

AC_CONFIG_AUX_DIR(config)
AC_CANONICAL_HOST()
AC_VALIDATE_CACHED_SYSTEM_TUPLE()

AC_PROG_RANLIB()
AC_PROG_INSTALL()
AC_PROG_AWK()
AC_PROG_CC()
AC_PROG_CXX()
AC_PROG_YACC()

# 'with' options

SOCKS=no
AC_SUBST(SOCKS)
AC_ARG_WITH(socks,[  --with-socks		  compile and link with socks5],SOCKS="$withval")
case "$SOCKS" in
   no) ;;
   yes) AC_DEFINE(SOCKS,,whether to compile and link with socks5) ;;
   *) echo configure: error: unrecognized value --with-socks="$withval" >&2; exit 1 ;;
esac

FACTORY=yes
AC_SUBST(FACTORY)
AC_ARG_WITH(factory,[  --without-factory       do not link with factory],FACTORY="$withval")
case "$FACTORY" in
   no) ;;
   yes) FACTORYVERSION=`egrep '^factory_version=' $srcdir/factory/configure.in | sed s/.*=//`
	AC_SUBST(FACTORYVERSION)
	AC_DEFINE_UNQUOTED(FACTORYVERSION,$FACTORYVERSION,factory version number)
	AC_DEFINE(FACTORY,,whether to link with factory)
	;;
   *) echo configure: error: unrecognized value --with-factory="$withval" >&2; exit 1 ;;
esac

GMP=provided
GMPLIB=../../gmp/.libs/libgmp.a
AC_SUBST(GMP)
AC_SUBST(GMPLIB)
AC_ARG_WITH(gmp,[  --with-gmp              use system-installed gmp library],GMP="$withval")
case "$GMP" in
   provided) ;;
   yes) if test -f /usr/lib/libgmp.a
        then GMPLIB=/usr/lib/libgmp.a
	elif test -f /opt/lib/libgmp.a
	then GMPLIB=/opt/lib/libgmp.a
	elif test -f /usr/local/lib/libgmp.a
	then GMPLIB=/usr/local/lib/libgmp.a
	else echo "`basename $0`: libgmp.a: can't find file" >&2; exit 1
	fi
	;;
   *) echo configure: error: unrecognized value --with-gmp="$withval" >&2; exit 1 ;;
esac

GC=provided
AC_SUBST(GC)
AC_ARG_WITH(gc,[  --with-gc               use system-installed gc library],GC="$withval")
case "$GC" in
   provided|yes) ;;
   *) echo configure: error: unrecognized value --with-gc="$withval" >&2; exit 1 ;;
esac

# 'enable' options

DUMPDATA=yes
AC_SUBST(DUMPDATA)
AC_ARG_ENABLE(dumpdata,[\
  --disable-dumpdata      do not cache data with dumpdata
  --enable-dumpdata=old   cache data with the old version of dumpdata\
],DUMPDATA="$enableval")
case "$DUMPDATA" in
   no) ;;
   old) ;;
   yes) AC_DEFINE(NEWDUMPDATA,,whether to use the new version of dumpdata) ;;
   *) echo configure: error: unrecognized value --enable-dumpdata="$enableval" >&2; exit 1 ;;
esac
case "$DUMPDATA" in
   yes|old) AC_DEFINE(DUMPDATA,,whether to use dumpdata) ;;
esac

SHARED=no
AC_SUBST(SHARED)
AC_ARG_ENABLE(shared,[  --enable-shared         create shared libraries],SHARED="$enableval")
case "$SHARED" in
   no) ;;
   yes) AC_DEFINE(SHARED,,whether to use shared libraries) ;;
   *) echo configure: error: unrecognized value --enable-shared="$enableval" >&2; exit 1 ;;
esac

PROFILE=no
AC_SUBST(PROFILE)
AC_ARG_ENABLE(profile,[  --enable-profile        enable profiling (and disable stripping)],PROFILE="$enableval")

DEBUG=no
AC_SUBST(DEBUG)
AC_ARG_ENABLE(debug,[  --enable-debug          enable debugging],DEBUG="$enableval")

VERBOSE=no
AC_SUBST(VERBOSE)
AC_ARG_ENABLE(verbose,[  --enable-verbose        enable verbose memory allocation],VERBOSE="$enableval")

STATIC=no
AC_SUBST(STATIC)
AC_ARG_ENABLE(static,[  --enable-static         enable static linking],STATIC="$enableval")

MEMDEBUG=no
AC_SUBST(MEMDEBUG)
AC_ARG_ENABLE(memdebug,[  --enable-memdebug       enable memory allocation debugging],MEMDEBUG="$enableval")

OPTIMIZE=yes
AC_SUBST(OPTIMIZE)
AC_ARG_ENABLE(optimize,[  --disable-optimize      disable optimization],OPTIMIZE="$enableval")

STRIP=yes
AC_SUBST(STRIP)
AC_ARG_ENABLE(strip,   [  --disable-strip         do not strip the Macaulay 2 binary],STRIP="$enableval")

GC_FOR_NEW=yes
AC_SUBST(GC_FOR_NEW)
AC_ARG_ENABLE(gc_for_new,[  --disable-gc-for-new     use builtin_new instead of gc],GC_FOR_NEW="$enableval")

AC_CHECK_FUNC(__finite,,AC_DEFINE(__finite,finite,whether __finite is missing))
AC_CHECK_FUNC(__isnan,,AC_DEFINE(__isnan,isnan,whether __isnan is missing))
AC_CHECK_FUNC(__isinf,,AC_DEFINE(__isinf,isinf,whether __isinf is missing))
M2_SHOW_CONFDEFS()
M2_IS_THERE(sys_errlist)
M2_IS_THERE(herror)
M2_IS_DECLARED(char **,sys_errlist)
M2_IS_DECLARED(char **,h_errlist)
AC_CONFIG_HEADER(include/config.h)
CONFIGURED_FILES="M2_CONFIGURED_FILES()"
AC_SUBST(CONFIGURED_FILES)
dnl AC_CONFIG_SUBDIRS(gmp factory libfac)
AC_OUTPUT(M2_CONFIGURED_FILES())
