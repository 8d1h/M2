diff -ur libfac/factor/Factor.cc libfac-0.3.2.20010628/factor/Factor.cc
--- libfac/factor/Factor.cc	Thu Jun 28 11:27:06 2001
+++ libfac-0.3.2.20010628/factor/Factor.cc	Tue Jul 31 10:55:38 2001
@@ -5,6 +5,7 @@
 ///////////////////////////////////////////////////////////////////////////////
 // FACTORY - Includes
 #include <factory.h>
+#include <iostream.h>
 // Factor - Includes
 #include "tmpl_inst.h"
 #include "SqrFree.h"
@@ -323,8 +324,13 @@
 #ifdef HAVE_SINGULAR
     WerrorS("libfac: evaluate: Extension not inFF() or inGF() !");
 #else
+#ifndef NOSTREAMIO
     cerr << "libfac: evaluate: " << Extension << " not inFF() or inGF() !"
          << endl;
+#else
+    cerr << "libfac: evaluate: extension not inFF() or inGF() !"
+         << endl;
+#endif
 #endif
     FFRandom gen;
     }
@@ -428,8 +434,13 @@
 #ifdef HAVE_SINGULAR
     WerrorS("libfac: evaluate: Extension not inFF() or inGF() !");
 #else
+#ifndef NOSTREAMIO
     cerr << "libfac: evaluate: " << Extension << " not inFF() or inGF() !"
          << endl;
+#else
+    cerr << "libfac: evaluate: Extension not inFF() or inGF() !"
+         << endl;
+#endif
 #endif
     FFRandom gen; }}
   REvaluation k(1,n,gen);
diff -ur libfac/factor/MVMultiHensel.cc libfac-0.3.2.20010628/factor/MVMultiHensel.cc
--- libfac/factor/MVMultiHensel.cc	Thu Jun 28 11:27:06 2001
+++ libfac-0.3.2.20010628/factor/MVMultiHensel.cc	Tue Jul 31 10:57:00 2001
@@ -5,6 +5,7 @@
 ///////////////////////////////////////////////////////////////////////////////
 // FACTORY - Includes
 #include <factory.h>
+#include <iostream.h>
 // Factor - Includes
 #include "tmpl_inst.h"
 #include "helpstuff.h"
@@ -122,8 +123,12 @@
 #ifdef HAVE_SINGULAR
       WerrorS("libfac: diophant ERROR: F1 and F2 are not relatively prime! ");
 #else
+#ifndef NOSTREAMIO
       cerr << "libfac: diophant ERROR: " << F1 << "  and  " << F2 
 	   << "  are not relatively prime!" << endl;
+#else
+      cerr << "libfac: diophant ERROR: F1 and F2 are not relatively prime!" << endl;
+#endif
 #endif
       Retvalue.One=F1;Retvalue.Two=F2;
       return Retvalue;
diff -ur libfac/factor/SqrFree.cc libfac-0.3.2.20010628/factor/SqrFree.cc
--- libfac/factor/SqrFree.cc	Thu Jun 28 11:27:06 2001
+++ libfac-0.3.2.20010628/factor/SqrFree.cc	Tue Jul 31 10:53:45 2001
@@ -6,6 +6,7 @@
 ///////////////////////////////////////////////////////////////////////////////
 // FACTORY - Includes
 #include<factory.h>
+#include <iostream.h>
 // Factor - Includes
 #include "tmpl_inst.h"
 #include "helpstuff.h"
diff -ur libfac/factor/Truefactor.cc libfac-0.3.2.20010628/factor/Truefactor.cc
--- libfac/factor/Truefactor.cc	Thu Jun 28 11:27:06 2001
+++ libfac-0.3.2.20010628/factor/Truefactor.cc	Tue Jul 31 10:57:22 2001
@@ -5,6 +5,7 @@
 ///////////////////////////////////////////////////////////////////////////////
 // Factory - Includes
 #include <factory.h>
+#include <iostream.h>
 // Factor - Includes
 #include "tmpl_inst.h"
 #include "helpstuff.h"
diff -ur libfac/factor/tmpl_inst.cc libfac-0.3.2.20010628/factor/tmpl_inst.cc
--- libfac/factor/tmpl_inst.cc	Thu Jun 28 11:27:06 2001
+++ libfac-0.3.2.20010628/factor/tmpl_inst.cc	Tue Jul 31 10:53:07 2001
@@ -24,12 +24,14 @@
 template class Matrix<CanonicalForm>;
 template class SubMatrix<CanonicalForm>;
 
+#ifndef NOSTREAMIO
 template ostream & operator << ( ostream &, const List<CanonicalForm> & );
 template ostream & operator << ( ostream &, const List<CFFactor> & );
 template ostream & operator << ( ostream &, const List<MapPair> & );
 template ostream & operator << ( ostream &, const Array<CanonicalForm> & );
 template ostream & operator << ( ostream &, const Factor<CanonicalForm> & );
 //template ostream & operator << ( ostream &, const Matrix<CanonicalForm> & );
+#endif
 
 template List<CFFactor> Union ( const List<CFFactor>&, const List<CFFactor>& );
 
@@ -61,8 +63,10 @@
 template List<CanonicalForm> Union ( const List<CanonicalForm>&, const List<CanonicalForm>& );
 template List<CanonicalForm> Difference ( const List<CanonicalForm>&, const List<CanonicalForm>& );
 
+#ifndef NOSTREAMIO
 template ostream & operator << ( ostream &, const List<int> & );
 template ostream & operator << ( ostream &, const List<IntList> & );
+#endif
 
 // for charsets:
 template class List<CFList>;
@@ -73,10 +77,12 @@
 template List<Variable> Union ( const List<Variable>&, const List<Variable>& );
 template List<Variable> Difference ( const List<Variable>&, const List<Variable>& );
 
+#ifndef NOSTREAMIO
 template ostream & operator << ( ostream &, const List<CFList> & );
 template ostream & operator << ( ostream &, const List<Variable> & );
 template ostream & operator << ( ostream &, const List<int> & );
 template ostream & operator << ( ostream &, const Array<int> & );
+#endif
 
 template class Array<int>;
 template class Array<Variable>;
