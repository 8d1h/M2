# @configure_input@ -*- GNUmakefile -*-

ifneq ($(CONFIG_MAKEFILE),)
$(error config.Makefile already loaded)
endif
CONFIG_MAKEFILE = loaded

# every makefile that includes this one should use 'all' as the
# default (first) target
all::

# the usual phony targets
.PHONY : all check initialize clean distclean install always reconfigure

# cygwin 'make' might get confused by setting SHELL
# SHELL = @SHELL@

.DELETE_ON_ERROR :

# here we set the variables that "make" uses
CC = @CC@
CXX = @CXX@
FC = @FC@
CFLAGS = @CFLAGS@
CPPFLAGS = @CPPFLAGS@
CXXFLAGS = @CXXFLAGS@
FFLAGS = @FFLAGS@
FCFLAGS = @FCFLAGS@
LDFLAGS = @LDFLAGS@
LOADLIBES = @LOADLIBES@
LDLIBS = @LDLIBS@ 

# Macaulay 2 file system layout definitions, dependent on $(prefix) and PackageName.
#  see http://www.pathname.com/fhs/
#      http://fink.sourceforge.net/doc/packaging/fslayout.php
#      http://cr.yp.to/unix.html, the section on "Filesystem layout"

## here we set the make-variables that configure uses as make-variables inside configure-variables
# designed by autoconf:
prefix = @prefix@
exec_prefix = @exec_prefix@
datarootdir = @datarootdir@
docdir = @docdir@
INSTALL = @INSTALL@
##

## here we set the variables that we want to be able to override
STRIP = @STRIP@
##

ifeq ($(findstring $(prefix),@infodir@),)
$(error expected infodir @infodir@ to begin with $(prefix))
endif
ifeq ($(findstring $(prefix),@bindir@),)
$(error expected bindir @bindir@ to begin with $(prefix))
endif
ifeq ($(findstring $(prefix),@datadir@),)
$(error expected datadir @datadir@ to begin with $(prefix))
endif
ifeq ($(findstring $(prefix),@libdir@),)
$(error expected libdir @libdir@ to begin with $(prefix))
endif
ifeq ($(findstring $(prefix),@mandir@),)
$(error expected mandir @mandir@ to begin with $(prefix))
endif

infoRelDir = $(subst $(prefix)/,,@infodir@)
binRelDir = $(subst $(prefix)/,,@bindir@)
dataRelDir = $(subst $(prefix)/,,@datadir@)
libRelDir = $(subst $(prefix)/,,@libdir@)
manRelDir = $(subst $(prefix)/,,@mandir@)
man1RelDir = $(manRelDir)/man1
man3RelDir = $(manRelDir)/man3
emacsRelDir = $(dataRelDir)/emacs/site-lisp
docRelDir = $(dataRelDir)/doc
docm2RelDir = $(docRelDir)/Macaulay2
packagesRelDir = $(dataRelDir)/Macaulay2
docpackagesRelDir = $(docm2RelDir)
packagesrcRelDir = $(packagesRelDir)/PackageName
packagedocRelDir = $(docpackagesRelDir)/PackageName
packageimagesRelDir = $(packagedocRelDir)/images
packagetestsRelDir = $(packagedocRelDir)/tests
packagehtmlRelDir = $(packagedocRelDir)/html
packageexamplesRelDir = $(packagedocRelDir)/examples
librariesRelDir = $(libRelDir)/Macaulay2/libraries
libm2RelDir     = $(libRelDir)/Macaulay2/Core
cacheRelDir     = $(libm2RelDir)/cache
packagecacheRelDir = $(libRelDir)/Macaulay2/PackageName/cache
datam2RelDir = $(dataRelDir)/Macaulay2
shareRelDir = $(datam2RelDir)/Core
m2RelDir = $(shareRelDir)/m2
docm2relRelDir = $(docm2RelDir)/Core
emacsdocRelDir = $(docm2relRelDir)/emacs
imagesRelDir = $(docm2relRelDir)/images
styleRelDir = $(docm2relRelDir)/style

MAKEFUN = "$(1)" => PackageName -> "$(subst PackageName,"|PackageName|",$($(1)RelDir))/"

LAYOUT := {
LAYOUT += "bin"=>"$(binRelDir)/",
LAYOUT += "lib"=>"$(libRelDir)/",
LAYOUT += "info"=>"$(infoRelDir)/",
LAYOUT += "data"=>"$(dataRelDir)/",
LAYOUT += "man"=>"$(manRelDir)/",
LAYOUT += "man1"=>"$(man1RelDir)/",
LAYOUT += "man3"=>"$(man3RelDir)/",
LAYOUT += "emacs"=>"$(emacsRelDir)/",
LAYOUT += "doc"=>"$(docRelDir)/",
LAYOUT += "docm2"=>"$(docm2RelDir)/",
LAYOUT += "packages" => "$(packagesRelDir)/",
LAYOUT += "docpackages"=>"$(docpackagesRelDir)/",
LAYOUT += "libm2"=>"$(libm2RelDir)/",
LAYOUT += "libraries"=>"$(librariesRelDir)/",
LAYOUT += "cache"=>"$(cacheRelDir)/",
LAYOUT += "datam2"=>"$(datam2RelDir)/",
LAYOUT += "share"=>"$(shareRelDir)/",
LAYOUT += "m2"=>"$(m2RelDir)/",
LAYOUT += "docm2rel"=>"$(docm2relRelDir)/",
LAYOUT += "emacsdoc"=>"$(emacsdocRelDir)/",
LAYOUT += "images"=>"$(imagesRelDir)/",
LAYOUT += "style"=>"$(styleRelDir)/",
LAYOUT += $(call MAKEFUN,packagesrc),
LAYOUT += $(call MAKEFUN,packagedoc),
LAYOUT += $(call MAKEFUN,packageimages),
LAYOUT += $(call MAKEFUN,packagetests),
LAYOUT += $(call MAKEFUN,packagehtml),
LAYOUT += $(call MAKEFUN,packagecache),
LAYOUT += $(call MAKEFUN,packageexamples)
LAYOUT += }

# end file system layout

BUILTLIBPATH = @TOPDIR@/libraries/final@FINALPREFIX@/$(librariesRelDir)
CPPFLAGS := -I$(BUILTLIBPATH)/include $(CPPFLAGS)
LDFLAGS := -L$(BUILTLIBPATH)/lib $(LDFLAGS)
LD_LIBRARY_PATH := $(BUILTLIBPATH)/lib:$(LD_LIBRARY_PATH)
export LD_LIBRARY_PATH

FINALLIBPATH = @FINALPREFIX@/$(librariesRelDir)

AR = ar

MAKEFLAGS += -w

ifeq "@OS@ @ARCH@" "Linux alpha"
AS = gcc -c -x assembler-with-cpp
endif

ifeq "@GCC@" "yes"
# if it's gcc, we can get stricter warning and error messages

ifneq ($(RELAX),yes)
# but sometimes that's bad, e.g., during configure scripts with loosely written test programs
CFLAGS   += -pipe -Wall              -Wshadow -Winline -Wcast-qual -Wno-parentheses -Wno-sign-compare -Werror-implicit-function-declaration
CXXFLAGS += -pipe -Wall -Wconversion -Wshadow -Winline -Wcast-qual -Wno-parentheses -Wno-sign-compare -Woverloaded-virtual -Wsign-promo
# -Werror-implicit-function-declaration is important, because if we include the wrong include file and a function that
# returns a 64-bit pointer is not declared as such, then only 32 bits of the return value will be used.
endif

##  this option is sort of interesting, but generates nothing really useful for us:
# CXXFLAGS += -Weffc++

ifeq "@HAVE_NO_STRICT_ALIASING@" "yes"
CFLAGS += -Wno-strict-aliasing
endif
endif

STRIPCMD = @STRIPCMD@
ifeq "$(STRIP)" "yes"
ifneq "@OS@" "Darwin"
LDFLAGS  += -s
endif
endif

