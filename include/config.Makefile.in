# @configure_input@ -*- GNUmakefile -*-

ifneq ($(CONFIG_MAKEFILE),)
$(error config.Makefile already loaded)
endif
CONFIG_MAKEFILE = loaded

# every makefile that includes this one should use 'all' as the
# default (first) target
all::

# the usual phony targets
.PHONY : all check initialize clean distclean install always reconfigure

# cygwin 'make' might get confused by setting SHELL
# SHELL = @SHELL@

.DELETE_ON_ERROR :

# here we set the variables that "make" uses
CC = @CC@
CXX = @CXX@
FC = @FC@
CFLAGS = @CFLAGS@
CPPFLAGS = @CPPFLAGS@
CXXFLAGS = @CXXFLAGS@
FCFLAGS = @FCFLAGS@
LDFLAGS = @LDFLAGS@

# Macaulay 2 file system layout definitions, dependent on $(prefix) and PackageName.
#  see http://www.pathname.com/fhs/
#      http://fink.sourceforge.net/doc/packaging/fslayout.php
#      http://cr.yp.to/unix.html, the section on "Filesystem layout"

### Here we set the make-variables that configure uses as make-variables inside configure-variables.
# The user should override only this one:
prefix = @prefix@
# We assume relative positions of files within the tree are known to the configure script.
# Thus the user should not override these on the "make" command line, but may
# override them on the "configure" command line instead:
exec_prefix = @exec_prefix@
datarootdir = @datarootdir@
docdir = @docdir@
INSTALL = @INSTALL@
##

BUILTLIBPATH = @TOPDIR@/libraries/final@FINALPREFIX@/@librariesdirtail@
CPPFLAGS := -I$(BUILTLIBPATH)/include $(CPPFLAGS)
LDFLAGS := -L$(BUILTLIBPATH)/lib $(LDFLAGS)
LD_LIBRARY_PATH := $(BUILTLIBPATH)/lib:$(LD_LIBRARY_PATH)
export LD_LIBRARY_PATH

FINALLIBPATH = @FINALPREFIX@/@librariesdirtail@

AR = ar

MAKEFLAGS += -w

ifeq "@OS@ @ARCH@" "Linux alpha"
AS = gcc -c -x assembler-with-cpp
endif

M2_CPPFLAGS += @M2_CPPFLAGS@

ifeq "@GCC@" "yes"
# if it's gcc, we can get stricter warning and error messages
ifneq ($(RELAX),yes)
# but sometimes that's bad, e.g., during configure scripts with loosely written test programs
# -Winline gives too many warning messages
M2_BOTH      = -pipe -Wall -Wshadow -Wcast-qual -Wno-parentheses -Wno-sign-compare -Werror=uninitialized
M2_CFLAGS   += -Werror=implicit-function-declaration -Werror=write-strings $(M2_BOTH)
M2_CXXFLAGS += -Wconversion $(M2_BOTH)
# -Werror-implicit-function-declaration is important, because if we include the wrong include file and a function that
# returns a 64-bit pointer is not declared as such, then only 32 bits of the return value will be used.
endif
endif

STRIPCMD = @STRIPCMD@
ifeq "$(STRIP)" "yes"
ifneq "@OS@" "Darwin"
LDFLAGS  += -s
endif
endif

# MKDIR_P = @ MKDIR_P @
MKDIR_P = @INSTALL@ -d
