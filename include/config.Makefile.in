# @configure_input@ -*- Makefile -*-

# every makefile that includes this one should use 'all' as the
# default (first) target
all::

# the usual phony targets
.PHONY : all check initialize clean distclean install always reconfigure

# cygwin 'make' might get confused by setting SHELL
# SHELL = @SHELL@

.DELETE_ON_ERROR :

PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_VERSION = @PACKAGE_VERSION@

package = Macaulay2-$(PACKAGE_VERSION)
ARCH    = @ARCH@
OS      = @OS@
REL     = @REL@

LIBRARIES = $(shell cd 
LD_LIBRARY_PATH=
export LD_LIBRARY_PATH

COMPRESS = @COMPRESS@
PKG_TGZ = $(package)-$(ARCH)-$(OS).tar.gz
PKG_TBZ = $(package)-$(ARCH)-$(OS).tar.bz2
PKG_DEB = $(package)-$(ARCH)-$(OS).deb
PKG_RPM = $(package)-$(ARCH)-$(OS).rpm
PKG_TZ  = $(package)-$(ARCH)-$(OS).tar.$(COMPRESS)

DESC    = @PACKAGE_VERSION@-@host_cpu@-@OS@-@REL@
# we used to use @ ARCH @ instead of @ host_cpu @ here, but for DEC alphas,
# and perhaps other machines, it gives more information.  The script
# config.guess assembles host_cpu from /proc/cpuinfo, and can be something
# like "alphaev6" or "alphaev56", but ARCH, which is determined from 'uname'
# by the 'configure' script, will be simply "alpha".

DUMPDATA = @DUMPDATA@
NODENAME = @NODENAME@
PROFILING = @PROFILING@
FACTORY = @FACTORY@
STRIP = @STRIP@
OPTIMIZE = @OPTIMIZE@
DEBUG = @DEBUG@
MEMDEBUG = @MEMDEBUG@
VERBOSE = @VERBOSE@
STATIC = @STATIC@
CYGWIN = @CYGWIN@
TARLIBS = @TARLIBS@
DEBIAN = @DEBIAN@
RPM = @RPM@
M2TARFILE = @M2TARFILE@
TAR_COMPRESS_OPTION = @TAR_COMPRESS_OPTION@

CC = @CC@
GCC = @GCC@
CXX = @CXX@
YACC = @YACC@
AWK = @AWK@
CURL = curl
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
MKDIR_P = @MKDIR_P@
CFLAGS = @CFLAGS@
CPPFLAGS = @CPPFLAGS@
CXXFLAGS = @CXXFLAGS@
FFLAGS = @FFLAGS@
LDFLAGS = @LDFLAGS@
LOADLIBES = @LOADLIBES@
LDLIBS = @LDLIBS@
LAPACK = @LAPACK@
LAPACKLIBS = @LAPACKLIBS@
GMPLIB = @GMPLIB@
GCLIB = @GCLIB@
NTLLIB = @NTLLIB@
GDBMLIB = @GDBMLIB@
LIBCF = @LIBCF@
LIBFAC = @LIBFAC@
READLINELIB = @READLINELIB@
HISTORYLIB = @HISTORYLIB@
NM_DEMANGLES = @NM_DEMANGLES@
ENCAP = @ENCAP@
M2SUFFIX = @M2SUFFIX@
EXEEXT = @EXEEXT@
EXE = $(M2SUFFIX)$(EXEEXT)
CONFIG_ARG0 = @CONFIG_ARG0@
CONFIG_ARGS = @CONFIG_ARGS@
CONFIG_CMD = @CONFIG_CMD@

# See the autoconf documentation for a description of LIBS, which autoconf uses at configure time for checking for features
# But I don't want to use it that way.
# LDLIBS += @LIBS@

# See the autoconf documentation for a description of DEFS; we use include/config.h instead, to keep command lines short
DEFS = @DEFS@

M2PKGNAME = PackageName

# Macaulay 2 file system layout definitions, dependent on $(prefix) defined
# above and on $(M2PKGNAME) undefined above.
#  see http://www.pathname.com/fhs/
#      http://fink.sourceforge.net/doc/packaging/fslayout.php
#      http://cr.yp.to/unix.html, the section on "Filesystem layout"

# this might have to get changed manually, but hopefully not:
MAINPACKAGE = Core

prefix = @prefix@
exec_prefix = @exec_prefix@

ifeq "$(ENCAP)" "yes"
encapdir = $(prefix)/$(package)
tarparent = $(prefix)
tarsubdir = $(package)
else
ifeq "$(CYGWIN)" "yes"
tarparent = $(prefix)/$(package)
tarsubdir = usr
encapdir = $(prefix)/$(package)/usr
else
encapdir = $(prefix)/.
tarparent = NONE
tarsubdir = NONE
endif
endif

# in autoconf >= 2.60, @datadir@ is replaced by ${datarootdir}, so we need to get its value here:
datarootdir = @datarootdir@

ifeq ($(findstring $(prefix),@infodir@),)
$(error expected infodir @infodir@ to begin with $(prefix))
endif
ifeq ($(findstring $(prefix),@bindir@),)
$(error expected bindir @bindir@ to begin with $(prefix))
endif
ifeq ($(findstring $(prefix),@datadir@),)
$(error expected datadir @datadir@ to begin with $(prefix))
endif
ifeq ($(findstring $(prefix),@libdir@),)
$(error expected libdir @libdir@ to begin with $(prefix))
endif
ifeq ($(findstring $(prefix),@mandir@),)
$(error expected mandir @mandir@ to begin with $(prefix))
endif

infoRelDir = $(subst $(prefix)/,,@infodir@)
binRelDir = $(subst $(prefix)/,,@bindir@)
dataRelDir = $(subst $(prefix)/,,@datadir@)
libRelDir = $(subst $(prefix)/,,@libdir@)
manRelDir = $(subst $(prefix)/,,@mandir@)
man1RelDir = $(manRelDir)/man1
man3RelDir = $(manRelDir)/man3
emacsRelDir = $(dataRelDir)/emacs/site-lisp
docRelDir = $(dataRelDir)/doc
docm2RelDir = $(docRelDir)/Macaulay2
packagesRelDir = $(dataRelDir)/Macaulay2
docpackagesRelDir = $(docm2RelDir)
packagesrcRelDir = $(packagesRelDir)/$(M2PKGNAME)
packagedocRelDir = $(docpackagesRelDir)/$(M2PKGNAME)
packageimagesRelDir = $(packagedocRelDir)/images
packagetestsRelDir = $(packagedocRelDir)/tests
packagehtmlRelDir = $(packagedocRelDir)/html
packagecacheRelDir = $(packagedocRelDir)/cache
packageexamplesRelDir = $(packagedocRelDir)/examples
libm2RelDir = $(libRelDir)/Macaulay2/$(MAINPACKAGE)
cacheRelDir = $(libm2RelDir)/cache
datam2RelDir = $(dataRelDir)/Macaulay2
shareRelDir = $(datam2RelDir)/$(MAINPACKAGE)
m2RelDir = $(shareRelDir)/m2
docm2relRelDir = $(docm2RelDir)/$(MAINPACKAGE)
emacsdocRelDir = $(docm2relRelDir)/emacs
imagesRelDir = $(docm2relRelDir)/images
styleRelDir = $(docm2relRelDir)/style

bindir = $(encapdir)/$(binRelDir)
libdir = $(encapdir)/$(libRelDir)
infodir = $(encapdir)/$(infoRelDir)
datadir = $(encapdir)/$(dataRelDir)
mandir = $(encapdir)/$(manRelDir)
man1dir = $(encapdir)/$(man1RelDir)
man3dir = $(encapdir)/$(man3RelDir)
emacsdir = $(encapdir)/$(emacsRelDir)
docdir = $(encapdir)/$(docRelDir)
docm2dir = $(encapdir)/$(docm2RelDir)
packagesdir = $(encapdir)/$(packagesRelDir)
docpackagesdir = $(encapdir)/$(docpackagesRelDir)
libm2dir = $(encapdir)/$(libm2RelDir)
cachedir = $(encapdir)/$(cacheRelDir)
datam2dir = $(encapdir)/$(datam2RelDir)
sharedir = $(encapdir)/$(shareRelDir)
m2dir = $(encapdir)/$(m2RelDir)
docm2reldir = $(encapdir)/$(docm2relRelDir)
emacsdocdir = $(encapdir)/$(emacsdocRelDir)
imagesdir = $(encapdir)/$(imagesRelDir)
styledir = $(encapdir)/$(styleRelDir)
packagesrcdir = $(encapdir)/$(packagesrcRelDir)
packagedocdir = $(encapdir)/$(packagedocRelDir)
packageimagesdir = $(encapdir)/$(packageimagesRelDir)
packagetestsdir = $(encapdir)/$(packagetestsRelDir)
packagehtmldir = $(encapdir)/$(packagehtmlRelDir)
packagecachedir = $(encapdir)/$(packagecacheRelDir)
packageexamplesdir = $(encapdir)/$(packageexamplesRelDir)

MAKEFUN = "$(1)" => $(M2PKGNAME) -> "$(subst $(M2PKGNAME),"|$(M2PKGNAME)|",$($(1)RelDir))/"

LAYOUT := {
LAYOUT += "bin"=>"$(binRelDir)/",
LAYOUT += "lib"=>"$(libRelDir)/",
LAYOUT += "info"=>"$(infoRelDir)/",
LAYOUT += "data"=>"$(dataRelDir)/",
LAYOUT += "man"=>"$(manRelDir)/",
LAYOUT += "man1"=>"$(man1RelDir)/",
LAYOUT += "man3"=>"$(man3RelDir)/",
LAYOUT += "emacs"=>"$(emacsRelDir)/",
LAYOUT += "doc"=>"$(docRelDir)/",
LAYOUT += "docm2"=>"$(docm2RelDir)/",
LAYOUT += "packages" => "$(packagesRelDir)/",
LAYOUT += "docpackages"=>"$(docpackagesRelDir)/",
LAYOUT += "libm2"=>"$(libm2RelDir)/",
LAYOUT += "cache"=>"$(cacheRelDir)/",
LAYOUT += "datam2"=>"$(datam2RelDir)/",
LAYOUT += "share"=>"$(shareRelDir)/",
LAYOUT += "m2"=>"$(m2RelDir)/",
LAYOUT += "docm2rel"=>"$(docm2relRelDir)/",
LAYOUT += "emacsdoc"=>"$(emacsdocRelDir)/",
LAYOUT += "images"=>"$(imagesRelDir)/",
LAYOUT += "style"=>"$(styleRelDir)/",
LAYOUT += $(call MAKEFUN,packagesrc),
LAYOUT += $(call MAKEFUN,packagedoc),
LAYOUT += $(call MAKEFUN,packageimages),
LAYOUT += $(call MAKEFUN,packagetests),
LAYOUT += $(call MAKEFUN,packagehtml),
LAYOUT += $(call MAKEFUN,packagecache),
LAYOUT += $(call MAKEFUN,packageexamples)
LAYOUT += }

# end file system layout

RANLIB = @RANLIB@
AR = ar

MAKEFLAGS += -w

ifeq "$(OS) $(ARCH)" "Linux alpha"
AS = gcc -c -x assembler-with-cpp
endif

ifeq "$(CC)" "cl"
include config.Microsoft
endif

ifeq "$(MEMDEBUG)" "yes"
DEBUG = yes
endif

ifeq "$(DEBUG)" "yes"
STRIP = no
endif

ifeq "$(PROFILING)" "yes"
CFLAGS   += -pg
CXXFLAGS += -pg
LDFLAGS  += -pg
STRIP = no
endif

ifeq "$(DEBUG)" "yes"
CPPFLAGS += -DDEBUG
else
CPPFLAGS += -DNDEBUG
endif

ifeq "$(GCC)" "yes"
# if it's gcc, we can get stricter warning and error messages
ifneq ($(RELAX),yes)
# but sometimes that's bad, e.g., during configure scripts with loosely written test programs
CFLAGS   += -pipe -Wall              -Wshadow -Winline -Wcast-qual -Wno-parentheses -Wno-sign-compare -Werror-implicit-function-declaration
CXXFLAGS += -pipe \
	    -Wall -Wconversion -Wshadow -Winline -Wcast-qual -Wno-parentheses -Wno-sign-compare \
	    -Woverloaded-virtual -Wsign-promo
# -Werror-implicit-function-declaration is important, because if we include the wrong include file and a function that
# returns a 64-bit pointer is not declared as such, then only 32 bits of the return value will be used.
endif

CPPFLAGS += -Wfatal-errors
CFLAGS += -Wfatal-errors
CXXFLAGS += -Wfatal-errors

##  this option is sort of interesting, but generates nothing really useful for us:
# CXXFLAGS += -Weffc++

ifeq "@HAVE_NO_STRICT_ALIASING@" "yes"
CFLAGS += -Wno-strict-aliasing
endif

ifeq "$(OPTIMIZE)" "yes"
CFLAGS   += -O3
CXXFLAGS += -O3
else
CFLAGS   += -O0
CXXFLAGS += -O0
endif
endif

ifeq "$(STRIP)" "no"
STRIPCMD := :
else
ifneq "$(CC)" "cl"
# -fomit-frame-pointer causes strange bugs!
# CFLAGS   += -fomit-frame-pointer
# CXXFLAGS += -fomit-frame-pointer
ifneq "$(OS)" "Darwin"
LDFLAGS  += -s
endif
STRIPCMD := strip
endif
endif

ifeq "$(MEMDEBUG)" "yes"
CPPFLAGS += -DMEMDEBUG
endif

DUMPDATAFILE := Macaulay2-$(ARCH)-data

ifeq "$(DEBUG)" "yes"
CPPFLAGS += -DGC_DEBUG
endif

ifeq "$(OS)" "Darwin"

# we don't know what this does, but some apple documentation writers seem to like it:
LDFLAGS += -bind_at_load

# this one makes it find and use our readline.a first, even if there is a file readline.dylib in /usr/lib
# the point is that the system's readline.dylib might be much older and conflict with our newer one
LDFLAGS += -Wl,-search_paths_first

endif

ALTIVEC = @ALTIVEC@
ifeq "$(ALTIVEC)" "yes"
LDFLAGS += -faltivec
CFLAGS += -faltivec
CXXFLAGS += -faltivec
endif

XCODE = @XCODE@

# whether a profiling version of library libntl is available with -lntl-pg
HAVE_LIBNTL_PG = @HAVE_LIBNTL_PG@

# whether a profiling version of factory library libcf is available with -lcf-pg
HAVE_LIBCF_PG = @HAVE_LIBCF_PG@

# whether a profiling version of library libfac is available with -lfac-pg
HAVE_LIBFAC_PG = @HAVE_LIBFAC_PG@

# whether a profiling version of library libgc is available with -lgc-pg
HAVE_LIBGC_PG = @HAVE_LIBGC_PG@

# whether a profiling version of library libgmp is available with -lgmp-pg
HAVE_LIBGMP_PG = @HAVE_LIBGMP_PG@

showvars :
	: PACKAGE_NAME = $(PACKAGE_NAME)
	: PACKAGE_TARNAME = $(PACKAGE_TARNAME)
	: PACKAGE_VERSION = $(PACKAGE_VERSION)
	: package = $(package)
	: ARCH = $(ARCH)
	: OS = $(OS)
	: REL = $(REL)
	: DESC = $(DESC)
	: CYGWIN = $(CYGWIN)
	: prefix = $(prefix)
	: encapdir = $(encapdir)
	: tarparent = $(tarparent)
	: tarsubdir = $(tarsubdir)
	: bindir = $(bindir)
	: libdir = $(libdir)
	: infodir = $(infodir)
	: datadir = $(datadir)
	: mandir = $(mandir)
	: man1dir = $(man1dir)
	:  = $()
	:  = $()
	:  = $()
	:  = $()
	:  = $()
	:  = $()
	:  = $()
	:  = $()
	:  = $()
	:  = $()
	:  = $()
	:  = $()
	:  = $()
	:  = $()
	:  = $()
