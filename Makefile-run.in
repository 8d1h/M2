#############################################################################

# Targets to use:
#	all:	make a binary distribution
#	justM2:	make Macalay2/libexec/Macaulay2 and Macaulay2/bin/M2, and setup
#               for running it
#	doc:	make the documentation
#	port:   make a porting source distribution
#	testport: test the porting source distribution in tmp/Macaulay2
# The default is 'all' and 'doc'.

# Warning: if you move the directory tree, then factory needs to be reconfigured

#############################################################################
ifdef XYZZY
  If you get an error message on this line, it is because you are not using
  the 'gnu' version of the 'make' program.  The source code for it is
  available at ftp://ftp.gnu.org/pub/gnu/make.
endif
#############################################################################
TOPDIR = .
include $(TOPDIR)/config.Makefile
srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = $(srcdir)
INSTALL = @INSTALL@
INSTALL_PROGRAM = $(INSTALL)
INSTALL_DATA = $(INSTALL)
#############################################################################
.PHONY : all always dirs clean FACTORYmade FACTORYconfigured FACTORYexports \
	announce MACAULAY2 MACAULAY2.doc doc port default
################################# default
default: all # doc
################################# all
all::
#################################
FILES := Makefile README patches
SUBDIRS := gc gmp factory libfac Macaulay2
export PATH := bin:$(PATH)
################################# preparation
all:: announce
announce::; @echo 'making Macaulay 2 version $(VERSION) for ARCH=$(ARCH) OS=$(OS) REL=$(REL)'
always:
lib/.exists:; mkdir -p lib; touch $@
clean::; rm -rf lib
clean::; rm -f core
distclean::; rm -f config.cache Makefile-configure.overrides config.log config.status configure
distclean:: clean
################################# configure
distclean ::; rm -f $(CONFIGURED_FILES) include/config.h include/config.h.in
################################ SETUP
ifeq "$(CC)" "cl"
justM2 all:: ;	$(MAKE) -C WindowsNT
TARGET := Macaulay2-$(DESC).zip
DOCTARGET := Macaulay2-$(VERSION)-doc.zip
else
TARGET := distributions/Macaulay2-$(DESC).tar.gz
DOCTARGET := distributions/Macaulay2-$(VERSION)-doc.tar.gz
endif
justM2 all:: announce
announce ::
	@echo '## making $(TARGET)'
doc:: announce.doc
announce.doc ::
	@echo '## making $(DOCTARGET)'
################################ GC
ifeq "$(GC)" "provided"
justM2 all:: GC
endif

clean::; rm -f gc/*.obj gc/*.lib
GC:: gc include/gc.h include/gc_cpp.h

ifeq "$(CC)" "cl"
GC:: lib/gc.lib
else
GC:: lib/libgc.a
endif

GC_TARGETS := gc.a
GC_CFLAGS := $(CFLAGS)
GC_CFLAGS += -DLARGE_CONFIG -DNO_SIGNALS

ifeq "$(DEBUG)" "yes"
# Hans Boehm has verified that -DALL_INTERIOR_POINTERS is not needed with -DGC_DEBUG
GC_CFLAGS += -DGC_DEBUG
else
# GC_dump() will not be compiled.
GC_CFLAGS += -DNO_DEBUGGING
endif

# The only reason to have ALL_INTERIOR_POINTERS on is if we are using GC_malloc for C++ routines.
# GC_CFLAGS +=  -DALL_INTERIOR_POINTERS

ifeq "$(VERBOSE)" "no"
GC_CFLAGS += -DSILENT
endif

lib/libgc.a: 		gc/gc.a lib/.exists;	 	cp $< $@; ranlib $@
lib/gc.lib: 		gc/gc.lib lib/.exists;	 	cp $< $@
include/gc.h:		gc/gc.h ;			cp $< $@
include/gc_cpp.h: 	gc/gc_cpp.h ;			cp $< $@

ifeq "$(CC)" "cl"
gc/gc.lib:	  always
	cd gc; MAKEFLAGS= nmake /nologo /f NT_MAKEFILE
else
gc/gc.a: 	  always
	$(MAKE) -C gc CXX='$(CXX)' CC='$(CC)' AS='$(AS)' \
		AR='$(AR)' RANLIB='$(RANLIB)' \
		CFLAGS='$(GC_CFLAGS)' $(GC_TARGETS)
endif

clean::; $(MAKE) -C gc clean
clean::; rm -f gc/base_lib

###################### GMP

ifeq "$(GMP)" "provided"
justM2 all:: GMP
endif

ifeq "$(OS)" "FreeBSD"
GMP : 	lib/libgmp.a
lib/libgmp.a : /usr/lib/libgmp.a
	ln -sf $< $@
else
ifeq "$(CC)" "cl"
GMPlibs = lib/gmp.lib
GMP : 	gmp include/gmp.h $(GMPlibs)
lib/gmp.lib: gmp/gmp.lib lib/.exists; cp $< $@
gmp/gmp.lib : make-gmp
else
GMPlibs := gmp/.libs/libgmp.a
GMP : 	gmp include/gmp.h $(GMPlibs)
GMPFLAGS := -g -O2
ifeq "$(PROFILE)" "yes"
GMPFLAGS := $(GMPFLAGS) -pg
endif
gmp/.libs/libgmp.a : make-gmp
endif
endif

include/gmp.h: gmp/gmp.h ; cp $< $@

make-gmp :: GMPconfigure
make-gmp ::
	@echo we wanted to use: CFLAGS="$(GMPFLAGS)"
	$(MAKE) -C gmp AM_CFLAGS="$(GMPFLAGS)"

ifeq "$(CC)" "cl"
GMPconfigure : gmp/Makefile
gmp/Makefile: WindowsNT/gmp/Makefile
	cp WindowsNT/$@ $@
else
GMPconfigure : gmp/config.status
gmp/config.status: gmp/configure
	cd gmp; \
	rm -f config.status; \
	unset CC CFLAGS CONFIG_SITE; ./configure --silent --disable-shared
#	gmp 3.1 configure has a bug -- can't accept CC=gcc hint.
endif

GMPclean clean::
	-$(MAKE) -C gmp clean
	rm -f lib/gmp.lib lib/libmpn.a lib/libmpz.a lib/libmpq.a lib/libmpf.a lib/libgmp.a
distclean::; -$(MAKE) -C gmp distclean

###################### FACTORY

# when importing a new version of factory, make sure the directory is clean,
# (look to see if factory/config.status is there)

justM2 all:: FACTORY

FACTORYMFLAGS :=
FACTORYINC :=

FACTORY:: include/gmp.h FACTORYconfigured FACTORYmade lib/libcf.a lib/FACTORYinstalled

ifeq "$(SHARED)" "yes"
FACTORY:: Macaulay2/lib/libcf.so
Macaulay2/lib/.exists:; mkdir -p Macaulay2/lib; touch $@
Macaulay2/lib/libcf.so : lib/libcf.a Macaulay2/lib/.exists
	rm -rf tmplib
	mkdir tmplib
	(cd tmplib; ar x ../$<; $(CC) -shared *.o -o ../$@)
	rm -rf tmplib
endif

factory/clean :
	$(MAKE) -C factory clean

FACTORYexports := \
		factory/factory.h \
		factory/factoryconf.h \
		factory/templates/array.cc     \
		factory/templates/array.h      \
		factory/templates/factor.cc    \
		factory/templates/factor.h     \
		factory/templates/functions.h  \
		factory/templates/list.cc      \
		factory/templates/list.h       \
		factory/templates/matrix.cc    \
		factory/templates/matrix.h     \
		factory/tmpl_inst.cc

FACFLAGS :=

ifeq "$(CC)" "cl"
FACTORYexports += factory/cf.lib
clean::; rm -f factory/malloc.h
FACTORYMAKEFLAGS += -f ../WindowsNT/factory/GNUmakefile
FACTORYconfigured: factory/config.h factory/factoryconf.h
FACTORYINC += -I../WindowsNT/factory
factory/config.h : WindowsNT/factory/config.h
	cp $< $@
factory/factoryconf.h : WindowsNT/factory/factoryconf.h
	cp $< $@
else
ifeq "$(SHARED)" "yes"
FACFLAGS += -fPIC
endif
FACTORYexports += factory/libcf.a
FACTORYconfigured: factory/config.status
factory/config.status factory/GNUmakefile : \
		factory/GNUmakefile.in factory/configure
	cd factory;\
	GMP_INCLUDE_PATH=../include \
	CFLAGS="$(CFLAGS) $(FACFLAGS)" \
	CXXFLAGS="$(CXXFLAGS) $(FACFLAGS)" \
	LDFLAGS="$(LDFLAGS)" \
	unset CONFIG_SITE; ./configure --prefix=.. --with-memman --with-optimize
endif

FACTORYmade:
	$(MAKE) -C factory $(FACTORYMAKEFLAGS) \
	   CFLAGS="$(CFLAGS) $(FACFLAGS)" \
	   CXXFLAGS="$(CXXFLAGS) $(FACFLAGS)" \
	   CPPFLAGS="$(CPPFLAGS) -I../include $(FACTORYINC)"

lib/libcf.a lib/FACTORYinstalled: lib/.exists $(FACTORYexports)
	$(MAKE) -C factory $(FACTORYMAKEFLAGS) install
	rm -f lib/libcfmem.a
	touch $@
FACTORYclean clean::
	-$(MAKE) -C factory $(FACTORYMAKEFLAGS) clean
	cd factory; rm -f *.cpp *.pdb
	rm -f lib/cf.lib lib/libcf.a lib/FACTORYinstalled
clean::; rm -rf share
distclean::; -$(MAKE) -C factory $(FACTORYMAKEFLAGS) distclean

###################### LIBFAC
justM2 all:: LIBFAC

ifeq "$(SHARED)" "yes"
LIBFACFLAGS := -fPIC
else
LIBFACFLAGS := 
endif

libfac/clean :
	$(MAKE) -C libfac clean

ifeq "$(CC)" "cl"
LIBFAC:: libfac libfac/Makefile lib/libfac.lib include/factor.h
libfac/Makefile : WindowsNT/libfac/Makefile
	cp WindowsNT/$@ $@
lib/libfac.lib: libfac/libfac.lib lib/.exists; cp $< $@; ranlib $@
libfac/libfac.lib : always
	$(MAKE) -C libfac
else
LIBFAC:: libfac libfac/OPTOBJ libfac/config.status libfac/libfac.a include/factor.h
ifeq "$(SHARED)" "yes"
LIBFAC:: Macaulay2/lib/libfac.so
Macaulay2/lib/libfac.so : libfac/libfac.a
	rm -rf tmplib
	mkdir tmplib
	(cd tmplib; ar x ../$<; $(CC) -shared *.o -o ../$@)
	rm -rf tmplib
else
LIBFAC:: lib/libfac.a
endif
libfac/OPTOBJ :; mkdir $@
libfac/config.status : libfac/configure
	cd libfac; \
	CFLAGS="$(CFLAGS) $(LIBFACFLAGS)" \
	CXXFLAGS="$(CXXFLAGS) $(LIBFACFLAGS)" \
	LDFLAGS="$(LDFLAGS)" \
	unset CONFIG_SITE; ./configure --silent --includedir=../include
lib/libfac.a: libfac/libfac.a lib/.exists; cp $< $@; ranlib $@
libfac/libfac.a : always
	$(MAKE) -C libfac libfac
#	$(MAKE) CXX=$(CXX) OPTCXX=$(CXX) \
#		CXXFLAGS="$(CXXFLAGS) $(LIBFACFLAGS)" CFLAGS="$(CFLAGS) $(LIBFACFLAGS)" \
#		-C libfac libfac
endif

include/factor.h: libfac/factor.h ; cp $< $@
LIBFACclean clean::
	-$(MAKE) -C libfac clean
	rm -f lib/libfac.a lib/libfac.lib
distclean::; -$(MAKE) -C libfac distclean

###################### MP
# we don't use this, usually
# warning: perl is needed to recreate mp/MP/MP.h - but this file is
# provided with the distribution.
ifeq "$(MP)" "yes"
all:: MP
endif
MP:	mp mp/config.status mp/Makefile mp/libMP.a \
	lib/libMP.a include/MP.h include/MP_Config.h
mp/config.status mp/Makefile : mp/configure
	unset CONFIG_SITE; cd mp; ./configure --prefix=$(TOPDIR) # --with-debug
mp/libMP.a: mp/Makefile
	$(MAKE) -C mp libMP.a
lib/libMP.a: mp/MP/libMP.a lib/.exists; cp $< $@; ranlib $@
include/MP.h: mp/MP/MP.h ; cp $< $@
include/MP_Config.h: mp/MP/MP_Config.h ; cp $< $@
clean::; -$(MAKE) -C mp $@
clean::; rm -f 'mp/&'
###################### Macaulay 2 binary distribution
all :: MACAULAY2
all :: $(TARGET)
MACAULAY2: Macaulay2
	$(MAKE) -C Macaulay2 all tests
justM2:: Macaulay2
	$(MAKE) -C Macaulay2 justM2
DISTFILES := 	Macaulay2/README.txt \
		Macaulay2/CHANGES \
		Macaulay2/licenses \
		Macaulay2/setup \
		Macaulay2/cache/Macaulay2-doc \
		Macaulay2/packages/*.m2 \
		Macaulay2/libexec/Macaulay2 \
		Macaulay2/m2/*.m2 \
		Macaulay2/m2/Makefile \
		Macaulay2/emacs \
		$(patsubst %.m2,%.out,$(wildcard Macaulay2/tutorial/final/*.m2))

ifeq "$(SHARED)" "yes"
DISTFILES += Macaulay2/lib
endif
distributions :; mkdir $@
clean ::; rm -rf distributions
distributions/Macaulay2-$(DESC).tar.gz : Makefile $(DISTFILES) distributions
	tar cf - $(DISTFILES) | gzip >$@
	@echo "-----------------------------------------------------------------------------"
	@echo "  $@ contains everything but the documentation"
	@echo "-----------------------------------------------------------------------------"
distributions/Macaulay2-$(DESC).zip : Makefile $(DISTFILES) distributions
	winzip32 -u -r -p $@ @WindowsNT/DistributionFiles.lst
	@echo "-----------------------------------------------------------------------------"
	@echo "  $@ contains everything but the documentation"
	@echo "-----------------------------------------------------------------------------"
install clean ::; $(MAKE) -C Macaulay2 $@
###################### Macaulay 2 porting source distribution
PORTING := CVS \
	Macaulay2/CVS \
	Macaulay2/basictests \
	Macaulay2/book \
	Macaulay2/c \
	Macaulay2/c2 \
	Macaulay2/d \
	Macaulay2/dbm \
	Macaulay2/dumpdata \
	Macaulay2/e/CVS \
	Macaulay2/e/misc \
	Macaulay2/emacs \
	Macaulay2/html \
	Macaulay2/licenses \
	Macaulay2/m2 \
	Macaulay2/msdos \
	Macaulay2/packages \
	Macaulay2/test \
	Macaulay2/tutorial \
	Macaulay2/util \
	WindowsNT \
	bin factory gc gcStatic gmp libfac config include
portfilenames:
	Export3 $(PORTING)
port: distributions/Macaulay2-$(VERSION)-porting-src.tar.gz
distributions/Macaulay2-$(VERSION)-porting-src.tar.gz : Makefile distributions
	tar cf - `Export3 $(PORTING)` | gzip >$@
testport: testport-clean testport-files testport-go testport-clean
testport-clean:
	rm -rf tmp/M2
clean :: testport-clean
testport-files: distributions/Macaulay2-$(VERSION)-porting-src.tar.gz
	mkdir -p tmp/M2
	gunzip <$< |tar xf - -C tmp/M2
testport-go:
	@echo '## testing porting source'
	cd tmp/M2; unset CONFIG_SITE; ./configure
	$(MAKE) -C tmp/M2
###################### Macaulay 2 documentation
DOCFILES = Macaulay2/html
DOCFILES += Macaulay2/Vasconcelos-appendix/appendix.dvi
DOCFILES += Macaulay2/book/Macaulay2-$(VERSION)-book.dvi
DOCFILES += Macaulay2/book/Macaulay2-$(VERSION)-book.pdf
DOCFILES += Macaulay2/book/Macaulay2-$(VERSION)-book.ps

distributions/Macaulay2-$(VERSION)-doc.tar.gz : $(DOCFILES) distributions
	tar cf - $(DOCFILES) | gzip >$@
	@echo "-----------------------------------------------------------------------------"
	@echo "  $@ contains the documentation"
	@echo "-----------------------------------------------------------------------------"
distributions/Macaulay2-$(VERSION)-doc.zip : $(DOCFILES) distributions
	winzip32 -u -r -p $@ $(DOCFILES)
	@echo "-----------------------------------------------------------------------------"
	@echo "  $@ contains the documentation"
	@echo "-----------------------------------------------------------------------------"
MACAULAY2.doc:
	$(MAKE) -C Macaulay2 doc
doc:: # MACAULAY2
doc:: MACAULAY2.doc 
doc:: $(DOCTARGET)
################################# nondist
# print the files in the directory tree that are not part of the distribution
nondist :
	(Export; find . -name CVS -prune -o -type f -print ) | sort | uniq -u
################################# CVS
clean::
	find .  \( \
		   -type f -name '.#*' \
		-o -type d -name Release \
		-o -name '*.pdb' \
		\) -exec rm -r '{}' ';'
	rm -f M2.ncb M2.opt
################################# final status messages
justM2 all doc::
	@echo "--------------------- done making '$@' --------------------"
################################# tar manufactured files
distributions/manufactured.tgz : Makefile
	make -C Macaulay2/d all-c-files
	make -C Macaulay2/tutorial
	tar cfz $@ \
		Macaulay2/e/geovec.hpp \
		Macaulay2/e/geores.hpp \
		Macaulay2/e/cmdnames.m2 \
		Macaulay2/e/cmdnames.hpp \
		Macaulay2/e/cmdinst.hpp \
		Macaulay2/m2/tutorials.m2 \
		Macaulay2/tutorial/final/*.out \
		Macaulay2/m2/gbdoc.m2 \
		Macaulay2/m2/gbfunctions.m2 \
		Macaulay2/m2/loads.m2 \
		Macaulay2/d/*.c \
		Macaulay2/m2/cache-tmp/Examples/*.m2 \
		Macaulay2/m2/cache-tmp/Tests/*.m2 \
		Macaulay2/html
################################# automated compilation
update:
	cvs update -d -P
	$(MAKE)
checkin:
	cvs ci -m "check-in from $(NODENAME) [$(ARCH) $(OS) $(REL)]"
################################# TAGS
TAGS: always
	etags `find . \( -name '*.h' -o -name '*.c' -o -name '*.s' \
		-o -name '*.S' \
		-o -name '*.d' \
		-o -name '*.in' -o -name '*.m2' \)`
clean::; rm -f TAGS
PATH:
	printenv $@
################################# lsm
lsm:
	sendmail lsm@execpc.com <Macaulay2.LSM

## Local Variables:
## mode: Makefile
## End:
