-*- text -*-

			   Macaulay 2
	    by Daniel R. Grayson <dan@math.uiuc.edu>
	 and Michael E. Stillman <mike@math.cornell.edu>

	available from http://www.math.uiuc.edu/Macaulay2/

We thank the United States National Science Foundation for generous funding
to develop Macaulay 2.

Macaulay 2 is copyright 1993-2001 by Daniel R. Grayson and Michael
E. Stillman.  We permit you to use it under the terms of the GNU General
Public License, version 2, as published by the Free Software Foundation; see
the file Macaulay2/COPYING.  This is free software.  There is no warranty;
not even for merchantability or fitness for a particular purpose.

This file describes how to build the software from sources and is not included
in binary distributions.  Most users will prefer to download a binary
distribution.

---------
Libraries
---------

Here are the libraries you have to download and install on your system
before you can compile and link Macaulay 2.  We always compile with
gcc, the latest version, now 4.0.0.  It's a good idea to compile them
in the order listed here, as some of the later ones depend on some of
the earlier ones.

    library: gc
    release: 6.5 (see file gc/version.h)
     author: Hans Boehm <hboehm@exch.hpl.hp.com>
  home page: http://www.hpl.hp.com/personal/Hans_Boehm/gc/
     get at: http://www.hpl.hp.com/personal/Hans_Boehm/gc/gc_source/gc6.5.tar.gz
	     Precompiled linux version at http://www.math.uiuc.edu/Macaulay2/ftp-site/gc-6.5.tar.gz
      email: 
    license: gc/README
    install: -- edit Makefile
		    set CC=gcc
		    value of CFLAGS : keep -DALL_INTERIOR_POINTERS
				      add -DLARGE_CONFIG
	     -- make
	     -- cp gc.a /usr/lib/libgc.a
	     -- cp include/gc.h include/gc_cpp.h /usr/include

    library: gmp
    release: gmp-4.1.2
     author: Torbjorn Granlund <tege@nada.kth.se>
  home page: 
    bugs to: <bug-gmp@prep.ai.mit.edu>
     get at: ftp://ftp.gnu.org/gnu/gmp
	     This package is now part of standard linux distributions;
	     to verify, check for the presence of the file /usr/lib/libgmp.a
      email: 
    license: gmp/COPYING.LIB
      notes: on Solaris, gmp will use both cc and gcc; don't worry

    library: NTL
    release: 5.4
     author: Victor Shoup
  home page: http://www.shoup.net/
     get at: http://shoup.net/ntl
      email: 
    license: GPL
      notes: 
    install: configure with NTL_GMP_LIP=on NTL_STD_CXX=on NTL_NO_INIT_TRANS=on NTL_CXX_ONLY=on CC=c++

    library: Singular-factory (libcf libcfmem)
    release: factory-3.0.2
     author: G-M. Greuel <greuel@mathematik.uni-kl.de>
	     R. Stobbe <stobbe@mathematik.uni-kl.de>
	     J. Schmidt
	     G. Pfister <pfister@mathematik.uni-kl.de>
	     H. Schoenemann <hannes@mathematik.uni-kl.de>
  home page: http://www.singular.uni-kl.de/
     get at: ftp://www.mathematik.uni-kl.de/pub/Math/Singular/Factory/
      email: 
    license: GPL
 depends on: ntl gmp
      notes: ./configure --enable-NTL
	     make
	     make install
		-- don't bother with 'make gftables'
	     for good debugging: configure with option --enable-assertions and with environment CFLAGS='-O0 -g' CXXFLAGS='-g -O0 --no-rtti --no-exceptions'

    library: Singular-libfac
    release: libfac-3.0.2
     author: Michael Messollen <mmessollen@web.de>
  home page: http://www.singular.uni-kl.de/
     get at: ftp://www.mathematik.uni-kl.de/pub/Math/Singular/Libfac/
      email: 
    license: GPL
      notes: ./configure --with-NOSTREAMIO
	     make DEFS=-DHAVE_SINGULAR_ERROR
	     make install

	     Sometimes the configure script doesn't work.  For example, if
		factory.h has been installed under $prefix/include, it won't find it.
		And it can erroneously decide that 'const' and 'inline' keywords don't
		work, and add -Dconst= -Dinline= to DEFS.  This results in a stream of
		error messages about duplicate declarations.
	     Also, ignore the warning message about factory.h being missing, if you think you've put
		it in $prefix/include.

    library: gdbm
    release: gdbm-1.8.3
     author: phil@cs.wwu.edu
  home page: 
    bugs to: downsj@downsj.com
     get at: ftp://ftp.gnu.org/pub/gnu/gdbm/
	     This package is now part of standard linux distributions;
	     to verify, check for the presence of the file /usr/lib/libgdbm.a
      email: 
    license: GNU GENERAL PUBLIC LICENSE
      notes: Makefile.in has "prefix = /usr/local", so when installing, you must
		use "make prefix=/whatever" to install in a nonstandard place.
	        Also, if you aren't root, it will try to change the ownership of
		the installed files, so change BINOWN and BINGRP to suit you.

The following packages may be needed in experimental versions of Macaulay2.

    library: blas - Basic Linear Algebra Subprograms
    release: unnumbered
     author: Jack Dongarra, Argonne National Laboratory, et al.
  home page: http://www.netlib.org/blas/
     get at: http://www.netlib.org/blas/blas.tgz
      email: 
    license: presumably public domain
      notes: Provides libf77blas.a

    library: lapack
    release: 3.0
     author: Jack Dongarra
  home page: http://www.netlib.org/lapack/
     get at: http://www.netlib.org/lapack/lapack.tgz
      email: lapack@cs.utk.edu
    license: copyright but "freely available", "it can be included in commercial packages".
	     See the users' guide at http://www.netlib.org/lapack/lug/node13.html
      notes: Provides liblapack.a
	     Includes a copy of blas.

    library: cblas -- C interface to the BLAS
    release: unnumbered
     author: 
  home page: http://www.netlib.org/blas/blast-forum/
     get at: 
      email: 
    license: 
      notes: Provides libcblas.a

Other common libraries that we assume are on your system already:

	GNU readline (provides libreadline.so and libhistory.so)
	GNU ncurses (provides libcurses.so)



-------------------------------------------
Compiling on multiple machine architectures
-------------------------------------------

If multiple machine architectures are supported by your hardware and
operating system, a good way to specify which one to use is to use the
build option to autoconf's configure script with an architecture in
config.guess format.  This will work with gmp, for example, as it
knows how to produce the additional options to the compilers.

Example:

   ../configure --build=x86_64-apple-darwin

Another way to do it is to specify names for the compilers that
include the additional options for the architecture to be used.  That
will almost always work.

Example:

   ../configure CC="gcc -m64" CXX="g++ -m64"

Yet another way to do it is to add the architecture option to CFLAGS
and to CXXFLAGS.  The disadvantage of that approach is that the
package might have its own idea about what other options to use, which
would be ignored.

Example:

   ../configure CFLAGS="-O2 -m64" CXXFLAGS="-O2 -m64"

When using "capybara", you can take advantage of both good ways of
doing it, by putting something like the following code into the file
include/capybara/local-overrides.

    ARCHOPT = -m64
    ARCHITECTURE = x86_64-apple-darwin
    CONFIGOPTIONS += --build=$(ARCHITECTURE) CC="gcc $(ARCHOPT)" CXX="g++ $(ARCHOPT)"

Even that doesn't quite work when compiling a package, such as "gc",
that uses "libtool".  Unfortunately, libtool doesn't understand the
-m64 option, so it drops it.  The work-around is to create shell
scripts on your path called gcc-m64 and g++-m64 that can be used as
the compilers, and to use this instead:

    ARCHOPT = -m64
    ARCHITECTURE = x86_64-apple-darwin
    CONFIGOPTIONS += --build=$(ARCHITECTURE) CC="gcc$(ARCHOPT)" CXX="g++$(ARCHOPT)"

In the shell script gcc-m64 put this single line:

     exec gcc -m64 "$@"

In the shell script g++-m64 put this single line:

     exec g++ -m64 "$@"

---------
Programs
---------

Here are programs you may have to install on your system to build Macaulay 2.

   program: fakeroot
    get at: http://ftp.debian.org/debian/pool/main/f/fakeroot
     notes: You need this only if you intend to make a debian distribution
            package for Macaulay2.

   program: rpmbuild
     notes: needed only if you want to make an rpm distribution file

----------------------
Getting the source code
----------------------

The best way to get the source code is to download a tar file from our web site
that contains the source code corresponding to a major release.

To get the very latest source code (which may not always work):

	svn export svn://u123.math.uiuc.edu/macaulay2/trunk/M2
	cd M2
	make

The "make" command above runs the commands "autoconf" and "autoheader", which
create the "configure" script and the "include/config.h.in" file.

-----------------------
Compiling
-----------------------

Quick and easy:

	./configure --disable-encap
	make
	make check			# optional
	make install

The script "configure" is made by autoconf, and we support the
standard features, such as compilation in a separate build directory,
as much as possible.

By default, the files are installed in appropriate subdirectories of
/usr/local.  To specify a different location (prefix) replace the last
command above by something like this

	make prefix=/foo/bar install

In that case, files will be installed in the following directories:

	/foo/bar/bin
	/foo/bar/share/Macaulay2
	/foo/bar/share/doc/Macaulay2
	/foo/bar/share/man/man1
	/foo/bar/share/emacs/site-lisp
	/foo/bar/lib/Macaulay2

To make an encapsulated directory tree or distribution tarball
suitable for use with the program epkg (see
http://encap.cites.uiuc.edu/), replace the configuration command with:

	./configure

The effect is to insert one more component into the path names used at
installation time, so that in response to 

	make prefix=/foo/bar install

files will be installed in the following directories:

	/foo/bar/Macaulay2-*/bin
	/foo/bar/Macaulay2-*/share/Macaulay2
	/foo/bar/Macaulay2-*/share/doc/Macaulay2
	/foo/bar/Macaulay2-*/share/man/man1
	/foo/bar/Macaulay2-*/share/emacs/site-lisp
	/foo/bar/Macaulay2-*/lib/Macaulay2

Each * above is replaced by the current version number.  There will
also be a few extra files placed in the directory /foo/bar/Macaulay2-*
which instruct epkg how to make appropriate symbolic links to install
our program, and how to initialize the dumped data file.

To use a different prefix, say /mnt/local, for finding libraries and include
files installed in a nonstandard location:

	../configure LDFLAGS=-L/mnt/local/lib CPPFLAGS=-I/mnt/local/include ...

where ... represents the remaining arguments, as above.  As an example, if
you have compiled the libraries with fink, then you could use this line:

        ../configure LDFLAGS=-L/sw/lib CPPFLAGS=-I/sw/include ...

To specify libraries to link against during configuration, use the
LIBS environment variable, as described in documentation for autoconf.
Example:

	../configure LIBS=-lfoo ...

To see descriptions of all the environment variables that influence
configuration, run this command and look at the section of the output
entitled "Some influential environment variables":

	../configure --help

The only one of these variables with a nonempty default value is
CFLAGS, and its default value is "-g -O2".  That will be supplanted if
you override it.

-----------------------
Microsoft Windows NT notes
-----------------------

    ----------------------
    Cygwin
    ----------------------

    Notes:

      - Some configure scripts, notably that of "libtool", assume ccp is in /lib
        on every system.  Work around:

	   ln -s /usr/bin/cpp /lib

----------------------
Linux notes
----------------------
-- If you use capybara, the following line can be used to compile an optimized version, with shared libs
 mkdir tmp-opt
 cd tmp-opt
 ../configure --with-encapdir=/capybara/encap --prefix=/capybara/encap
 --disable-strip --enable-encap CPPFLAGS=-I/capybara/include
 LDFLAGS=-L/capybara/lib

 ../configure --with-encapdir=/capybara/encap --prefix=/capybara/encap
 --disable-strip --enable-encap CPPFLAGS=-I/capybara/include
 LDFLAGS=-L/capybara/lib

 ../configure --prefix=$HOME/M2-build CPPFLAGS=-I/capybara/include
 LDFLAGS=-L/capybara/lib --enable-static
 ../configure --prefix=$HOME/M2-build CPPFLAGS=-I"~dan/local/include  -I~dan/local.Linux/include"  LDFLAGS="-L~dan/local.Linux/lib" --enable-static

-- For profiling
 mkdir tmp-profiling
 cd tmp-profiling
 ../configure --with-encapdir=/capybara/encap --prefix=/capybara/encap --disable-strip --enable-encap CPPFLAGS=-I/capybara/include LDFLAGS=-L/capybara/lib --enable-profile

----------------------
MacOS X notes
----------------------

There are several methods for installing Macaulay2 under Mac OS X.

(1) Download the ppc or i386 disk images and follow the directions in
    the read me file.

(2) Use the fink system (http://fink.sourceforge.net).

    Follow the instructions at the Fink website to install Fink itself,
    add unstable/main to the appropriate line in /sw/etc/fink.conf, and
    then install Fink's "macaulay2" package.  You can choose the binary
    installation method or the source installation method (which will
    download the source files and compile them on your machine).  You may
    also wish to install emacs or xemacs using Fink, for the best
    interface to Macaulay2.

    Fink can also be used to install other software of interest to
    mathematicians, and is highly recommended. 

(3) Build from source yourself.  

    The following are the steps we take to build a binary disk image for
    Macaulay2.  First, the libraries mentioned above must have been built.
    The code below assumes that the library files are in /capybara/lib and the
    include files are in /capybara/include.

	  svn co svn://Macaulay2.math.uiuc.edu/Macaulay2/trunk/M2
	  cd M2
	  mkdir tmp-opt
	  cd tmp-opt
	  ../configure \
	      --prefix=../../M2-installed \
	      --with-veclib \
	      --enable-altivec \
	      LOADLIBES=-lgcc_s.10.5 \
	      CPPFLAGS="-I/capybara/include" \
	      LDFLAGS="-L/capybara/lib" 
	  make
	  make install

    For compiling a 64-bit version, add
	  CC='gcc -m64' CXX='g++ -m64'
    to the configure command line above.

----------------------
HPUX notes
----------------------

On hppa-2.0w systems, gmp will not compile with gcc, so the configure script
for gmp prefers to use /usr/ccs/bin/cc.  So it is best to install gmp
separately, making sure /usr/ccs/bin is before /usr/local/bin on the path
(just in case gnu nm is in /usr/local/bin).  To use the previously installed
version of gmp when compiling M2, specify the option --with-gmp to configure,
or in configure.options.

Why don't we simply unset CC when automatically configuring gmp?  Because
under other operating systems, it is desirable for the same compiler to be
used for the whole package.  For example, under Windows, gcc and cl aren't
library compatible.

Another strange problem: the . command in /bin/sh seems to look along the
path instead in the current directory to find the file.  This causes a
problem for 'configure'.  Just edit its first line to use 'bash' instead.

----------------------
FreeBSD notes
----------------------

The gmp package didn't compile, but luckily I was able to use
the installed libgmp.a instead.  I did this:

	cd lib
	ln -s /usr/lib/libgmp.a libgmp.a

and commented out the Makefile line

	all:: GMP

Dumpdata doesn't work, so configure with the option --disable-dumpdata.

----------------------
DEC Alpha notes
----------------------

Use gcc 3.0 for best results.  If the compiler crashes on one of the files in
Macaulay2/e, compile that one file without --fexpensive-optimizations -O3 .
