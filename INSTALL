			   Macaulay 2
	    by Daniel R. Grayson <dan@math.uiuc.edu>
	 and Michael E. Stillman <mike@math.cornell.edu>

	available from http://www.math.uiuc.edu/Macaulay2/

We thank the United States National Science Foundation for generous funding
to develop Macaulay 2.

Macaulay 2 is copyright 1993-2001 by Daniel R. Grayson and Michael
E. Stillman.  We permit you to use it under the terms of the GNU General
Public License, version 2, as published by the Free Software Foundation; see
the file Macaulay2/COPYING.  This is free software.  There is no warranty;
not even for merchantability or fitness for a particular purpose.

---------
Libraries
---------

Here are the libraries you have to download and install on your system before
you can compile and link Macaulay 2.  We always compile with gcc, the latest
version, now 3.2.2.  It's a good idea to compile them in the order listed
here, as some of the later ones depend on some of the earlier ones.

    library: gc
    release: 6.1 (see file gc/version.h)
     author: Hans Boehm <hboehm@exch.hpl.hp.com>
  home page: http://www.hpl.hp.com/personal/Hans_Boehm/gc/
     get at: http://www.hpl.hp.com/personal/Hans_Boehm/gc/gc_source/gc6.1.tar.gz
    license: gc/README
    install: -- edit Makefile
		    set CC=gcc
		    value of CFLAGS : remove -DALL_INTERIOR_POINTERS
				      add -DLARGE_CONFIG
	     -- make
	     -- cp gc.a /usr/lib/libgc.a
	     -- cp include/gc.h include/gc_cpp.h /usr/include

    library: gdbm
    release: gdbm-1.8.0
     author: phil@cs.wwu.edu
  home page: 
    bugs to: downsj@downsj.com
     get at: ftp://ftp.gnu.org/pub/gnu/gdbm/
    license: GNU GENERAL PUBLIC LICENSE
      notes: Makefile.in has "prefix = /usr/local", so when installing, you must
		use "make prefix=/whatever" to install in a nonstandard place.
	        Also, if you aren't root, it will try to change the ownership of
		the installed files, so change BINOWN and BINGRP to suit you.

    library: gmp
    release: gmp-4.1
     author: Torbjorn Granlund <tege@nada.kth.se>
  home page: 
    bugs to: <bug-gmp@prep.ai.mit.edu>
     get at: ftp://ftp.gnu.org/gnu/gmp
    license: gmp/COPYING.LIB
      notes: on Solaris, gmp will use both cc and gcc; don't worry

    library: Singular-factory (libcf libcfmem)
    release: factory-2.0.4b
     author: G-M. Greuel <greuel@mathematik.uni-kl.de>
	     R. Stobbe <stobbe@mathematik.uni-kl.de>
	     J. Schmidt
	     G. Pfister <pfister@mathematik.uni-kl.de>
	     H. Schoenemann <hannes@mathematik.uni-kl.de>
  home page: http://www.singular.uni-kl.de/
     get at: ftp://www.mathematik.uni-kl.de/pub/Math/Singular/SOURCES/
    license: GPL
      notes: ./configure --disable-streamio --with-memman=no --enable-NTL
	     make
	     make install
		-- don't bother with 'make gftables'

    library: Singular-libfac
    release: libfac-2.0.4b
     author: Michael Messollen <mmessollen@web.de>
  home page: http://www.singular.uni-kl.de/
     get at: ftp://www.mathematik.uni-kl.de/pub/Math/Singular/SOURCES/
    license: GPL
      notes: ./configure --with-NOSTREAMIO
	     make DEFS=-DHAVE_SINGULAR_ERROR
	     make install

	     Sometimes the configure script doesn't work.  For example, if
		factory.h has been installed under $prefix/include, it won't find it.
		And it can erroneously decide that 'const' and 'inline' keywords don't
		work, and add -Dconst= -Dinline= to DEFS.  This results in a stream of
		error messages about duplicate declarations.
	     Also, ignore the warning message about factory.h being missing, if you think you've put
		it in $prefix/include.

    library: NTL
    release: 5.2
     author: Victor Shoup
  home page: http://www.shoup.net/
     get at: ftp://www.mathematik.uni-kl.de/pub/Math/Singular/src/Singular-NTL-5.2.tar.gz
    license: GPL
      notes: The version available through Singular, mentioned above, has had unneeded routines that
	     use iostreams stripped out.

Other unusual libraries needed, with --enable-lapack (well, actually, you need these, currently!):

    library: blas
    release: 
     author: 
  home page: 
     get at: 
    license: 
      notes: 

    library: lapack
    release: 
     author: 
  home page: 
     get at: 
    license: 
      notes: 

    library: cblas
    release: 
     author: 
  home page: 
     get at: 
    license: 
      notes: 

Other common libraries that we assume are on your system already:

	g2c (gnu fortran support routines, provided by gcc with the fortran option)
	GNU readline (provides libreadline.so and libhistory.so)
	GNU ncurses (provides libcurses.so)

-----------------------
Compiling
-----------------------

Quick and easy:

	./configure
	make
	make check
	make install

To compile in another directory, for example, in a subdirectory:

	mkdir COMPILE
	cd COMPILE
	../configure
	make
	make check
	make install

To make a distribution tarball suitable for use with epkg:

	../configure --enable-encap --with-encapdir=/tmp
	make
	make check
	make install
	make distribution

(The effect of the option --enable-encap is to place a few extra files
in the top level directory of the tree.  The epkg program reads those
files and uses them to decide what to do at installation time.)

To use a different prefix, say /mnt/local, for finding libraries and include
files installed in a nonstandard location:

	LDFLAGS=-L/mnt/local/lib CPPFLAGS=-I/mnt/local/include ../configure ...

where ... represents the remaining arguments, as above.  As an example, if
you have compiled the libraries with fink, then you could use this line:

        LDFLAGS=-L/sw/lib CPPFLAGS=-I/sw/include ./configure ...

To specify other libraries to link against, use the LIBS environment
variable, as described in documentation for autoconf.  Example:

	LIBS=-lfoo ./configure ...

-----------------------
Windows 95, 98 and NT notes
-----------------------

There are two ways to compile Macaulay 2 under Windows 95 and NT.

	-------------------------------
	Microsoft Visual C/C++ compiler
	-------------------------------

	We use Microsoft Visual C/C++ compiler version 5.0 with service pack
	2.  First install the "gnuish" utilities in C:\WINNT\SYSTEM32:
	awk.exe, cp.exe, gawk.exe, grep.exe, ls.exe, make.exe, mv.exe,
	pwd.exe, rm.exe, sed.exe, and uname.exe.  Then open up the workspace,
	M2.dsw, set it to build the Release version, and start it compiling.

	To set the PATH environment variable used by the Developer Studio
	for custom build steps, edit the registry entry:
		My Computer\HKEY_CURRENT_USER\Software\Microsoft\DevStudio
			\5.0\Build System\Components\Platforms\Win32 (x86)
			\Directories\Path Dirs

	----------------------
	The Cygnus port of GCC
	----------------------

	Download cdk.exe from http://www.cygnus.com/misc/gnu-win32/ and
	type make.  It should all work!  (oops, does this require
	distribution of a .dll file, too?)

	You will also want to pick up emacs for Windows from
	http://www.cs.washington.edu/homes/voelker/ntemacs.html .

	Configure with the option
		--without-dumpdata

	Problems:
	   general:
		environment variables are all upper case!
		read() isn't interruptable
	   make:
		'export' does not work in makefiles.
		some targets in makefiles get run in parallel (?)
	   c library:
		abort() seems to be equivalent to exit(0)
	   bash:
		'cd ..' doesn't work from the initial directory
		when bash is started by emacs
	   ps:
		reports WIN32-PID in octal instead of decimal
	   kill:
		doesn't ever kill any processes

----------------------
Linux notes
----------------------


----------------------
MacOS X notes
----------------------
The easiest way to install Macaulay2 under Mac OS X is to use the Fink system
<http://fink.sourceforge.net>.  Follow the instructions at the Fink website
to install Fink itself, add unstable/main to the appropriate line in
/sw/etc/fink.conf, and then install Fink's "macaulay2" package.  You can
choose the binary installation method or the source installation method
(which will download the source files and compile them on your machine).  You
may also wish to install emacs or xemacs using Fink, for the best interface
to Macaulay2.

Fink can also be used to install other software of interest to
mathematicians.  In most cases, you simply install the relevant Fink package.
In two special cases -- the X11 windowing system, and TeX -- it is possible
to install the software using another method, and then tell Fink about it (by
installing Fink's packages "system-xfree86" and "system-tetex",
respectively).

Note, June 1, 2003: The bug, which caused Macaulay2 for Mac OS X as compiled
by fink as version 0.9.2-6 to crash occasionally, has been fixed!  The
problem was that the garbage collector library, gc, was configured
incorrectly.  It passes all the tests, so look forward to a version that fink
will call "stable".

Issues remaining:
  the fink ".info" file needs to be improved
  post install:
      the M2, M2-help, and emacs/M2-init.el files need to be patched

Each user needs to do the following after installation:
  add to .emacs file
    (load "/sw/lib/Macaulay2-0.9.2/emacs/M2-init.el")

These are done by the fink macaulay2 package, but if you compile on your own,
you may need to do the following:

	# this is in Macaulay2/d
        ar x /sw/lib/libfac.a tmpl_inst.o
        mv tmpl_inst.o libfac_tmpl_inst.o

Dumpdata doesn't work, I haven't tried removing --disable-strip yet.
Here is the configure line I have used that works:

    export CPPFLAGS=-I/sw/include
    export LDFLAGS=-L/sw/lib
    ./configure --disable-strip --disable-dumpdata --prefix=/sw --enable-debug --disable-optimize
    OR
    ./configure --disable-strip --disable-dumpdata --prefix=/sw

    LDFLAGS=-L/sw/lib CPPFLAGS=-I/sw/include ./configure --disable-strip --disable-dumpdata --prefix=/sw --enable-debug --disable-optimize --enable-lapack --enable-profile

Further notes:

  Dynamic linking:

    The gc library, version 6.1, doesn't support dynamic linking, so it is
    important to link libgmp in statically, otherwise you'll get weird and
    horrible errors when the garbage collector reclaims memory that's
    actually in use.  To see whether you got it right, use 'otool -L
    libexec/Macaulay2': you shouldn't see libgmp on the list.  There seems to
    be *no* linker option which will tell it to use the static library -- one
    way is to delete (or move aside temporarily) the dynamic libraries
    (libgmp*.dylib, libgmp*.la) for gmp in /sw/lib.  Another way is to
    replace -lgmp on the command line by a reference to /sw/lib/libgmp.a.
    
  Stack size:

    The default stack size seems to be small under Mac OS X.  If you
    get a segmentation fault while building the html version of the
    documentation, it's probably because of a stack overflow.  Under bash try
    running
	     ulimit -s 16000
    and then recompile (in the same shell) to see whether that will fix the
    problem.

----------------------
HPUX notes
----------------------

On hppa-2.0w systems, gmp will not compile with gcc, so the configure script
for gmp prefers to use /usr/ccs/bin/cc.  So it is best to install gmp
separately, making sure /usr/ccs/bin is before /usr/local/bin on the path
(just in case gnu nm is in /usr/local/bin).  To use the previously installed
version of gmp when compiling M2, specify the option --with-gmp to configure,
or in configure.options.

Why don't we simply unset CC when automatically configuring gmp?  Because
under other operating systems, it is desirable for the same compiler to be
used for the whole package.  For example, under Windows, gcc and cl aren't
library compatible.

Another strange problem: the . command in /bin/sh seems to look along the
path instead in the current directory to find the file.  This causes a
problem for 'configure'.  Just edit its first line to use 'bash' instead.

----------------------
Solaris notes
----------------------

Configure with the option
	--without-dumpdata

----------------------
FreeBSD notes
----------------------

The gmp package didn't compile, but luckily I was able to use
the installed libgmp.a instead.  I did this:

	cd lib
	ln -s /usr/lib/libgmp.a libgmp.a

and commented out the Makefile line

	all:: GMP

Dumpdata doesn't work, so configure with the option --disable-dumpdata.

----------------------
DEC Alpha notes
----------------------

Use gcc 3.0 for best results.  If the compiler crashes on one of the files in
Macaulay2/e, compile that one file without --fexpensive-optimizations -O3 .
