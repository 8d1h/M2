import os.path
import shutil
import subprocess
Import('extractPackageName','extractPackageBaseName','getLibSpecific','setLibSpecific','untarLibrary','transferEnv',
       'configureLibrary','makeLibrary','makeInstallLibrary',
       'setLibSpecificStateEnvExport','setLibSpecificConfigExport','setLibSpecificMakeExport','setLibSpecificMakeInstallExport','setLibSpecificNumStages','setLibSpecificStageCommandArguments',
       'setLibSpecificStageCommand','getLibSpecificStageEnvExport','getLibSpecificConfigEnv','getLibSpecificMakeEnv','getLibSpecificMakeInstallEnv','getLibSpecificNumStages','getLibSpecificStageCommandArguments',
       'getLibSpecificStageCommand','defaultCleanLibrary','installBuilders')

#set this to library name
libraryName = 'lapack'
#Library specific declarations go here.
setLibSpecific('all','all',libraryName,'CompressedLib','lapack-3.2.2.tgz')
setLibSpecific('all',['linux-x86','linux-x86_64','Darwin-x86_64'],libraryName,'InstallFiles',['$SConsInstallPrefixPath/lib/liblapack.a'])
setLibSpecific('all','all',libraryName,'DecompressLib',True)
setLibSpecific('all','all',libraryName,'allowsystem',True)
setLibSpecific('all','all',libraryName,'systemlibs',['lapack','blas'])
setLibSpecificNumStages('all','all',libraryName,2)
setLibSpecificStageCommandArguments('all','all',libraryName,1, ['PREFIX=$SConsInstallPrefixPath','PLAT=','FORTRAN=gfortran','OPTS=-O2 -g','NOOPT=','LOADER=gfortran','RANLIB=ranlib','LOADOPTS=-L$SConsInstallPrefixPath/lib','TIMER=INT_ETIME','blaslib','lapack_install','lib'])
setLibSpecific('all','all',libraryName,'enableParallelSubBuild',True)
   
def BuildLibrary(target,source,env):
   """
   Build target for the library.
   """
   buildSettings = env.buildSettings
   source = source[0].rstr()
   sourceFile = os.path.split(source)[1]
   packageName = extractPackageName(sourceFile)
   cleaned = defaultCleanLibrary(buildSettings,libraryName)
   buildpath = buildSettings.getBuildPath()
   realpath = buildpath+packageName+'/'
   if(untarLibrary(buildSettings,source, packageName, libraryName)):
      shutil.copy2(realpath+'make.inc.example',realpath+'make.inc')
   if(buildSettings.getLibSpecific(libraryName,'stage0')):
      buildSettings.setLibSpecific(libraryName,'stage1',True)
   else:
      return None
   if(makeLibrary(buildSettings,source,packageName,libraryName)):
      for target in 'blas.a lapack.a'.split(' '):
         abstarget = os.path.abspath(buildSettings.getPrefixPath()+'/lib/lib'+target)
         shutil.copy2(realpath+target,abstarget)
   return None
   
installBuilders(BuildLibrary,libraryName)
