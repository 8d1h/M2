import os.path
import shutil
import subprocess
Import('extractPackageName','extractPackageBaseName','getLibSpecific','setLibSpecific','untarLibrary','transferEnv',
       'configureLibrary','makeLibrary','makeInstallLibrary','deepCleanLibrary','cleanLibrary',
       'setLibSpecificStateEnvExport','setLibSpecificConfigExport','setLibSpecificMakeExport','setLibSpecificMakeInstallExport','setLibSpecificNumStages','setLibSpecificStageCommandArguments',
       'setLibSpecificStageCommand','getLibSpecificStageEnvExport','getLibSpecificConfigEnv','getLibSpecificMakeEnv','getLibSpecificMakeInstallEnv','getLibSpecificNumStages','getLibSpecificStageCommandArguments',
       'getLibSpecificStageCommand','defaultCleanLibrary','installBuilders')

#set this to library name
libraryName = 'normaliz'
setLibSpecific('all','all',libraryName,'CompressedLib','Normaliz2.7.zip')
setLibSpecific('all',['linux-x86','linux-x86_64','Darwin-x86','Darwin-x86_64'],libraryName,'InstallFiles',['$SConsInstallPrefixPath/bin/normaliz'])
setLibSpecific('all','all',libraryName,'DecompressLib',True)
setLibSpecific('all','all',libraryName,'Dependencies',['boost','mpir'])
#Library specific declarations go here.
setLibSpecificStageCommandArguments('debug',['linux-x86_64','linux-x86','Darwin-x86'],libraryName,1,['prefix=$SConsInstallPrefixPath','NORMFLAGS=','CXX=g++','CXXFLAGS=-I$SConsInstallPrefixPath/include -DNDEBUG -Wall -Wno-sign-compare -Wno-unknown-pragmas -O0 -g','GMPFLAGS=-L$SConsInstallPrefixPath/lib -lgmpxx -lgmp -lgomp'])
setLibSpecificStageCommandArguments('release',['linux-x86_64','linux-x86','Darwin-x86'],libraryName,1,['prefix=$SConsInstallPrefixPath','NORMFLAGS=','CXX=g++','CXXFLAGS=-I$SConsInstallPrefixPath/include -DNDEBUG -Wall -Wno-sign-compare -Wno-unknown-pragmas -O0 -g -funroll-loops','GMPFLAGS=-L$SConsInstallPrefixPath/lib -lgmpxx -lgmp -lgomp'])
setLibSpecificStageCommandArguments('debug',['Darwin-x86_64'],libraryName,1,['prefix=$SConsInstallPrefixPath','NORMFLAGS=','CXX=g++ -m64','CXXFLAGS=-I$SConsInstallPrefixPath/include -DNDEBUG -Wall -Wno-sign-compare -Wno-unknown-pragmas -O0 -g','GMPFLAGS=-L$SConsInstallPrefixPath/lib -lgmpxx -lgmp -lgomp'])
setLibSpecificStageCommandArguments('release',['Darwin-x86_64'],libraryName,1,['prefix=$SConsInstallPrefixPath','NORMFLAGS=','CXX=g++ -m64','CXXFLAGS=-I$SConsInstallPrefixPath/include -DNDEBUG -Wall -Wno-sign-compare -Wno-unknown-pragmas -O3 -g -funroll-loops','GMPFLAGS=-L$SConsInstallPrefixPath/lib -lgmpxx -lgmp -lgomp'])

setLibSpecific('all','all',libraryName,'builddirectory','source/')
   
def BuildLibrary(target,source,env):
   """
   Build target for the library.
   """
   buildSettings = env.buildSettings
   source = source[0].rstr()
   sourceFile = os.path.split(source)[1]
   packageName = extractPackageName(sourceFile)
   cleaned = defaultCleanLibrary(buildSettings,libraryName)
   untarLibrary(buildSettings,source, packageName, libraryName)
   buildpath = buildSettings.getBuildPath()
   realpath = buildpath+packageName+'/'
   if(buildSettings.getLibSpecific(libraryName,'stage0')):
      try:
         os.remove(realpath+'source/libnormaliz/libnormaliz.o')
         print 'Removed libnormaliz.o\n'
      except:
         pass
      buildSettings.setLibSpecific(libraryName,'stage1',True)
   else:
      return None
   if makeLibrary(buildSettings,source,packageName,libraryName):
   #install...
      shutil.copy2(realpath+'source/normaliz',os.path.abspath(buildSettings.getPrefixPath()+'bin/normaliz'))
   return None
   
installBuilders(BuildLibrary,libraryName)
