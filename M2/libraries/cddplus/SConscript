import os.path
import shutil
import subprocess
Import('state','extractPackageName','extractPackageBaseName','getLibSpecific','setLibSpecific','getState','setState','untarLibrary','transferEnv',
       'configureLibrary','makeLibrary','makeInstallLibrary','deepCleanLibrary','cleanLibrary','architecture',
       'setLibSpecificStateEnvExport','setLibSpecificConfigExport','setLibSpecificMakeExport','setLibSpecificMakeInstallExport','setLibSpecificNumStages','setLibSpecificStageCommandArguments',
       'setLibSpecificStageCommand','getLibSpecificStageEnvExport','getLibSpecificConfigEnv','getLibSpecificMakeEnv','getLibSpecificMakeInstallEnv','getLibSpecificNumStages','getLibSpecificStageCommandArguments',
       'getLibSpecificStageCommand')

#set this to library name
libraryName = 'cddplus'
#Library specific declarations go here.
setLibSpecific('all','all',libraryName,'CompressedLib','cdd+-077a.tar.gz')
setLibSpecific('all',['linux-x86','linux-x86_64','Darwin-x86','Darwin-x86_64'],libraryName,'InstallFiles',['$SConsInstallPrefixPath/bin/cddr+'])
setLibSpecific('all','all',libraryName,'DecompressLib',True)
setLibSpecific('all','all',libraryName,'Dependencies',['cddlib'])
setLibSpecificNumStages('all','all',libraryName,2)

setLibSpecificMakeExport('all',['linux-x86','linux-x86_64','Darwin-x86'],libraryName,'CC','gcc')
setLibSpecificMakeExport('all',['linux-x86','linux-x86_64','Darwin-x86'],libraryName,'CXX','g++')
setLibSpecificMakeExport('all',['Darwin-x86_64'],libraryName,'CC','gcc -m64')
setLibSpecificMakeExport('all',['Darwin-x86_64'],libraryName,'CXX','g++ -m64')
setLibSpecificStageCommandArguments('release','all',libraryName,1,[ 'prefix=$SConsInstallPrefixPath','LDFLAGS=-L$SConsInstallPrefixPath/lib/', 'CFLAGS=-I. -I$SConsInstallPrefixPath/include/ -g -O3',
                                                                'CPPFLAGS=-I. -I$SConsInstallPrefixPath -g -O3', 'all'])
setLibSpecificStageCommandArguments('debug','all',libraryName,1,[ 'prefix=$SConsInstallPrefixPath','LDFLAGS=-L$SConsInstallPrefixPath/lib/', 'CFLAGS=-I. -I$SConsInstallPrefixPath/include/ -g -O0',
                                                                'CPPFLAGS=-I. -I$SConsInstallPrefixPath -g -O0', 'all'])

setLibSpecific('all','all',libraryName,'patchfile','../../../libraries/cddplus/patch-077a')
setLibSpecific('all','all',libraryName,'enableParallelSubBuild',True)
   
def BuildLibrary(target,source,env):
   """
   Build target for the library.
   """
   source = source[0].rstr()
   sourceFile = os.path.split(source)[1]
   packageName = extractPackageName(sourceFile)
   cleaned = CleanLibrary(env.mode,architecture,libraryName)
   untarLibrary(env.state,env.mode,architecture,source, packageName, libraryName)
   if(getLibSpecific(env.mode,architecture,libraryName,'stage0')):
      setLibSpecific(env.mode,architecture,libraryName,'stage1',True)
   else:
      return None
   if makeLibrary(env.state,env.mode,architecture,source,packageName,libraryName):
      buildpath = getState(env.mode,architecture,'buildpath')
      realpath = buildpath+packageName+'/'
   #install...
      try:
         os.makedirs(os.path.abspath(getState(env.mode,architecture,'prefixpath')+'/bin'))
      except:
         None
      for target in 'cddr+ cddf+'.split(' '):
         shutil.copy2(realpath+target,os.path.abspath(getState(env.mode,architecture,'prefixpath')+'/bin/'+target))
   return None
   

def CleanLibrary(mode,directory,packageBaseName):
   """
   Actual function that gets called to process a clean library command
   """
   if(deepCleanLibrary(mode,architecture,libraryName)):
      return True
   if(cleanLibrary(mode,architecture,libraryName)):
      return True   
   return False

for mode in state[architecture]['modes']:
   if(getState(mode,architecture,'build')):
      builder = Builder(action=BuildLibrary, single_source=1)
      getState(mode,architecture,'env').Append(BUILDERS = {'build_'+libraryName : builder})
      if(state[architecture][mode].get('builders')==None):
         setState(mode,architecture,'builders',{})
      getState(mode,architecture,'builders')[libraryName]=builder
