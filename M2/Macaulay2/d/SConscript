import os.path
import shutil
import subprocess
Import('state','getState','setState','getLibSpecific','setLibSpecific','architecture','numberSubTasks',
        'setLibSpecificStateEnvExport','setLibSpecificConfigExport','setLibSpecificMakeExport','setLibSpecificMakeInstallExport','setLibSpecificNumStages','setLibSpecificStageCommandArguments',
        'setLibSpecificStageCommand','getLibSpecificStageEnvExport','getLibSpecificConfigEnv','getLibSpecificMakeEnv','getLibSpecificMakeInstallEnv','getLibSpecificNumStages','getLibSpecificStageCommandArguments',
        'getLibSpecificStageCommand','getLibSpecificEnv','Glob','exportDict','mode')


dfiles = ['arithmetic.dd','atomic.dd','M2.dd','system.dd','strings.dd','varstrin.dd','strings1.dd','errio.dd','vararray.dd','ctype.dd','nets.dd',
          'varnets.dd','interrupts.dd','pthread0.dd','stdiop0.dd','gmp.dd','engine.dd','xml.dd','stdio0.dd','parse.dd','expr.dd','stdio.dd','stdiop.dd',
          'err.dd','gmp1.dd','tokens.dd','getline.dd','lex.dd','parser.dd','binding.dd','basic.dd','convertr.dd','common.dd','util.dd','struct.dd',
          'classes.dd','buckets.dd','equality.dd','hashtables.dd','sets.dd','version.dd','evaluate.dd','mysqldummy.dd','pthread.dd','actors.dd',
          'actors2.dd','actors3.dd','actors4.dd','xmlactors.dd','actors5.dd','threads.dd','pari.dd','interface.dd','texmacs.dd','interp.dd']
cfiles = ['gdbm_interface.cpp','xml-c.c','M2inits.cpp','gmp_aux.cpp','pari-c.c','main.cpp','M2mem.c','M2lib.cpp','scclib.c','M2-factory.cpp','regex.c','readline.cpp','gmp_init.cc','startup.c']
def DBuildDependency(target,source,env):
    source = str(source[0])
    target = str(target[0])
    sourceFile = os.path.split(source)[1]
    splitTargetPath = os.path.split(target)
    targetPath = splitTargetPath[0]+'/'
    try:
        os.makedirs(taretPath)
    except:
        None
    targetFile = splitTargetPath[1]
    cmd = os.path.abspath(getState(mode,architecture,'buildpath')+'Macaulay2/c/scc')
    args = [cmd, '-dep', os.path.abspath(source),'-I../d/']
    if(os.path.splitext(target)[1]=='.dd'):
        args = args + ['-cxx']
    proc = subprocess.Popen(args,cwd=targetPath)
    if(proc.wait()):
        raise Exception("Unable to execute " + str(args) + ' in ' + targetPath)
    shutil.move(target+'.tmp',target)
    shutil.move(target[:-4]+'.sig.tmp',target[:-4]+'.sig')
    return None

def DBuildTypes(target,source,env):
    cmd = os.path.abspath(getState(mode,architecture,'buildpath')+'Macaulay2/c/scc')
    targetPath = os.path.abspath(getState(mode,architecture,'buildpath')+'Macaulay2/d/')
    args = [cmd, '-typecodefile']
    proc = subprocess.Popen(args,cwd=targetPath)
    if(proc.wait()):
        raise Exception("Unable to execute " + str(args) + ' in ' + targetPath)
    return None

def DBuild(target,source,env):
    origTargets = target
    source = str(source[0])
    target = str(target[0])
    sourceFile = os.path.split(source)[1]
    splitTargetPath = os.path.split(target)
    targetPath = splitTargetPath[0]+'/'
    targetFile = splitTargetPath[1]
    cmd = os.path.abspath(getState(mode,architecture,'buildpath')+'Macaulay2/c/scc')
    args = [cmd, '-ronly', '-noline', os.path.abspath(source),'-I../d/']
    if(os.path.splitext(target)[1]=='.dd'):
        args = args + ['-cxx']
    proc = subprocess.Popen(args,cwd=targetPath)
    if(proc.wait()):
        raise Exception("Unable to execute " + str(args) + ' in ' + targetPath)
    shutil.move(str(origTargets[1])+'.tmp',str(origTargets[1]))
    return None


ddepbuilder = Builder(action=DBuildDependency, single_source=1)
dbuilder = Builder(action=DBuild,single_source=1)
dtypesbuilder = Builder(action=DBuildTypes, single_source=1)
buildpath = getState(mode,architecture,'buildpath')+'Macaulay2/d/'
depbuilders = []
env = Environment()
env.mode = mode
env['BUILDERS']['ddepbuilder']=ddepbuilder
env['BUILDERS']['dbuilder']=dbuilder
env['BUILDERS']['dtypesbuilder']=dtypesbuilder
#setup D build type target.
dtb = env.dtypesbuilder(['#'+os.path.abspath(buildpath+'typecodes.h')],[])
#Setup D dependency build targets.
scc = getState(mode,architecture,'scc')
for i in range(0,len(dfiles)):
    df = dfiles[i]
    sf = os.path.split(df)
    se = os.path.splitext(sf[1])
    builder = env.ddepbuilder([se[0]+'.dep',se[0]+'.sig'], df)
    Depends(builder,scc)
    Depends(dtb,builder)
    ParseDepends(se[0]+'.dep')
    if i!=0:            
        Requires(builder,depbuilders[i-1])
    depbuilders.append(builder)
builders = []
objFiles = []
prefixPath = getState(mode,architecture,'prefixpath')
cflags="-I"+buildpath+" -IMacaulay2/platform/ -IMacaulay2/d/ -IMacaulay2/e -IMacaulay2/e-includes -I"+prefixPath+"include/ -I"+prefixPath+"include/libxml2/ -IMacaulay2/c/ -IMacaulay2/m2-includes -IMacaulay2/system/ "+getState(mode,architecture,'M2flags')
ddict = {}

#setup D build targets.
for i in range(0,len(dfiles)):
    df = dfiles[i]
    sf = os.path.split(df)
    se = os.path.splitext(sf[1])
    if(se[1]=='.dd'):
        targetf = se[0]+'-tmp.cc'
    elif(se[1]=='.dd'):
        targetf = se[0]+'-tmp.c'
    else:
        raise Exception
    builder = env.dbuilder([targetf,se[0]+'-exports.h'],df)
    Depends(builder,scc)
    Depends(builder,dtb)
    Depends(builder,se[0]+'.dep')
    Requires(builder,depbuilders[len(depbuilders)-1])
    # It is not necessary to serialize on typecode.db since we are only reading since we have already generated all dependencies...
    builders.append(builder)
    #export the engine builder because it is needed for dependencies for e.
    obj = Object('#'+buildpath+targetf,CFLAGS=cflags, CXXFLAGS=cflags)
    objFiles.append(obj)
    ddict[sf[1]]=obj
setState(mode,architecture,'dFileDict',ddict)
#Setup C/C++ object file targets for files in D directory
cobjs = []
for f in cfiles:
    builder = Object(f,CFLAGS=cflags,CXXFLAGS=cflags)
    Depends(builder,dtb)
    if f=='M2lib.cpp':
        Depends(builder,ddict['interp.dd'])
    elif f=='gdbm_interface.cpp':
        Depends(builder,ddict['M2.dd'])
    elif f=='scclib.c':
        Depends(builder,ddict['expr.dd'])
    elif f=='xml-c.c':
        Depends(builder,ddict['xml.dd'])
    elif f=='M2inits.cpp':
        Depends(builder,ddict['engine.dd'])
    elif f=='regex.c':
        Depends(builder,ddict['M2.dd'])
    elif f=='readline.cpp':
        Depends(builder,ddict['expr.dd'])
    objFiles.append(builder)
    cobjs.append(builder)

setState(mode,architecture,'dstart',depbuilders[0]+cobjs)
setState(mode,architecture,'dend',builders[len(builders)-1])
setState(mode,architecture,'dObjectFiles',objFiles)
Return('objFiles')
