# @configure_input@
include ../../include/config.Makefile
VPATH = @srcdir@
DEPENDS = yes
# MES:
# CXXFLAGS = -DGCMALLOC -DDEBUG

%.o : %.cpp
	$(COMPILE.cc) $(OUTPUT_OPTION) $<

ifeq "$(GCC)" "yes"
CXXFLAGS += -Wno-shadow -Wno-cast-qual
endif

ifeq "$(CC)" "cl"
WARNINGS = -W3
else
# WARNINGS += -Wno-non-template-friend
endif

CPPFLAGS += -I../../include
CPPFLAGS += -I../util
CPPFLAGS += -I.


# CXXFLAGS += -fhandle-exceptions

######################
CXXFLAGS += $(DEBUGFLAGS)
######################

ifeq "$(SHARED)" "yes"
CXXFLAGS += -fPIC
endif

CFLAGS = $(CXXFLAGS)
# ARFLAGS  = r
LIBNAME  = gb

ifeq "$(CC)" "cl"
LIB      = $(LIBNAME).lib
else
LIB      = lib$(LIBNAME).a
endif

PRE.cc   = $(COMPILE.cc) -E 

##################
## Source code ###
##################

CONTAINER = \


INTERFACE = \
monorder \
Eschreyer \
GF \
LLL \
RR \
Z \
QQ \
assprime \
buffer \
comb \
det \
frac \
freemod \
freemod2 \
gauss \
gb \
gb2 \
gbZZ \
gb_comp \
gbbinom \
gbinhom \
gbnod \
hermite \
hilb \
int_bag \
intarray \
lattice \
matrix \
mem \
monideal \
monoid \
monomial \
newspair \
ntuple \
pfaff \
polyring \
random \
relem \
res \
res2 \
respoly \
respoly2 \
ring \
ringmap \
sagbi \
schur \
spair \
sparsemat \
termideal \
text_io \
varpower \
vector \
weylalg \
weylfree \
z_mod_p \

COMMANDS = \
	engine \
	x_monom \
	x_monoid \
	x_relem \
	x_free \
	x_mat \
	x_monideal \
	x_gb \
	x_ringmap \
	x_sparsemat

INTERFACE0 = \
	buffer \
	engine \
	error \
	intarray \
	mem \
	text_io \
	ntuple \
	varpower \
	monomial \
	x_monom \
	monorder \
	monoid \
	monideal \
	x_monideal \
	ring \
	relem \
	vector \
	freemod \
	matrix \
	Z \
	z_mod_p \
	GF \
	RR \
	frac \
	polyring \
	schur \
	weylalg \
	freemod2 \
	random \
	weylfree \
	int_bag \
	hilb \
	comb \
	sparsemat \
	termideal \
	det \
	pfaff \
	assprime \
	gb_comp \
	LLL \
	hermite \
	gauss \
	sagbi \
	gb \
	gbinhom \
	gbbinom \
	gbZZ \
	respoly \
	respoly2 \
	res \
	res2 \
	gbnod \
	gb2 \
	Eschreyer

#	x_relem \

#	x_monoid \

INTERFACE_OLD_H = obj_int obj_iarr obj_str obj_ptr

REMOVEDESTUFF_OLD = \
	Eschreyer \
	Espairs \
	EGB1 \
	Elookup \
	Einterface

COMMANDS_REDO = \
	x_monoid \
	x_monom \
	x_system \
	x_free \
	x_mat \
	x_relem \
	x_gb \
	freemod2 \
	x_factor \
	x_borel \
	gbnod

NAMES_OLD = \
	error \
	ntuple \
	res \
	respoly \
	hilb \
	frac \
	polyring \
	weylalg \
	freemod \
	weylfree \
	matrix \
	sparsemat \
	LLL \
	relem \
	ring \
	vector \
	z_mod_p \
	Z \
	RR \
	GF \
	schur \
	monideal \
	termideal \
	newspair \
	assprime \
	det \
	pfaff \
	ringmap \
	hermite \
	lattice \
	gauss \
	comb \
	int_bag \
	monorder \
	monomial \
	varpower \
	gb_comp \
	gb \
	spair \
	gbinhom \
	gbbinom \
	sagbi \
	random \
	gbZZ \
	gb2 \
	res2 \
	respoly2 \
	monoid \

NOT_USED_YET = \
	gbc \
	Emonorder \
	Emonoid \
	EEhilbtrack \
	EEGB1 \
	EEspairs \
	EEbasics \
	EElookup \
	EEGB \
	Emonlookup \
	Emonideal \
	newmonorder \
	monideal2 \
	montable \
	monheap

OLDSTUFF = \
	bin_io \
	handles \
	interp \
	object \
	obj_prim \
	hashtab \
	stack 

OLDESTUFF_OLD = \
	EZZp \
	Emonoid \
	Epoly \
	Ering \
	Evector \
	Efreemod \
	Ematrix \
	Eringmap \
	Eio \
	EGB \
	Ecommands \

E_H_OLD = \
	Edefs.hpp \
	Ehashtab.hpp \
	Ematrix.hpp \
	Eringmap.hpp \
	Epolywrap.hpp

NAMES_H_OLD = \
	comp \
	ringelem \
	style \
	classes \
	index \
	respair2

NAMES_H = comp \
	ringelem \
	style \
	hash \
	index \
	respair2

C_FILES = error table exptable monordering # ../d/M2types # borel


##############################
## end of source code files ##
##############################

GENERATED_H = cmdnames cmdinst geovec geores

#CC_FILES1 := $(ESTUFF) $(NAMES) $(CONTAINER) $(INTERFACE)
#CC_FILES2 := $(COMMANDS)
#CC_FILES := $(CC_FILES1) $(CC_FILES2)
CC_FILES := $(INTERFACE) $(COMMANDS)
FILES := $(CC_FILES) $(C_FILES)
LOFILES1 := $(addsuffix .lo,$(CC_FILES1))
LOFILES2 := $(addsuffix .lo,$(CC_FILES2) $(C_FILES))
LOFILES := $(LOFILES1) $(LOFILES2)
CCFILES := $(addsuffix .cpp,$(CC_FILES))
CFILES := $(addsuffix .c,$(C_FILES))
OFILES := $(addsuffix .o,$(C_FILES) $(CC_FILES))

ifeq "$(SHARED)" "yes"
OBJFILES := $(LOFILES)
else
OBJFILES := $(OFILES)
endif

HHFILES := $(addsuffix .hpp, \
		$(NAMES_H) $(NAMES) \
		$(INTERFACE_H) $(INTERFACE) $(CONTAINER))  $(E_H)

.PHONY : all clean distclean install tar check

###################################################################
## Targets ##
#############
all:: cmdnames.m2 $(addsuffix .hpp, $(GENERATED_H))

ifeq "$(SHARED)" "yes"
all:: ../lib/libengine1.so ../lib/libengine2.so
else
all:: $(OFILES)
all:: $(LIB)
endif

%.ii: %.cpp
	$(PRE.cc) $< -o $@
%.s: %.cpp
	$(CXX) $(CXXFLAGS) -S $< -o $@

%.lo : %.c  ; $(COMPILE.c)  -fPIC $< $(OUTPUT_OPTION)
%.lo : %.cc ; $(COMPILE.cc) -fPIC $< $(OUTPUT_OPTION)
%.lo : %.cpp; $(COMPILE.cc) -fPIC $< $(OUTPUT_OPTION)
../lib/libengine1.so : $(LOFILES1); $(CC) -shared $^ $(OUTPUT_OPTION)
../lib/libengine2.so : $(LOFILES2); $(CC) -shared $^ $(OUTPUT_OPTION)

geovec.hpp: geoT.hpp
	awk '{sub(/geobucket/, "vecHeap"); sub(/geobucket/, "vecHeap"); sub(/FREEMODULETYPE/, "FreeModule"); sub(/VECTYPE/, "vecterm *"); print }' geoT.hpp >$@
#	awk '{sub(/FREEMODULETYPE/, "FreeModule"); sub(/VECTYPE/, "vecterm *"); print }' geoT.hpp >$@

geores.hpp: geoT.hpp
	awk '{sub(/geobucket/, "respolyHeap"); sub(/geobucket/, "respolyHeap"); sub(/FREEMODULETYPE/, "res2_poly"); sub(/VECTYPE/, "res2term *"); print }' geoT.hpp >$@

#geopoly.hpp: geoT.hpp
#	awk '{sub(/FREEMODULETYPE/, "Ring"); sub(/VECTYPE/, "Nterm *"); print }' geoT.hpp >$@

cmdnames.m2 : misc/cmdg.awk misc/cmdnames.input
	$(AWK) -f  $^ >cmdnames.m2
cmdnames.hpp : misc/cmdh.awk misc/cmdnames.input
	$(AWK) -f $^ >$@
cmdinst.hpp : misc/cmdinst.awk misc/cmdnames.input
	$(AWK) -f $^ >$@

tags:: TAGS

TAGS: $(HHFILES) $(CCFILES)
	etags $^

clean::
	rm -f *.lo *.o *.dd *.ii $(LIB) cmdinst.hpp cmdnames.hpp cmdnames.m2
	rm -f TAGS

Makefile : Makefile.in
	cd ../..; ./config.status Macaulay2/e/Makefile

# dependency files, made automatically
%.dep: %.cpp; $(CXX) -MM $(CPPFLAGS) $< | sed 's/\($*\)\.o[ :]*/\1.o $@ : /' >$@
%.dep: %.c;   $(CC)  -MM $(CPPFLAGS) $< | sed 's/\($*\)\.o[ :]*/\1.o $@ : /' >$@
clean::; rm -f *.dep
ifeq "$(DEPENDS)" "yes"
include $(CFILES:.c=.dep) $(CCFILES:.cpp=.dep)
endif

# this requires gnu sort and gnu uniq commands
dups-tmp: $(OBJFILES)
	- nm -o --demangle $(OBJFILES) |grep ' T ' |sort +2 |uniq -2 -d |tee dups-tmp
dups-okay: dups-tmp
	@if [ -s $< ]; then echo "Multiple definitions found:"; cat $<; exit 1; \
	 else touch $@; fi

check::
	$(MAKE) -C tests check

ifeq ($(OS),Linux)
# don't run it elsewhere because we may not have gnu sort and gnu uniq there
# check:: dups-okay
else
check::
endif

install:

ifeq "$(CC)" "cl"
x_relem.o : x_relem.cpp
	$(CXX) -c `echo $(CXXFLAGS) | sed 's/-O[0-9] //'` $(CPPFLAGS) $< $(OUTPUT_OPTION)
endif

m2.exe : # used on Wintel

########################
## Obsolete targets ####
########################

ifeq "$(CC)" "cl"
$(LIB): $(OFILES)
	$(AR) $(ARFLAGS) /out:$@ $^	
else
#$(LIB): $(LIB)($(OFILES))
#	-$(RANLIB) $(LIB)
$(LIB): $(OFILES)
	$(AR) $(ARFLAGS) $@ $^
	-$(RANLIB) $(LIB)

endif

%.dd: %.cpp
	@echo remaking $@
	g++ -I../../include -MM $(CPPFLAGS) $< | sed 's|$*\.o|& $@|g' > tmp.dd
	mv tmp.dd $@
# we say g++ above instead of $(CXX) because -MM is understood only by g++, or at
# not by cl

#$(addsuffix .dd,$(FILES)) : cmdnames.hpp cmdinst.hpp

#ifeq "$(DEPENDS)" "yes"
#include $(addsuffix .dd,$(FILES))
#endif

distclean : clean
	rm -f Makefile
