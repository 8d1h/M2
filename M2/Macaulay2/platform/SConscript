import os.path
Import('state','getState','setArchitectureState','getLibSpecific','setLibSpecific','numberSubTasks',
        'setLibSpecificStateEnvExport','setLibSpecificConfigExport','setLibSpecificMakeExport','setLibSpecificMakeInstallExport','setLibSpecificNumStages','setLibSpecificStageCommandArguments',
        'setLibSpecificStageCommand','getLibSpecificStageEnvExport','getLibSpecificConfigEnv','getLibSpecificMakeEnv','getLibSpecificMakeInstallEnv','getLibSpecificNumStages','getLibSpecificStageCommandArguments',
        'getLibSpecificStageCommand','getLibSpecificEnv','Glob','exportDict','buildSettings')


pfiles = ['posix.c','posix_segv.c','gc_debug.cpp','platform.c']

buildpath = buildSettings.getBuildPath()+'Macaulay2/platform/'
prefixPath = buildSettings.getPrefixPath()
eflags = "-I"+buildpath+"../d/ -IMacaulay2/platform/ -IMacaulay2/d/ -IMacaulay2/e -IMacaulay2/e-includes -I"+prefixPath+"include/ -I"+prefixPath+"include/libxml2/ -IMacaulay2/c/ -IMacaulay2/m2-includes -IMacaulay2/system "+getState(buildSettings,'eflags')
pobjects = []
dm2 = getState(buildSettings,'dFileDict')['M2.d']
dtokens = getState(buildSettings,'dFileDict')['tokens.d']
dinterrupts = getState(buildSettings,'dFileDict')['interrupts.d']
if dm2 is None:
    raise Exception("Internal error")
for f in pfiles:
    obj = Object(f,CFLAGS=eflags,CXXFLAGS=eflags)
    pobjects.append(obj)
    Depends(obj,dm2)
    Depends(obj,dtokens)
    Depends(obj,dinterrupts)
    
setArchitectureState(buildSettings,'pfiles',pobjects)
Return('pobjects')
