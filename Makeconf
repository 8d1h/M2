# -*- Mode: Makefile -*-

all::
	@if [ "" = "$(VERSION)" ]; then echo VERSION not defined yet >&2; exit 1; fi

ifndef MAKECONF

# don't export this, as some of the definitions below do not go into the
# environment
MAKECONF = TRUE

ifndef TOPDIR
TOPDIR		      := UNDEFINED_TOPDIR
endif

export SYSTEM         := $(ARCH) $(OS) $(REL)

ifeq "$(OS)" "CYGWIN32_95"
export CYGWIN32 = TRUE
endif
ifeq "$(OS)" "CYGWIN32_NT"
export CYGWIN32 = TRUE
endif
ifeq "$(OS)" "CYGWIN32-95"
export CYGWIN32 = TRUE
endif
ifeq "$(OS)" "CYGWIN32-NT"
export CYGWIN32 = TRUE
endif
ifeq "$(OS)" "CYGWIN_NT-4.0"
export CYGWIN32 = TRUE
endif

EXESUFFIX =

ifdef CYGWIN32
export OS   := Windows-95-98-NT
export DESC := $(VERSION)-$(ARCH)-$(OS)
endif

ifdef CYGWIN32
EXESUFFIX = .exe
endif

PATHSEP    := /
PATHDELIM  := :
PATHPARENT := ../

ifeq "$(OS)" "MS-DOS"
EXESUFFIX = .exe
NULL :=
PATHSEP    := \$(NULL)
PATHDELIM  := ;
PATHPARENT := ..$(PATHSEP)
endif

export EXESUFFIX

#################################

# every makefile that includes this one should use 'all' as the
# default (first) target

all:: announce
announce ::
	@echo '## making Macaulay 2 version $(VERSION) for ARCH=$(ARCH) OS=$(OS) REL=$(REL) ##'

export DESC           := $(VERSION)-$(ARCH)-$(OS)-$(REL)
ifeq "$(STATIC)" "yes"
export DESC           := $(DESC)-static
endif

#################################

ifdef CYGWIN32
# CFLAGS += '-Dabort()=exit(1)'
# CXXFLAGS += '-Dabort()=exit(1)'
# this approach to fixing "abort" doesn't work because of a slight
# bug in configure/makeconf - strings here get evaluated by the
# shell a different number of times between now and
#   (1) the evaluation of the test compilations in factory/configure
#   (2) the evaluation of the compilations in factory/GNUmakefile
# and thus it is impossible to shield the parentheses from the shell.
# A fix is for all expressions in factory/configure like 
#	eval $ac_compile
# to be replaced by expressions like
#	eval `eval "echo $ac_compile"`
endif

ifeq "$(OS) $(ARCH)" "Linux alpha"
AS = gcc -c -x assembler-with-cpp
endif

ifeq "$(CC)" "cl"

# 'make -p' shows the database of rules

OUTPUT_OPTION = -Fo$@

export AR = lib
export ARFLAGS = -MACHINE:i386 -nologo -verbose
(%): %;  $(AR) $(ARFLAGS) /out:$@ $@ $<

export RANLIB = true

CFLAGS   = -O2 -Zi -nologo -G5 -W3 -GR -GX
CXXFLAGS = -O2 -Zi -nologo -G5 -W3 -GR -GX
# LDFLAGS  =     -Zi

LINK.c = $(CC) $(CFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)
%: %.c;  $(LINK.c) $^ $(LOADLIBES) -link $(LDLIBS) -out:$@.exe

LINK.o = $(CC) $(LDFLAGS) $(TARGET_ARCH)
%: %.o;  $(LINK.o) $^ $(LOADLIBES) $(LDLIBS) $(OUTPUT_OPTION)

LINK.cc = $(CXX) $(CXXFLAGS) $(CPPFLAGS) $(LDFLAGS) $(TARGET_ARCH)
%: %.cc; $(LINK.cc) $^ $(LOADLIBES) $(LDLIBS) $(OUTPUT_OPTION)

COMPILE.c = $(CC) $(CFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
%.o: %.c; $(COMPILE.c) $< $(OUTPUT_OPTION)

COMPILE.cc = $(CXX) -TP $(CXXFLAGS) $(CPPFLAGS) $(TARGET_ARCH) -c
%.o: %.cc; $(COMPILE.cc) $< $(OUTPUT_OPTION)
%.o: %.cpp; $(COMPILE.cc) $< $(OUTPUT_OPTION)

endif

export DEBUGFLAGS :=

ifeq "$(DEBUG)" "yes"
DEBUGFLAGS += -g -DDEBUG
else
DEBUGFLAGS += -DNDEBUG
endif

ifeq "$(PROFILE)" "yes"
export CFLAGS   += -pg
export CXXFLAGS += -pg
export LDFLAGS  += -pg
STRIP := no
endif

ifeq "$(STRIP)" "no"
export STRIPCMD := :
else
ifneq "$(CC)" "cl"
# export CFLAGS   += -fomit-frame-pointer
# export CXXFLAGS += -fomit-frame-pointer
export LDFLAGS  += -s
export STRIPCMD := strip
endif


endif

ifeq "$(MEMDEBUG)" "yes"
DEBUGFLAGS += -DMEM_DEBUG
endif

MAKEFLAGS += -w

export CFLAGS += -DMACAULAY2
export CXXFLAGS += -DMACAULAY2

export M2HOME := $(shell cd $(TOPDIR)/Macaulay2; pwd)

ifeq "$(SHAREDLIBS)" "yes"
ifdef LD_LIBRARY_PATH
export LD_LIBRARY_PATH:=$(M2HOME)/lib:$(LD_LIBRARY_PATH)
else
export LD_LIBRARY_PATH:=$(M2HOME)/lib
endif
endif

endif
