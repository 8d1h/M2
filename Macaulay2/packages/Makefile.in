# @configure_input@
include ../../include/config.Makefile
# we want to ignore the --datarootdir setting, whatever that means, so here we we mention it: @datarootdir@
VPATH = @srcdir@
PACKAGES = @PACKAGES@

# packages under development that should be checked but not installed:
DEVEL = EllipticIntegrals

RemakeAllDocumentation ?= false
IgnoreExampleErrors ?= false
CheckDocumentation ?= true
RerunExamples ?= false
debugLevel ?= 0

ARGS := RemakeAllDocumentation => $(RemakeAllDocumentation), \
	IgnoreExampleErrors => $(IgnoreExampleErrors), \
	RerunExamples => $(RerunExamples), \
	CheckDocumentation => $(CheckDocumentation), \
	AbsoluteLinks => false, UserMode => false, Verbose => false, \
	InstallPrefix => \"@LOCALSTAGINGAREA@/\", \
	SeparateExec => true

ifeq (${RemakePackages},true)
RemakePackagesOption:
REMAKEPACKAGES = RemakePackagesOption
else
REMAKEPACKAGES =
endif

# so the user can override arguments to installPackage:
ifneq "$(IARGS)" ""
ARGS := $(ARGS), $(IARGS)
endif

STOP = --stop --silent
$(foreach i,\
	$(sort $(PACKAGES) $(DEVEL)),\
	$(eval check::; \
		if ! grep "CacheExampleOutput => true" @srcdir@/$i.m2 >/dev/null ;\
		then @pre_bindir@/M2@EXE@ -q $(STOP) -e "needsPackage(\"$i\",LoadDocumentation=>true); check($i,UserMode=>false); exit 0" ;\
		fi ))
info-dir: @pre_infodir@ @pre_infodir@/dir
@pre_infodir@:; $(MKDIR_P) $@
@pre_infodir@/dir:; @INSTALL_DATA@ @top_srcdir@/files/info-dir-template $@
define bld
all: info-dir @pre_libm2dir@/$1/.installed
@pre_libm2dir@/$1/.installed : $1.m2 $$(wildcard @srcdir@/$1/* @srcdir@/$1/*/*) $(REMAKEPACKAGES)
	: installing package $1
	$(MKDIR_P) $1-temporary
	@echo "make: Entering directory \`$(shell pwd)/$1-temporary'"
	cd $1-temporary && @pre_bindir@/M2@EXE@ $(M2DIRS) \
	    -q $(STOP) \
	    -e errorDepth=0 \
	    -e debugLevel=$(debugLevel) \
	    $(EARGS) \
	    -e "installPackage(\"$1\", $(ARGS)); exit 0"
	@echo "make: Leaving directory \`$(shell pwd)/$1-temporary'"
	ls -l $1-temporary
	rm -rf $1-temporary
	install-info --quiet --info-dir=@pre_infodir@ @pre_infodir@/$1.info
	@ [ "${IgnoreExampleErrors}" = true -o -f $$@ ] || (echo error: file $$@ not made by installPackage >&2; false)
check-info::@pre_infodir@/$1.info.errors
@pre_infodir@/$1.info.errors: @pre_infodir@/$1.info
	emacs --batch --eval '(progn (find-file "$$<") (Info-validate) (switch-to-buffer " *problems in info file*") (write-file "$$@") (kill-emacs))'
	cat $$@
	@ [ ! -s $$@ ] || (echo error: stopping, info validation errors (above) >&2; false)
endef
$(foreach i, $(PACKAGES), $(eval $(call bld,$i)))

# the Info-validate function doesn't work well enough to be useful:
# check::check-info

clean::; rm -rf tmp *.installed
clean::; $(MAKE) -C ComputationsBook $@
big-check:
check::; $(MAKE) -C ComputationsBook check
Makefile: Makefile.in; cd ../..; ./config.status Macaulay2/packages/Makefile
distclean:clean
	$(MAKE) -C ComputationsBook $@
	rm -f Makefile

## here is the list of other files to install along with Macaulay2
@pre_packagesdir@/%.m2 : %.m2 ; @INSTALL_DATA@ $^ $@
all: @pre_packagesdir@/D-modules.m2
# this one we need for compatibility with the book
all: @pre_packagesdir@/LLL.m2
# Local Variables:
# compile-command: "make -C $M2BUILDDIR/Macaulay2/packages "
# End:

