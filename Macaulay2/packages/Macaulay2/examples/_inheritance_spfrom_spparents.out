
i1 : X = new Type of BasicList

o1 = X

o1 : Type

i2 : parent X

o2 = BasicList

o2 : Type

 -- the class of all basic lists

i3 : code(net,BasicList)

o3 = -- ../../../Macaulay2/m2/nets.m2:168-171
     net BasicList := x -> horizontalJoin deepSplice (
           net class x, 
           "{",
           toSequence between(comma,apply(toList x,net)),

i4 : x = new X from {2,3,4}

o4 = X{2, 3, 4}

o4 : X

i5 : lookup(symbol -, X) === null

o5 = false

o5 : Boolean

i6 : - X := t -> apply(t,i -> -i);

i7 : - x

o7 = X{-2, -3, -4}

o7 : X

i8 : Y = new Type of X;

i9 : y = new Y from {4,5,6}

o9 = Y{4, 5, 6}

o9 : Y

i10 : - y

o10 = Y{-4, -5, -6}

o10 : Y

i11 : Z = new Type of X;

i12 : z = new Z from {7,8,9}

o12 = Z{7, 8, 9}

o12 : Z

i13 : Y + X := (a,b) -> YX;

i14 : X + Z := (a,b) -> XZ;

i15 : y + z

o15 = YX

o15 : Symbol

i16 : 
