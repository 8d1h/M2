newPackage(
    "BooleanGB",
    Version => "0.9", 
    Date => "June 18, 2010",
    Authors => {{Name => "Franziska Hinkelmann", 
    Email => "fhinkel@vt.edu", 
    HomePage => "http://www.math.vt.edu/people/fhinkel/"}, 
    {Name => "Mike Stillman"},
    {Name => "Elizabeth Arnold"}},
    Headline => "",
    DebuggingMode => true
    )

exportFrom_Core {"gbBoolean"}

-- Code here


beginDocumentation()

doc ///
Key
  BooleanGB
Headline
  Compute Groebner Basis in a Boolean Ring
Description
  Text
    gbBoolean is a fast Groebner Basis computation done bitwise instead of
    symbolically when working over the quotient ring F2/J where J is the ideal
    generated by X^2 - X .
  Example
    n = 3;
    R = ZZ/2[vars(0)..vars(n-1)];
    J = apply( gens R, x -> x^2 + x); 
    QR = R/J;
    I = ideal(a+b,b);
    gbBoolean I
    gens gb I
Caveat
  gbBoolean assumes the quotient ring, regardless of the ring in which the
  ideal was generated. 

  R = ZZ/2[x]

  gbBoolean ideal(x^3)
SeeAlso
///

doc ///
Key
  (gbBoolean, Ideal)
  gbBoolean
Headline
  Compute Groebner Basis 
Usage
  gbBoolean I
Inputs
  I:Ideal
Outputs
  J:Ideal
    the reduced Groebner basis of I
Consequences
Description
  Text
    gbBoolean is a fast Groebner Basis computation done bitwise instead of
    symbolically when working over the quotient ring F2/J where J is the ideal
    generated by X^2 - X .
  Example
    n = 3
    R = ZZ/2[vars(0)..vars(n-1)]
    J = apply( gens R, x -> x^2 + x) 
    QR = R/J
    I = ideal(a+b,b)
    gbBoolean I
    gens gb I
Caveat
  gbBoolean assumes the quotient ring, regardless of the ring in which the
  ideal was generated. 
  R = ZZ/2[x]
  gbBoolean ideal(x^3)
SeeAlso
  gb
///

TEST ///
-- test code and assertions here
-- may have as many TEST sections as needed
///
end

uninstallPackage "BooleanGB"


installPackage "BooleanGB"
viewHelp gbBool
