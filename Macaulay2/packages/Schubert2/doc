Node
  Key
    Schubert2
  Headline
    computation in intersection theory
  Description
    Text
      This package supports computation in intersection theory
      on smooth varieties.  An @TO2{AbstractVariety,"abstract variety"}@ is not given by equations.
      Instead, one gives its intersection ring (usually modulo numerical equivalence),
      its dimension, the Chern class of its tangent bundle, and a method for
      computing integrals.  An @TO2{AbstractSheaf,"abstract sheaf"}@ on an abstract variety is represented
      by its total Chern character (which can be computed from its Chern
      character).  An @TO2{AbstractVarietyMap,"abstract variety map"}@ is a map between abstract
      varieties: the information encoded is the pull-back and push-forward
      maps between the corresponding intersection rings.
  Subnodes
    "Lines on hypersurfaces"
    "Conics on a quintic threefold"
--------
Node
  Key
     "Lines on hypersurfaces"
  Headline
     an example
  Description
   Text
	There are d+1 conditions for a line to be
	contained in a general hypersurface of degree d in $\PP^n$.
	The Grassmannian of lines in $\PP^n$ has dimension 2(n-1).  Therefore,
	when d+1 = 2(n-1), we should expect a finite number of lines.
	Here is a way of computing the number using {\em Schubert2}.  In the case
	of lines on a quintic hypersurface in $\PP^4$, this computation was done
	by Hermann Schubert in 1879.

	We will first illustrate the method by computing the number
	of lines on a cubic surface in $\PP^3$.

	We first construct @ofClass AbstractVariety@ representing
	the Grassmannian of lines in $\PP^3$ and then retrieve its tautological sub-
	and quotient bundles.
   Example
     G = flagBundle({2,2}, VariableNames => {,c})
     (S,Q) = G.Bundles
   Text
	Any cubic surface is given by a cubic form on $\PP^3$,
	that is, an element of the third symmetric power of the
	space of linear forms, which is the trivial rank 4 bundle
	on $\PP^3$.  Its image in the third symmetric power $Symm^3 Q$  of the
	quotient bundle $Q$ vanishes at those points of the
	Grassmannian that correspond to lines on which the
	cubic form vanishes identically, that is, lines
	contained in the cubic surface.  The class of this
	locus is the top Chern class of this bundle.
   Example
	B = symmetricPower(3,Q)
	c = chern(rank B,B)
	integral c
   Text
	We can do the same thing for any n, (with d = 2n-3) as
	follows:
   Example
	f = n -> (
	     G := flagBundle({n-1,2});
	     integral chern symmetricPower_(2*n-3) last G.Bundles
	     )
	for n from 2 to 8 list time f n
	time f 20
   Text
	Note: in characteristic zero, using Bertini's theorem,
	the numbers computed can be proved to be equal
	to the actual numbers of distinct lines 
	for general hypersurfaces.  In $\PP^3$, every smooth cubic
	surface in characteristic zero has exactly 27 lines.
	In higher dimensions there may be smooth hypersurfaces for which
	the number of lines is different from the ``expected'' number
	that we have computed above.
	For example, the Fermat quintic threefold has an infinite number
	of lines on it.
  SeeAlso       
     "Conics on a quintic threefold"
--------
Node
  Key
     "Conics on a quintic threefold"       
  Headline
     an example
  Description
   Text
     The number of conics (rational curves of degree 2) on a general
     quintic hypersurface in $\PP^4$ was computed by S. Katz in 1985.  Here
     is how the computation can be made with {\em Schubert2}.

     Any conic in $\PP^4$ spans a unique plane, and the conics in a plane correspond to the points
     of $\PP^5$.  Hence the space of conics in
     $\PP^4$ is a certain $\PP^5$-bundle $X$ over the Grassmannian $G$ of planes in $\PP^4$.
   Example
     G = flagBundle{2,3}
   Text
     We extract the rank 2 tautological subbundle $S$ and the rank 3 tautological quotient bundle $Q$:
   Example
     (S,Q) = G.Bundles
   Text
     We form the bundle of quadratic forms on the variable planes:
   Example
     B = symmetricPower(2,Q)
   Text
     As a matter of convention, a {\em projective bundle} constructed by the function @ TO projectiveBundle @
     in {\em Schubert2} parametrizes 
     rank 1 {\em quotients} of the sheaf provided.  The $\PP^5$-bundle of conics is given by sublinebundles of $B$, or
     equivalently, by rank 1 quotients of the dual, $B^*$, as in the following code:
   Example  
     X = projectiveBundle(dual B, VariableNames => {,{z}})
   Text
     The equation of the general quintic is a section of the fifth symmetric
     power of the space of linear forms on $\PP^4$.  The induced equation on any given
     conic is an element in the corresponding closed fiber of a certain vector
     bundle $A$ of rank 11 on the parameter space $X$.  On any given plane $P$,
     and for any conic $C$ in $P$, we get the following exact sequence:
	   $$ 0 \to{} H^0(O_P(3)) \to{} H^0(O_P(5)) \to{} H^0(O_C(5)) \to{} 0$$
     As $C$ varies, these sequences glue to a short exact sequence of bundles on $X$:
	   $$ 0 \to{} Symm^3 Q \otimes O(-z) \to{} Symm^5 Q \to{} A \to{} 0$$
     We compute the class of $A$ in the Grothendieck group:
   Example
     A = symmetricPower_5 Q - symmetricPower_3 Q ** OO(-z)
   Text
     A given conic is contained in the quintic if and only if the equation of the
     quintic vanishes identically on the conic.  Hence the class of the locus of
     conics contained in the quintic is the top Chern class of $A$.  Hence
     the number of them is the integral of this Chern class:
   Example
     integral chern A
  SeeAlso
     "Lines on hypersurfaces"
--------
Node
  Key
    AbstractVariety
  Headline
    the class of all abstract varieties
  Description
   Text
     An abstract variety in {\em Schubert2} 
     is defined by its dimension and by a $\QQ$-algebra $A$, interpreted as the intersection ring.
     For example, the following code defines the abstract variety corresponding to $\PP^2$. 
   Example
     A=QQ[t]/ideal(t^3)
     X=abstractVariety(2,A)
   Text
     Once the variety $X$ is created, we can access its structure
     sheaf $O_X$ via the operator {\tt OO}, and view its Chern class:
   Example
     OO_X
     chern OO_X
   Text
     A variable of type @ TO AbstractVariety @ is implemented as @ ofClass MutableHashTable @, and can
     contain other information, such as the variety's tangent bundle, stored under the key @ TO TangentBundle @.
     Installation of a variety's tangent bundle enables the computation of its Todd class.
   Example
	X.TangentBundle  = abstractSheaf(X,Rank=>2, ChernClass=>(1+t)^3)
	todd X
   Text
     To enable the computation of such things as the Euler characteristic of a
     sheaf, we must also specify a method to take the @TO integral@ of an
     element of the intersection ring $A$; in the case where $A$ is Gorenstein,
     as is the case for the intersection ring modulo numerical equivalence of a
     complete nonsingular variety, the integral can often be implemented as the
     functional that takes the coefficient of the highest degree component with
     respect to a suitable basis of monomials.
   Example
     integral A := f -> coefficient(t^2,f);
   Text
     Now we can compute the Euler characteristic of the line bundle whose first Chern class 
     is $2t$; the algorithm uses the Todd class and the Riemann-Roch formula:
   Example
     chi OO_X(2*t)
   Text
      There are several other methods for constructing abstract varieties: the following functions
      construct basic useful varieties:
      @TO projectiveSpace@,
      @TO projectiveBundle@,
      @TO flagBundle@, and
      @TO base@.
  SeeAlso
    abstractVariety
    AbstractSheaf
    chern
    chi
    TangentBundle
    todd
--------
Node
  Key
    AbstractSheaf 
  Headline
    the class of all abstract sheaves
  Description
   Text
     A virtual {\em abstract sheaf} over @ofClass AbstractVariety@ $X$ is specified by giving its rank and its total Chern class,
     as an element of the intersection ring of $X$.

     For example, the Horrocks-Mumford bundle on projective 4-space
     can be constructed with the following code.  We first produce a base point
     whose intersection ring contains a variable named {\tt n}, in 
     terms of which we can compute the Hilbert polynomial.
   Example
     pt = base(n)
   Text
     Then we create the projective space of dimension 4 over the base point, 
     using the {\tt VariableName} option to specify that $h$ is the variable to use to represent the first
     Chern class of the tautological quotient line bundle on the projective space.
   Example
    X = projectiveSpace(4,pt,VariableName => h)
   Text
     Now we create an abstract sheaf of rank 2 with $1 + 5 h + 10 h^2$ as its total Chern class.
   Example
     F = abstractSheaf(X, Rank => 2, ChernClass => 1 + 5*h + 10*h^2)
   Text
     Its class is @ TO AbstractSheaf @:
   Example
     class F
   Text
     Now we compute the Hilbert polynomial of $F$.
   Example
    chi F(n*h)
  SeeAlso
    AbstractVariety
    projectiveSpace
    abstractSheaf
    chi
    (symbol SPACE,AbstractSheaf,RingElement)
--------
Node
  Key
    projectiveSpace
    (projectiveSpace,ZZ,AbstractVariety)
    (projectiveSpace,ZZ)
    [projectiveSpace,VariableName]
  Headline
    make a projective space
  Usage
    projectiveSpace n
    projectiveSpace(n, S)
    projectiveSpace_n S
  Inputs
    n : ZZ
    S : AbstractVariety
      if omitted, then @ TO point @ is used for it
    VariableName => Symbol
      the symbol to use for the variable representing the first Chern class of the tautological line bundle on the resulting projective space
  Outputs
    :
       the projective space of rank 1 quotient bundles of the trivial bundle of rank $n+1$ on
       the base variety {\tt S}.
  Description
   Example
     P = projectiveSpace 3
     tangentBundle P
     chern tangentBundle P
     todd P
     chi OO_P(3)
   Text
     To compute the Hilbert polynomial of a sheaf on projective space, we work
     over a base variety of dimension zero whose intersection ring contains a
     {\em free} variable $n$, instead of working over @ TO point @:
   Example
     pt = base n
     Q = projectiveSpace_4 pt
     chi OO_Q(n)
   Text
     The base variety may itself be a projective space:
   Example
     S = projectiveSpace(4, VariableName => h)
     P = projectiveSpace(3, S, VariableName => H)
     dim P
     todd P
  SeeAlso
     tangentBundle
     todd
     chi
     base
     (symbol _,OO,AbstractVariety)
--------
Node
  Key
    base
    Bundle
    (base,Sequence)
    (base,Thing)
  Headline
    make an abstract variety from nothing, equipped with some parameters and some bundles
  Usage
    X = base()
    X = base(p)
    X = base(n,p)
    X = base(n,p,...,Bundle=>(A,r,a),...)
  Inputs
    n:ZZ
      if omitted, the value $0$ is used
    p:Symbol
    A:Symbol
    r:ZZ
    a:Symbol
  Outputs
    :AbstractVariety
      a variety of dimension $n$, with variables $p$, ..., in its intersection ring,
      usable as (integer) variables in intersection ring computations,
      and with variables $a_1, ..., a_r$ representing the Chern classes of a bundle
      of rank $r$ assigned to the symbol $A$, and so on, for each bundle specification given
  Description
   Example
     X = base(1,p,q,Bundle =>(A,1,a), Bundle => (B,1,b))
     intersectionRing X
     Y = projectiveSpace(3,X,VariableName => H)
     intersectionRing Y
     f = Y.StructureMap
     x = chern f_* (f^* OO_X(p*a_1) * OO_Y(q*H))
     y = chern f_* OO_Y((f^*(p*a_1))+q*H)
     x == y
  SeeAlso
    projectiveSpace
    base
    StructureMap
    chern

--------
Node
  Headline
    compute Chern classes of a sheaf
  Key
    chern
--------
Node
  Key
    (chern,AbstractSheaf)
  Headline
    compute the total Chern class of a sheaf
  Usage
    chern A
  Inputs
    A:
  Outputs
    :
    	 the total Chern class of {\tt A}
  Description
    Example
      base(3, Bundle => (A,2,a), Bundle => (B,3,b))
      chern B
      chern(-A)
    Text
      The next example gives the total Chern class of a twist of
      a rank 2 vector bundle on the projective plane.
    Example
      pt = base(n,p,q)
      P2 = projectiveSpace_2 pt
      E = abstractSheaf(P2, Rank=>2, ChernClass=>1+p*h+q*h^2)
      chern E(n*h)
  SeeAlso
     segre
--------
Node
  Key
    (chern,ZZ,AbstractSheaf)
  Headline
     compute a Chern class of a sheaf
  Usage
    chern(n,A)
    chern_n A
  Inputs
    n:
    A:
  Outputs
    :
     the {\tt n}-th Chern class of {\tt A}
  Description
    Example
      base(3, Bundle => (A,2,a), Bundle => (B,3,b))
      chern_3 B
      chern(2,A*B)
  SeeAlso
     (segre,ZZ,AbstractSheaf)
--------
Node
  Key
    (chern,ZZ,ZZ,AbstractSheaf)
  Headline
    compute several Chern classes of an abstract sheaf 
  Usage
    chern(n,m,A)
  Inputs
    n :
    m :
    A :
  Outputs
    : List
    	 the list $ \{ c_n A .. c_m A \} $ of Chern classes of $A$
  Description
   Text
     In the following example, we consider two vector bundles
     {\tt A} and {\tt B} of ranks 2 and 3 on a variety of dimension 4.
   Example
     base(4,Bundle => (A,2,a), Bundle => (B,3,b))
     netList chern(2,4,B-A)
 SeeAlso
    base
    netList
--------
Node
  Key
      schubertCycle
      (symbol _,FlagBundle,List)
      (symbol _,FlagBundle,Sequence)
      (schubertCycle,List,FlagBundle)
      (schubertCycle,Sequence,FlagBundle)
  Headline
      compute Schubert Cycles on a Grassmannian
  Usage
     schubertCycle(s,F)
     F_s
  Inputs
     F:FlagBundle
       associated to a vector bundle $A$, say, of rank $n$.
       This flag bundle should be a Grassmannian, parametrizing
       rank $q$ quotient bundles of $A$, say.
     s:
       @ ofClass{Sequence} @ $(s_0, ..., s_{q-1})$ of length $q$ of integers, with $0 \le{} s_0 < ... < s_{q-1} < n$,
       or
       @ ofClass{List} @  $(s_0, ..., s_{q-1})$ of length $q$ of integers, with $n-q \ge{} s_0 \ge{} ... \ge{} s_{q-1} \ge{} 0$
  Outputs
     c:
       the appropriate Schubert cycle, depending on the the type of {\tt s}.

       In the case where {\tt s} is a sequence, the value returned is the class of the Schubert cycle in $F$ consisting
       of those points corresponding to $(q-1)$-planes of $\PP(A)$ that meet $W_j$ in dimension at least $i$ with $0 \le{} i < q$, for each
       $i$, where $j = s_i$, and where $W_i$ is the projective subspace of dimension $i$ in a fixed (complete) flag $0 =
       W_0 \subset W_1 \subset ... \subset W_{n-1} = \PP(A)$.
       
       In the case where {\tt s} is a @ ofClass List @, the class returned is
       the one described on page 271 of Fulton's {\em Intersection Theory}.  (FILL IN DEFINITION.)
  Description
   Example
     base(0, Bundle=>(A, 8, a))
     F = flagBundle ({5,3},A)
     CH = intersectionRing F;
     schubertCycle((1,3,5),F)
     F_(1,3,5)
     schubertCycle({3,2,0},F)
--------
Node
  Key
    (abstractSheaf,AbstractVariety,RingElement)
    abstractSheaf
    ChernCharacter
    ChernClass
    [abstractSheaf,Name]
    [abstractSheaf,Rank]
    [abstractSheaf,ChernClass]
    [abstractSheaf,ChernCharacter]
    (abstractSheaf,AbstractVariety)
  Headline
    make an abstract sheaf
  Usage
    abstractSheaf(X,c,Rank=>n)
    abstractSheaf(X,ChernClass=>c,Rank=>n)
    abstractSheaf(X,ChernCharacter=>cc)
  Inputs
    X:
    c:
      an element of the intersection ring of {\tt X}
    Rank => ZZ
    ChernCharacter => RingElement
    ChernClass => RingElement
    Name => Thing
  Outputs
    :AbstractSheaf
      the abstract sheaf over {\tt X} whose total Chern class is {\tt c} (or the value of
      the ChernClass option) and whose rank is the value of the Rank option.  Alternatively,
      it suffices to provide a value for just the ChernCharacter option.
  Description
    Example
      X = abstractVariety(3, QQ[c])
      F = abstractSheaf(X, ChernCharacter => 3 + c)
      ch F
      chern F
--------
Node
  Key
    (abstractVariety,ZZ,Ring)
    abstractVariety
    [abstractVariety,ReturnType]
    ReturnType
  Headline
    make an abstrace variety
  Usage
    abstractVariety(d,A)
  Inputs
    d:
    A:
    ReturnType => Type
     a type of AbstractVariety
  Outputs
   :
    of dimension {\tt d} whose intersection ring is {\tt A} and whose @ TO class @
    is the value of the ReturnType option
  Description
    Example
      X = abstractVariety(3, QQ[c,d,Degrees=>{1,2}])
      F = abstractSheaf(X, ChernCharacter => 3+c+d)
      chern F
--------
Node
  Key
    AbstractVarietyMap
  Headline
    the class of all abstract variety maps
--------
Node
  Key
    adams
  Headline
    compute Adams operations
Node
  Key
    (adams,ZZ,AbstractSheaf)
  Usage
    adams(i,F)
    adams_i F
  Inputs
    i:
    F:
  Outputs
    :
     the effect of $i$-th Adams operation on $F$
  Description
    Example
      X = abstractVariety(3, QQ[c,d,e,Degrees=>{1,2,3}])
      F = abstractSheaf(X, ChernCharacter => 1 + c + d + e)
      adams_3 F
      ch oo
Node
  Key
    (adams,ZZ,RingElement)
  Usage
    adams(i,f)
    adams_i f
  Inputs
    i:
    f:
  Outputs
    :
     the Chern character of the effect of $i$-th Adams operation on the abstract sheaf whose Chern character is $f$
  Description
    Example
      X = abstractVariety(3, QQ[c,d,e,Degrees=>{1,2,3}])
      adams(3, 1 + c + d + e)
-------  
Node
  Key
    Base
  Headline
    get the base variety of a flag bundle
  Usage
    F.Base
  Inputs
    F:FlagBundle
  Outputs
    :AbstractVariety
      the base variety of $F$
  Description
    Example
      X = projectiveSpace 4
      X.Base
      Y = projectiveSpace_3 X
      Y.Base
--------
Node
  Key
    BundleRanks
  Headline
    get the ranks of the tautological sheaves on a flag bundle
  Usage
    F.BundleRanks
  Inputs
    F:FlagBundle
  Outputs
    :List
      the list of ranks of the tautological sheaves on $F$
  Description
    Example
      G = projectiveSpace 7
      G.BundleRanks
      X = flagBundle {1,2,3}
      X.BundleRanks
--------
Node
  Key
    Bundles
  Headline
    get the tautological sheaves on a flag bundle
  Usage
    F.Bundles
  Inputs
    F:FlagBundle
  Outputs
    :Sequence
      the list of the tautological sheaves on $F$
  Description
    Example
      G = projectiveSpace 7
      G.Bundles
      rank \ oo
      X = flagBundle {1,2,3}
      X.Bundles
      rank \ oo
--------
Node
  Key
    VarietyDimension
  Headline
    get the dimension of a variety from its intersection ring
  Usage
    A.VarietyDimension
  Inputs
    A:Ring
      the intersection ring of an abstract variety
  Description
    Example
      X = projectiveSpace 3
      A =intersectionRing X
      A.VarietyDimension
--------
Node
  Key
    TautologicalLineBundle
  Headline
    get the tautological line bundle of an abstract variety
  Usage
    X.TautologicalLineBundle
  Inputs
    X:AbstractVariety
  Outputs
    :AbstractSheaf
     the tautological line bundle of $X$
  Description
    Text
      This is for internal use only.
    Example
      X = projectiveSpace 3
      L = X.TautologicalLineBundle
      rank L
      chern L
    Text
      Here is the preferred way to get the tautological line bundle:
    Example
      OO_X(1)
      L === oo
--------
Node
  Key
    ch
  Headline
    Chern character of an abstract sheaf
Node
  Key
    (ch,AbstractSheaf)
  Headline
    total Chern character of an abstract sheaf
  Usage
   ch F
  Inputs
   F:
  Outputs
   :
    the total Chern character of $F$
  Description
    Example
     X = projectiveSpace 3
     L = OO_X(1)
     chern L
     ch L
Node
  Key
    (ch,ZZ,AbstractSheaf)
  Headline
    the i-th Chern character of an abstract sheaf
  Usage
   ch F
  Inputs
   i:
   F:
  Outputs
   :
    the $i$-th Chern character of $F$
  Description
    Example
     X = projectiveSpace 3
     L = OO_X(1)
     chern L
     ch_1 L, ch_2 L, ch_3 L
--------
Node
  Key
    ChernClassSymbol
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (chi,AbstractSheaf)
    chi
  Headline
    compute the Euler characteristic of an abstract sheaf
  Usage
   chi F
  Inputs
   F:
  Outputs
   :
    the Euler characteristic of $F$
  Description
   Example
    X = projectiveSpace 2
    chi OO_X(-1), chi OO_X(0), chi OO_X(1), chi OO_X(2), chi OO_X(3)
    Y = projectiveSpace(2, base n)
    chi OO_Y(n)
--------
Node
  Key
    (ctop,AbstractSheaf)
    ctop
  Headline
   the top Chern class of an abstract sheaf
  Usage
   ctop F
  Inputs
   F:
  Outputs
   :
    the top Chern class of $F$
  Description
   Text
    Here we compute the top Chern class of a vector bundle of rank 6 on the way toward getting
    the number of lines on quintic threefold.
   Example
    G = flagBundle{3,2}
    B = symmetricPower_5 last G.Bundles
    ctop B
    degree oo
    integral ooo
--------
Node
  Key
    FlagBundle
  Headline
    the class of all flag bundles
--------
Node
  Key
    flagBundle
    (flagBundle,List)
    (flagBundle,List,AbstractSheaf)
    (flagBundle,List,AbstractVariety)
    [flagBundle,VariableNames]
  Headline
   make a flag bundle
  Usage
   flagBundle(r,E)
  Inputs
   r:List
    a list $\{r_0, ..., r_{n-1}\}$ of non-negative integers
   E:AbstractSheaf
    whose rank is the sum of the integers.  If $E$ is, instead, @ ofClass AbstractVariety @ then a trivial sheaf
    on it is used.  If $E$ is omitted, then a trivial sheaf on @ TO point @ is used.
   VariableNames => Thing
    used for specifying how the generators of the intersection ring of the resulting flag bundle are to be named.
    If no value is provided, then @ TT "H_(i,j)" @ = $H_{i,j}$ denotes the j-th Chern class of i-th tautological sheaf.
    If its value is a symbol, then that symbol is used instead of {\tt H}.
    If its value is a list, then for each i, its i-th entry specifies how the Chern classes of the i-th tautological sheaf are to be named.
    If the i-th entry is a symbol, say {\tt c}, then the names are @ TT "c_1 .. c_(r_i)" @.
    If the i-th entry is a list, its entries are used as the names.    
  Outputs
   :FlagBundle
    the flag bundle over the variety of $E$ parametrizing filtrations $0 = E_0 \subseteq{} E_1 \subseteq{}
    ... \subseteq{} E_n = E$ of $E$ whose successive subquotients are vector bundles $E_{i+1}/E_i$
    of rank $r_i$
  Description
    Example
      base(3,Bundle => (E,4,c))
      F = flagBundle({2,2},E)
      F.Bundles
      rank \ oo
      chern \ ooo
      product toList oo
      intersectionRing flagBundle({2,2},E,VariableNames=>{{a,b},t})
--------
Node
  Key
    projectiveBundle
    (projectiveBundle,AbstractSheaf)
    (projectiveBundle,ZZ)
    (projectiveBundle,ZZ,AbstractVariety)
    [projectiveBundle,VariableNames]
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    PP
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    FlagBundleStructureMap
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    integral
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    IntersectionRing
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (intersectionRing,AbstractVariety)
    intersectionRing
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    PullBack
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    PushForward
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    Rank
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (reciprocal,RingElement)
    reciprocal
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (lowerstar,AbstractVarietyMap,Thing)
    lowerstar
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (schur,List,AbstractSheaf)
    schur
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    SectionClass
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (sectionClass,AbstractVarietyMap)
    sectionClass
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (segre,ZZ,AbstractSheaf)
    (segre,AbstractSheaf)
    segre
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    StructureMap
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    TangentBundle
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    tangentBundle
    (tangentBundle,AbstractVariety)
    (tangentBundle,AbstractVarietyMap)
    (tangentBundle,FlagBundle)
    (tangentBundle,FlagBundleStructureMap)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    todd
    (todd,AbstractSheaf)
    (todd,AbstractVariety)
    (todd,AbstractVarietyMap)
    (todd,RingElement)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    ToddClass
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    VariableNames
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    VariableName
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    SubBundles
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    QuotientBundles
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    point
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (symbol *,AbstractSheaf,AbstractSheaf)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (symbol **,AbstractSheaf,AbstractSheaf)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (symbol +,AbstractSheaf,AbstractSheaf)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (symbol +,AbstractSheaf,ZZ)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (symbol ++,AbstractSheaf,AbstractSheaf)
    (symbol ++,AbstractSheaf,ZZ)
    (symbol ++,ZZ,AbstractSheaf)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (symbol -,AbstractSheaf,AbstractSheaf)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (symbol ^,AbstractSheaf,ZZ)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (symbol ^**,AbstractSheaf,QQ)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (symbol ^**,AbstractSheaf,RingElement)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (symbol ^**,AbstractSheaf,ZZ)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (symbol SPACE,AbstractSheaf,QQ)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (symbol SPACE,AbstractSheaf,RingElement)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (symbol SPACE,AbstractSheaf,ZZ)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (exteriorPower,ZZ,AbstractSheaf)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (Hom,AbstractSheaf,AbstractSheaf)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (symbol _,OO,AbstractVariety)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (symbol SPACE,OO,RingElement)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (symmetricPower,QQ,AbstractSheaf)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (symmetricPower,RingElement,AbstractSheaf)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (symmetricPower,ZZ,AbstractSheaf)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (symbol +,ZZ,AbstractSheaf)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (symbol -,AbstractSheaf)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (determinant,AbstractSheaf)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (dual,AbstractSheaf)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (End,AbstractSheaf)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (rank,AbstractSheaf)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (variety,AbstractSheaf)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (variety,Ring)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (dim,AbstractVariety)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (use,AbstractVariety)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (symbol ^*,AbstractVarietyMap)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (symbol _*,AbstractVarietyMap)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (dim,AbstractVarietyMap)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (source,AbstractVarietyMap)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (target,AbstractVarietyMap)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (symbol <-,ChernClassSymbol)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (value,ChernClassSymbol)
  Description
    Text
      TO BE WRITTEN
--------
Node
  Key
    (chern,ZZ,Symbol)
  Description
    Text
      TO BE WRITTEN

-- Local Variables:
-- mode: M2
-- coding: utf-8
-- compile-command: "make -C $M2BUILDDIR/Macaulay2/packages PACKAGES=Schubert2 "
-- End:
-- keep the previous lines at the end of this file
