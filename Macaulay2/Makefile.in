############################### targets to use
all ::
justM2 ::
check ::
install ::
doc::
distclean::
################################# prologue
justM2 all :: initialize config

include ../config.Makefile
VPATH = @srcdir@
INSTALL = @INSTALL@
INSTALL_PROGRAM = $(INSTALL)
INSTALL_DATA = $(INSTALL)

.PHONY: default check all clean dirs misc config \
		initialize doc html book exe zip
ROOT := $(shell basename `pwd`)
clean::; rm -f core
distclean::; rm -f Makefile
################################# bin
libexec bin :; mkdir $@
clean ::; rm -rf bin libexec
initialize :: bin libexec
################################# install
install ::
	$(INSTALL) -d $(libexecdir) $(bindir)
	$(INSTALL_PROGRAM) libexec/Macaulay2 $(DUMPDATAFILE) $(libexecdir)
	rm -f $(bindir)/M2
	<bin/M2 >$(bindir)/M2 sed \
		-e 's@^M2HOME=.*@M2HOME=$(datadir)/Macaulay2@' \
		-e 's@^EXE=.*@EXE=$(libexecdir)/Macaulay2@' \
		-e 's@^DATA=.*@DATA=$$EXE-` uname -m | sed s=/=-=g `-data@' \
		-e 's@^SETUP=.*@SETUP=$(prefix)/share/Macaulay2/m2/setup.m2@'
	chmod 0755 $(bindir)/M2
	$(INSTALL_DATA) encapinfo $(prefix)
install ::
	$(INSTALL) -d $(datadir)/Macaulay2/cache
	$(INSTALL_DATA) cache/Macaulay2-doc $(datadir)/Macaulay2/cache/Macaulay2-doc
install ::; $(MAKE) -C packages $@
install ::; $(MAKE) -C m2 $@
################################# cache
initialize :: cache
cache :; mkdir $@
distclean clean ::; rm -rf cache
################################# lib
ifeq "$(SHARED)" "yes"
justM2 all :: lib
lib :; mkdir $@
endif
distclean clean ::; rm -rf lib
################################# tmp
distclean clean ::; rm -rf tmp
################################# util
initialize ::; $(MAKE) -C util all
distclean clean ::; $(MAKE) NODEPENDS=1 -C util $@
wc ::; $(MAKE) NODEPENDS=1 -C util wc
################################# c
distclean clean ::; $(MAKE) NODEPENDS=1 -C c $@
all justM2 ::; $(MAKE) -C c all
wc ::;  $(MAKE) -C c NODEPENDS=1 wc
################################# c2
all justM2 ::; $(MAKE) NODEPENDS=1 -C c2 targettypes.h
distclean clean ::; $(MAKE) NODEPENDS=1 -C c2 $@
################################# e
justM2 ::; $(MAKE) -C e all
all check ::; $(MAKE) -C e $@
wc distclean clean ::; $(MAKE) NODEPENDS=1 -C e $@
################################# dbm
justM2 ::; $(MAKE) -C dbm all
all check ::; $(MAKE) -C dbm $@
distclean clean ::; $(MAKE) NODEPENDS=1 -C dbm $@
wc ::;  $(MAKE) -C dbm NODEPENDS=1 wc
################################# dumpdata
ifeq "$(DUMPDATA)" "yes"
justM2 ::; $(MAKE) -C dumpdata all
all check ::; $(MAKE) -C dumpdata $@
endif
wc distclean clean ::; $(MAKE) NODEPENDS=1 -C dumpdata $@
################################# d
config ::; $(MAKE) NODEPENDS=1 -C d compat.h
justM2 all ::; util/restart d/restart.tmp $(MAKE) -C d all
wc distclean clean ::; $(MAKE) NODEPENDS=1 -C d $@
################################# basictests
all ::; $(MAKE) -C basictests -k
distclean clean ::; $(MAKE) -C basictests $@
################################# thread
distclean clean ::; if [ -d thread ]; then $(MAKE) -C thread clean; fi
################################# tutorial
#### keep this before 'm2' so the final/*.out files get made
justM2::; $(MAKE) -C tutorial all
all distclean clean::; $(MAKE) -C tutorial $@
################################# m2
wc distclean clean check justM2 all ::; $(MAKE) -C m2 $@
################################# test
check ::; $(MAKE) -C test -k
distclean clean ::; $(MAKE) -C test $@
################################# schubert
check ::
	if [ -d schubert ]; then $(MAKE) -C schubert check; fi
################################# setup
all :: setup
	[ -x $< ] || chmod a+x $<
################################# packages
check clean distclean ::; $(MAKE) -C packages $@
################################# experiments
all distclean clean ::; if [ -d experiments ]; then $(MAKE) -C experiments $@; fi
################################# slides
distclean clean ::; if [ -d slides ]; then $(MAKE) -k -C slides $@; fi
check ::; if [ -d slides ]; then $(MAKE) -k -C slides; fi
################################# html
doc :: html
html ::; $(MAKE) -C html all
distclean clean ::; $(MAKE) -C html $@
################################# book
# doc :: book
book ::;  $(MAKE) -C book all
distclean clean ::; $(MAKE) -C book $@
################################# ComputationsBook
# doc :: ComputationsBook
# ComputationsBook ::; if [ -d ComputationsBook ]; then $(MAKE) -C ComputationsBook all; fi
# clean distclean  ::; if [ -d ComputationsBook ]; then $(MAKE) -C ComputationsBook $@; fi
################################# emacs
all ::;  $(MAKE) -C emacs all
distclean clean ::; $(MAKE) -C emacs $@
################################# appendix to Vasconcelos' book
Vasconcelos-appendix ::; if [ -d Vasconcelos-appendix ] ; then $(MAKE) -C Vasconcelos-appendix all; fi
distclean clean ::; if [ -d Vasconcelos-appendix ] ; then $(MAKE) -C Vasconcelos-appendix clean; fi
################################# socket
distclean clean ::; if [ -d socket ]; then $(MAKE) -C socket clean; fi
################################# Mathematica
distclean clean ::; if [ -d Mathematica ]; then $(MAKE) -C Mathematica clean; fi
################################# backup
backup ::; $(MAKE) -C m2 backup
backup ::; if [ -d docs ]; then $(MAKE) -C docs backup; fi
backup ::; if [ -d experiments ]; then $(MAKE) -C experiments backup; fi
