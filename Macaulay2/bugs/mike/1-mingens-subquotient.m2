-- developing this file into a test file

R = ZZ/32749[x_0..x_3]
g = map(R^{{-1}, {0}, {0}}, R^{{-3}, {-3}, {-3}, {-4}, {-4}, {-4}, {-4}, {-4}, {-4}, {-4}, {-4}, {-5}, {-5}, {-5}}, {{-2626*x_1^2+12125*x_0*x_3, -9334*x_1*x_3, -1234*x_1^2+1851*x_0*x_3, 8188*x_3^3, -x_3^3, -13469*x_0*x_1^2-6054*x_1^2*x_2+14617*x_0^2*x_3+14475*x_0*x_2*x_3-5394*x_2^2*x_3, 12428*x_0*x_1^2-10359*x_1^2*x_2-2709*x_0^2*x_3-9244*x_0*x_2*x_3+8408*x_2^2*x_3, 3715*x_0^2*x_1-7197*x_0*x_1*x_2-13840*x_1*x_2^2+11989*x_3^3, -2626*x_0^3+6868*x_0^2*x_2-6878*x_0*x_2^2-6878*x_1*x_3^2, -7197*x_0^2*x_1-10213*x_0*x_1*x_2-6920*x_1*x_2^2-10380*x_3^3, -1234*x_0^3-617*x_0^2*x_2+617*x_0*x_2^2+617*x_1*x_3^2, 5647*x_0*x_1^2*x_3-2721*x_1^2*x_2*x_3-12965*x_0^2*x_3^2+14112*x_0*x_2*x_3^2+6339*x_2^2*x_3^2, -13438*x_0^4+1514*x_0^3*x_2-8548*x_0^2*x_2^2+10542*x_0*x_2^3+447*x_2^4-11923*x_1^3*x_3-6949*x_0*x_1*x_3^2+9432*x_1*x_2*x_3^2, -1234*x_0^2*x_2^2-617*x_0*x_2^3+617*x_2^4+7388*x_1^3*x_3-6390*x_0*x_1*x_3^2+6875*x_1*x_2*x_3^2}, {x_1^3+9299*x_0*x_1*x_3+9700*x_1*x_2*x_3, 4651*x_1^2*x_3-14017*x_0*x_3^2, 6303*x_0*x_1*x_3-5069*x_1*x_2*x_3, x_0*x_1^2*x_2-13099*x_1^2*x_2^2-6550*x_0^3*x_3-13100*x_0^2*x_2*x_3-6550*x_0*x_2^2*x_3+13099*x_2^3*x_3+16374*x_1*x_3^3, x_0^2*x_1^2+6549*x_1^2*x_2^2-13100*x_0^3*x_3+6550*x_0^2*x_2*x_3-13099*x_0*x_2^2*x_3-6549*x_2^3*x_3+x_1*x_3^3, 3856*x_0^2*x_1*x_3-7009*x_0*x_1*x_2*x_3+638*x_1*x_2^2*x_3+10865*x_3^4, -10614*x_0^2*x_1*x_3-14152*x_0*x_1*x_2*x_3+8891*x_1*x_2^2*x_3+12923*x_3^4, 5536*x_0^3*x_3-15821*x_0^2*x_2*x_3-4050*x_0*x_2^2*x_3-16141*x_2^3*x_3+15326*x_1*x_3^3, x_0^3*x_1+13748*x_0^2*x_1*x_2-4856*x_0*x_1*x_2^2-4848*x_1^2*x_3^2, 2768*x_0^3*x_3+13344*x_0^2*x_2*x_3+903*x_0*x_2^2*x_3+8304*x_2^3*x_3+10591*x_1*x_3^3, -1234*x_0^2*x_1*x_2-13840*x_0*x_1*x_2^2-13840*x_1^2*x_3^2, x_0^5+5*x_0^2*x_2^3+5*x_0*x_2^4-2143*x_0^2*x_1*x_3^2-6894*x_0*x_1*x_2*x_3^2+8759*x_1*x_2^2*x_3^2-11621*x_3^5, x_0^2*x_1*x_2^2-10915*x_0*x_1*x_2^3-13636*x_1*x_2^4+14316*x_0*x_1^2*x_3^2+15412*x_1^2*x_2*x_3^2+7507*x_0^2*x_3^3+11854*x_0*x_2*x_3^3+12742*x_2^2*x_3^3, -1234*x_0*x_1*x_2^3-13840*x_1*x_2^4+2397*x_0*x_1^2*x_3^2-4016*x_1^2*x_2*x_3^2-9346*x_0^2*x_3^3+5500*x_0*x_2*x_3^3+12606*x_2^2*x_3^3}, {-16305*x_1^2*x_2+8147*x_0^2*x_3-x_0*x_2*x_3, x_1^3-8565*x_0*x_1*x_3-11589*x_1*x_2*x_3, x_0*x_1^2-8086*x_1^2*x_2-9301*x_0^2*x_3+2428*x_0*x_2*x_3, 15914*x_1^2*x_3^2-2072*x_0*x_3^3+15022*x_2*x_3^3, 614*x_1^2*x_3^2+13679*x_0*x_3^3-9113*x_2*x_3^3, x_0^3*x_3-6168*x_0^2*x_2*x_3-152*x_0*x_2^2*x_3+727*x_2^3*x_3+1116*x_1*x_3^3, x_1^2*x_2^2+10887*x_0^2*x_2*x_3-16279*x_0*x_2^2*x_3-10556*x_2^3*x_3-7591*x_1*x_3^3, x_0^2*x_1*x_2-15006*x_0*x_1*x_2^2+8248*x_1*x_2^3+3876*x_1^2*x_3^2-7519*x_0*x_3^3+5093*x_2*x_3^3, -12924*x_0^3*x_2-2034*x_0^2*x_2^2+843*x_0*x_2^3-8308*x_0*x_1*x_3^2+843*x_1*x_2*x_3^2, x_0^3*x_1+13548*x_0*x_1*x_2^2+4124*x_1*x_2^3-6356*x_1^2*x_3^2+12615*x_0*x_3^3-13828*x_2*x_3^3, x_0^4+10915*x_0^3*x_2+807*x_0^2*x_2^2+4043*x_0*x_2^3+4850*x_0*x_1*x_3^2+4043*x_1*x_2*x_3^2, -11722*x_0^2*x_2*x_3^2+9636*x_0*x_2^2*x_3^2-1929*x_2^3*x_3^2+4132*x_1*x_3^4, -13262*x_0^2*x_2^3-6973*x_0*x_2^4+169*x_2^5-14463*x_0*x_1*x_2*x_3^2-12512*x_1*x_2^2*x_3^2+12466*x_3^5, x_0^3*x_2^2+10915*x_0^2*x_2^3+807*x_0*x_2^4+4043*x_2^5+7655*x_0*x_1*x_2*x_3^2-15561*x_1*x_2^2*x_3^2-14150*x_3^5}});
r = map(R^{{-1}, {0}, {0}}, R^{{-5}, {-5}, {-6}, {-6}, {-6}, {-7}, {-4}, {-4}, {-5}, {-5}, {-5}, {-6}, {-4}, {-4}, {-5}, {-5}, {-5}, {-6}}, {{x_1^4-2*x_0*x_1^2*x_3-x_1^2*x_2*x_3+x_0^2*x_3^2, x_0^2*x_1^2-10915*x_0*x_1^2*x_2-10917*x_0^3*x_3+10916*x_0^2*x_2*x_3-10916*x_0*x_2^2*x_3-10916*x_1*x_3^3, x_0*x_1^2*x_2^2+11909*x_0^4*x_3+5954*x_0^3*x_2*x_3+2977*x_0^2*x_2^2*x_3+11910*x_0*x_2^3*x_3-2978*x_1^3*x_3^2+14887*x_0*x_1*x_3^3+11910*x_1*x_2*x_3^3, x_0*x_1^3*x_2-13099*x_1^3*x_2^2-6550*x_0^3*x_1*x_3-13100*x_0^2*x_1*x_2*x_3-6550*x_0*x_1*x_2^2*x_3+13099*x_1*x_2^3*x_3+13100*x_1^2*x_3^3+13099*x_0*x_3^4, x_0^5+5*x_0^2*x_2^3+5*x_0*x_2^4-3*x_0*x_1^3*x_3-4*x_1^3*x_2*x_3+4*x_0^2*x_1*x_3^2+10*x_0*x_1*x_2*x_3^2+5*x_1*x_2^2*x_3^2, x_1^2*x_2^4-8932*x_0^4*x_2*x_3+11909*x_0^3*x_2^2*x_3+5954*x_0^2*x_2^3*x_3-8934*x_0*x_2^4*x_3-x_2^5*x_3+2*x_0*x_1^3*x_3^2-5952*x_1^3*x_2*x_3^2-x_0^2*x_1*x_3^3-2979*x_0*x_1*x_2*x_3^3-8934*x_1*x_2^2*x_3^3+x_3^6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, x_1^4-2*x_0*x_1^2*x_3-x_1^2*x_2*x_3+x_0^2*x_3^2, x_0^2*x_1^2-10915*x_0*x_1^2*x_2-10917*x_0^3*x_3+10916*x_0^2*x_2*x_3-10916*x_0*x_2^2*x_3-10916*x_1*x_3^3, x_0*x_1^2*x_2^2+11909*x_0^4*x_3+5954*x_0^3*x_2*x_3+2977*x_0^2*x_2^2*x_3+11910*x_0*x_2^3*x_3-2978*x_1^3*x_3^2+14887*x_0*x_1*x_3^3+11910*x_1*x_2*x_3^3, x_0*x_1^3*x_2-13099*x_1^3*x_2^2-6550*x_0^3*x_1*x_3-13100*x_0^2*x_1*x_2*x_3-6550*x_0*x_1*x_2^2*x_3+13099*x_1*x_2^3*x_3+13100*x_1^2*x_3^3+13099*x_0*x_3^4, x_0^5+5*x_0^2*x_2^3+5*x_0*x_2^4-3*x_0*x_1^3*x_3-4*x_1^3*x_2*x_3+4*x_0^2*x_1*x_3^2+10*x_0*x_1*x_2*x_3^2+5*x_1*x_2^2*x_3^2, x_1^2*x_2^4-8932*x_0^4*x_2*x_3+11909*x_0^3*x_2^2*x_3+5954*x_0^2*x_2^3*x_3-8934*x_0*x_2^4*x_3-x_2^5*x_3+2*x_0*x_1^3*x_3^2-5952*x_1^3*x_2*x_3^2-x_0^2*x_1*x_3^3-2979*x_0*x_1*x_2*x_3^3-8934*x_1*x_2^2*x_3^3+x_3^6, 0, 0, 0, 0, 0, 0}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, x_1^4-2*x_0*x_1^2*x_3-x_1^2*x_2*x_3+x_0^2*x_3^2, x_0^2*x_1^2-10915*x_0*x_1^2*x_2-10917*x_0^3*x_3+10916*x_0^2*x_2*x_3-10916*x_0*x_2^2*x_3-10916*x_1*x_3^3, x_0*x_1^2*x_2^2+11909*x_0^4*x_3+5954*x_0^3*x_2*x_3+2977*x_0^2*x_2^2*x_3+11910*x_0*x_2^3*x_3-2978*x_1^3*x_3^2+14887*x_0*x_1*x_3^3+11910*x_1*x_2*x_3^3, x_0*x_1^3*x_2-13099*x_1^3*x_2^2-6550*x_0^3*x_1*x_3-13100*x_0^2*x_1*x_2*x_3-6550*x_0*x_1*x_2^2*x_3+13099*x_1*x_2^3*x_3+13100*x_1^2*x_3^3+13099*x_0*x_3^4, x_0^5+5*x_0^2*x_2^3+5*x_0*x_2^4-3*x_0*x_1^3*x_3-4*x_1^3*x_2*x_3+4*x_0^2*x_1*x_3^2+10*x_0*x_1*x_2*x_3^2+5*x_1*x_2^2*x_3^2, x_1^2*x_2^4-8932*x_0^4*x_2*x_3+11909*x_0^3*x_2^2*x_3+5954*x_0^2*x_2^3*x_3-8934*x_0*x_2^4*x_3-x_2^5*x_3+2*x_0*x_1^3*x_3^2-5952*x_1^3*x_2*x_3^2-x_0^2*x_1*x_3^3-2979*x_0*x_1*x_2*x_3^3-8934*x_1*x_2^2*x_3^3+x_3^6}});
M = subquotient(g,r);
assert isHomogeneous M

num = degree (M / ideal vars R)	-- the number of minimal generators
assert ( num == 10 )
assert ( num == rank source mingens M )
assert ( num == rank source gens trim M )
assert ( num == rank target presentation prune M )

N = image presentation prune M
num' = degree (N / ideal vars R)	     -- the number of minimal relations when pruned
assert( num' == 26 )
assert ( num' == rank source presentation prune M )

P = image relations M			     -- the number of minimal relations
num'' = degree (P / ideal vars R)
assert( num'' == 18 )
assert( rank source relations trim M ==  num'' )

mingb = m -> gb (m, StopWithMinimalGenerators=>true, Syzygies=>false, ChangeMatrix=>false)
<< "--loaded " << currentFileName << endl;
end

betti gens M
betti relations M
betti mingens M
betti presentation prune M
betti gens trim M
betti relations trim M

-- strategy 1
assert( subquotient ( mingens M , relations M ) == M )
c = mingens mingb (M.generators|M.relations);
d = c * complement(M.relations // c) ;
betti d
--              0  1
-- o12 = total: 3 10
--           0: 2  .
--           1: 1  .
--           2: .  3
--           3: .  6
--           4: .  1
assert( subquotient ( d , relations M ) == M )
assert( d == mingens M )

-- strategy 2
-- betti (mingens mingb(M.generators|M.relations) % mingb(M.relations))
g = (mingens mingb(M.generators|M.relations) % M.relations);
betti g
--              0  1
-- o14 = total: 3 14
--           0: 2  .
--           1: 1  .
--           2: .  3
--           3: .  8
--           4: .  3
assert( subquotient ( g , relations M ) == M )
assert ( num == rank source g )

-- strategy 3
-- betti mingens mingb (mingens mingb(M.generators|M.relations) % mingb(M.relations))
h = mingens mingb (mingens mingb(M.generators|M.relations) % M.relations);
betti h

--              0  1
-- o17 = total: 3 12
--           0: 2  .
--           1: 1  .
--           2: .  3
--           3: .  7
--           4: .  2

assert( subquotient ( h , relations M ) == M )
assert ( num == rank source h )

image h == image g
image h == image d
image g == image d
