In-Reply-To: <200606271913.k5RJDds23420@u00.math.uiuc.edu>
From: Michael Stillman <mike@math.cornell.edu>
Subject: Re: resolution strategies
Date: Tue, 27 Jun 2006 15:27:54 -0400
To: dan@math.uiuc.edu

Strategy => Lascala, LascalaGB, Minimal

and allow a list of one of these, together with:
Hilbert, SortGB, SortPairs=>Up,Down or Pair (default is Up)  (but  
don't put in => true, as it seems redundant)

You will need in the front end to break these down to give me numbers  
I expect.

There are other options to Lascala algorithms too, but I have to  
recall these. (It might be LaScala too... I always forget)


On Jun 27, 2006, at 3:13 PM, Dan Grayson wrote:

>
>> To: Dan Grayson <dan@math.uiuc.edu>
>> From: Michael Stillman <mike@math.cornell.edu>
>> Subject: resolution strategies
>> Date: Tue, 27 Jun 2006 14:31:07 -0400
>>
>> Here is the info on strategy choices for resolution algorithms 2 and
>> 3 in M2.  Algorithms 0 and 1 have a different set of options (I'll
>> detail those in a later email).  The reason I am doing this is so we
>> can choose coherent naming, and as a start towards documenting these
>> features.  If you have any clean method here to organize this, I'm
>> all ears!
>>
>> Description of strategy: Compute a minimal free resolution by using
>> at each stage GB's of the submodule of minimal syzygies.
>> Schreyer monomial orders are used, as otherwise the computations are
>> much less efficient.  The only difference between algorithms 2 and 3
>> is that for 3, STRATEGY_USE_HILB is used.
>
> Strategy => Minimal => true  ???
>
> (I'm not sure the phrase "submodule of minimal syzygies" means  
> something
> different from the phrase "submodule of syzygies".  If not, then we  
> must rename
> this option.)
>
>> Other strategy flags:
>>
>> STRATEGY_USE_HILB = 4, use computation of Hilbert functions to remove
>> some unnecessary S-pairs during computation (after an ideal and
>> algorithm by Robbiano et al.).
>
> Strategy => Hilbert => true
>
>> STRATEGY_LONGPOLYNOMIALS = 1, use a heap based reduction algorithm.
>> Useful when the columns involved contain many monomials.  Can slow
>> the computation down for smaller numbers of monomials.
>
> Strategy => LongPolynomials => true
>
> (What does "heap based reduction algorithm" mean?)
>
>> STRATEGY_SORT = 2, sort the Groebner basis in each degree.  Otherwise
>> the GB elems are placed in a first come first serve order.
>> The default is to not sort the GB's.
>
> Strategy => SortGB => true
>
>> spair  sorting:0, 2^10, 2^11 (default = 0).  In each degree, sort the
>> spairs:
>>    0   by their lcm's, in increasing monomial order
>>   2^10  by their lcm's, in decreasing monomial order
>>   2^11 by first considering the s-pair indices, and then considering
>> the lcm (the lcm will only be considering in skew commutative rings
>> and quotient rings).
>
> Strategy => SortSP => Up, Down, or Pair

