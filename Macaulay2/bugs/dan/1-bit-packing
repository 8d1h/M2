project:

write optimized packed-exponent monomial handling routines for all sizes 1 .. 64 bits

improve Singular's idea for checking divisibility:

      if ((la > lb) || (((la & divmask) ^ (lb & divmask)) != ((lb - la) & divmask)))
	

	static unsigned long rGetDivMask(int bits)
	{
	  unsigned long divmask = 1;
	  int i = bits;
	  while (i < BIT_SIZEOF_LONG)
	  {
	    divmask |= (((unsigned long) 1) << (unsigned long) i);
	    i += bits;
	  }
	  return divmask;
	}

extend that to checking overflow for addition, too
