Date: Mon, 14 Jul 2008 13:05:37 -0500
From: "Daniel R. Grayson" <dan@math.uiuc.edu>
To: dan@math.uiuc.edu
Subject: "good programming style"
Reply-to: dan@math.uiuc.edu


make a doc node called "good programming style" and put generalizations of this
advice in there:

     - a usage statement should not say "see example"
     - the command for running gfan on the user's system will usually be
       "gfan", and if it's not, the user should be able to set it once and
       for all.  Implement this with the Configuration option to newPackage,
       rather than making the user give it as an argument to any function.
     - the output from a function should never be a string giving a message,
       because that is too hard to use in a program.  It would be better to
       rename testMHilbertStability to isStable and have it return true or
       false.
     - don't ask the user for the version number of gfan.  Ask gfan (run it
       with the appropriate command line option.
     - Grobner or Groebner? (in the title of Sturmfels' book)
     - statements like this: "This function is provided by the package
       StatePolytope." are redundant and should be removed.
     - if a function (e.g., testMHilbertStability) has inputs an ideal and an
       integer, put the integer first.  (the big thing should go last)
     - statePolytopeInDegreeM and fullStatePolytope should both be renamed to
       statePolytope.   Since they take arguments of different types, they
       can be dispatched by the same method function.
     - it's useless to return the output from gfan as a string.  It should be
       parsed and converted into suitable Macaulay 2 data, usable by other
       Macaulay 2 functions.  The package Parsing might be useful for this.
       (If you need advice, show me some gfan output.)
     - isGfanCompatible seems of marginal utility, and you'll have a job to do
       keeping up as gfan evolves.  Just let gfan give an error message if it
       doesn't like its input.

