clean this up:
-----------------------------------------------------------------------------
    To: mike
    Subject: colon-quotient
    Reply-to: dan@math.uiuc.edu
    --text follows this line--

    Why did you modify the behavior when a strategy is unspecified in only one of
    the three routines below?

	quotientIdeal := options -> (I,J) -> (
	     if ring I =!= ring J
	       then error "expected ideals in the same ring";
	     domins := options.MinimalGenerators;
	     strat := options.Strategy;
	     options = doQuotientOptions options;
	     local IJ;
    **	 if strat === null then strat = symbol Iterate;
	     if strat === symbol Iterate then (
		 if gbTrace > 0 then << "colon ideal: using Strategy=>Iterate" << endl;	
		 IJ = (quot1 options)(I,J);
		 )
	     else if strat === symbol Linear then (
		 if gbTrace > 0 then << "colon ideal: using Strategy=>Linear" << endl;
		 IJ = (quot2 options)(I,J);
		 )
	     else (
		 if gbTrace > 0 then << "colon ideal: using Strategy=>Quotient" << endl;	 
		 IJ = (quot0 options)(I,J);
		 );
	     if domins then trim IJ else IJ)

	quotientModule := options -> (I,J) -> (
	     if ring I =!= ring J
	       then error "expected same ring";
	     domins := options.MinimalGenerators;
	     strat := options.Strategy;
	     options = doQuotientOptions options;
	     local IJ;
	     if strat === symbol Iterate then
		 IJ = (quotmod1 options)(I,J)
	     else if strat === symbol Linear then
		 IJ = (quotmod2 options)(I,J)
	     else 
		 IJ = (quotmod0 options)(I,J);
	     if domins then trim IJ else IJ)

	quotientAnn := options -> (I,J) -> (
	     if ring I =!= ring J
	       then error "expected same ring";
	     domins := options.MinimalGenerators;
	     strat := options.Strategy;
	     options = doQuotientOptions options;
	     local IJ;
	     if strat === symbol Iterate then
		 IJ = (quotann1 options)(I,J)
	     else if strat === symbol Linear then
		 error "'Linear' not allowable strategy"
	     else
		 IJ = (quotann0 options)(I,J);
	     if domins then trim IJ else IJ)


-----------------------------------------------------------------------------

In-Reply-To: <200607052140.k65Lec812984@u00.math.uiuc.edu>
From: Michael Stillman <mike@math.cornell.edu>
Subject: Re: quotient Strategy Quotient
Date: Wed, 5 Jul 2006 18:25:17 -0400
To: dan@math.uiuc.edu

I changed the default from Quotient to Iterate today.  That made the  
one radical example that you sent me today run somewhat faster than  
in 0.9.2 (instead of 100 times slower).

I like the idea of putting the default into the option table...

On Jul 5, 2006, at 5:40 PM, Dan Grayson wrote:

>
> Compare:
>
>     quotient = method(
> 	 Options => {
> 	      DegreeLimit => {},
> 	      BasisElementLimit => infinity,
> 	      PairLimit => infinity,
> 	      MinimalGenerators => true,
> 	      Strategy => null
> 	      }
> 	 )
>
> with
>
>     quotientIdeal := options -> (I,J) -> (
> 		  ...
> 	 strat := options.Strategy;
> 	          ...
> 	 if strat === null then strat = symbol Iterate;
> 	 if strat === symbol Iterate then (
> 	     if gbTrace > 0 then << "colon ideal: using Strategy=>Iterate"  
> << endl;	
> 		...
> 	     )
> 	 else if strat === symbol Linear then (
> 	     if gbTrace > 0 then << "colon ideal: using Strategy=>Linear"  
> << endl;
> 		...
> 	     )
> 	 else (
> 	     if gbTrace > 0 then << "colon ideal: using  
> Strategy=>Quotient" << endl;	
> 		...
> 	     );
>
> and
>
>     document {
> 	 Key => [quotient, Strategy],
> 	 Headline => "Possible strategies are: Iterate, Linear, and  
> Quotient",
> 		     ...
> 	 "The default is ", TT "Strategy=>Quotient", ", which works as  
> follows:",
>
> So there's a contradiction.
>
> Tell me what the default strategy should be, really, we'll put that  
> into the
> option table, and remove it from the documentation.  The other  
> methods for
> quotient don't refer to the strategy.
>
> We'll also give an error if it's not one of those three.

