Date: Wed, 8 Nov 2006 07:54:31 -0600
From: Dan Grayson <dan@math.uiuc.edu>
To: Michael Stillman <mike@math.cornell.edu>
CC: dan@math.uiuc.edu
In-reply-to: <26705E35-2C23-4D82-8FF3-720385D62817@math.cornell.edu> (message
	from Michael Stillman on Tue, 7 Nov 2006 21:15:28 -0500)
Subject: Re: new bug in gcd?
Reply-to: dan@math.uiuc.edu


That bit of code was completely gone for months, and then I noticed the book
was using it, last week.  Currently the code tests for 1 variable.  I need to
invent a good test for whether the polynomial ring has the kind of monomial
ordering where this algorithm (just take the first syzygy found) would always
work, or else transfer it to another ring.  Also, the test s%a != 0 is a bit
silly - there should be a way to predict it.

    gcd(RingElement,RingElement) := RingElement => (r,s) -> (
	 R := ring r;
	 if ring s =!= R then error "gcd: expected elements in the same ring";
	 if isField R then if r == 0 and s == 0 then 0_R else 1_R
	 else if instance(R,PolynomialRing) and good coefficientRing R then (
	      -- use factory for this
	      new ring r from rawGCD(raw r, raw s)
	      )
	 else if instance(R,PolynomialRing) and numgens R == 1 and isField coefficientRing R then monic (
	      -- does this depend on the monomial order in R, too?
	      -- would this code work for more than one variable?
	      if r == 0 then s
	      else if s == 0 then r
	      else (
		   a := (syz( matrix{{r,s}}, SyzygyLimit => 1 ))_(0,0);
		   if s%a != 0 then error "can't find gcd in this ring";
		   s // a))
	 else notImplemented())

> To: Dan Grayson <dan@math.uiuc.edu>
> From: Michael Stillman <mike@math.cornell.edu>
> Subject: new bug in gcd?
> Date: Tue, 7 Nov 2006 21:15:28 -0500
> 
> I think that this used to work (Leah pointed it out to me):
> 
> R = ZZ/32003[x,y]
> f = (x+y)^3*(x-y^2)
> g = (x+y)^2*(x^3-x*y+y^3)^4
> gcd(f,g)
> 

