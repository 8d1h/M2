// A factoring benchmark for Singular:
// We borrowed the factoring routines from Singular, so this will show whether we've compiled it adequately, and whether
// replacing malloc by GC_MALLOC slows it down.

// Example 1

// from raw3.m2:

// R = polyring(rawZZ(), (symbol x,symbol y,symbol z))
// f = (x+3*y-14)^15*(x^2+y^4+z^7-x*y-13*x*z^2+12)^3;
// --time rawFactor f -- 32.72 sec 1 Gz G4 tibook 1/19/03 -- 22.76 seconds on a 2 Ghz Pentium 4 Dell Latitude laptop
// --testfactor f



ring r = 0, (x,y,z), dp;
poly f = (x+3*y-14)^15*(x^2+y^4+z^7-x*y-13*x*z^2+12)^3;
timer = 1;
factorize(f);  // .17 sec

// Example 2

// R = polyring(rawZZ(), singleton symbol x)
// f = x^20+13*x^19+7*x^15+12*x^12-x^10-x^8+x^4+13*x-20
// g = x^20+17*x^19+7*x^15+12*x^12-x^10-x^8+x^4+13*x-20
// h = x^20+21*x^19+7*x^15+12*x^12-x^10-x^8+x^4+13*x-20
// F = f*g*h
// --time rawFactor F -- 4.1 sec 1 Gz G4 tibook 1/19/03 -- 2.69 seconds on a 2 Ghz Pentium 4 Dell Latitude laptop
// --testfactor F

ring r = 0, (x), dp;
poly f = x^20+13*x^19+7*x^15+12*x^12-x^10-x^8+x^4+13*x-20;
poly g = x^20+17*x^19+7*x^15+12*x^12-x^10-x^8+x^4+13*x-20;
poly h = x^20+21*x^19+7*x^15+12*x^12-x^10-x^8+x^4+13*x-20;
poly F = f*g*h;
F;
factorize(F);  // .13 sec
quit;
