# @configure_input@
justM2 default :: initialize phase1
include ../../include/config.Makefile
VPATH = @srcdir@
srcdir = $(shell cd @srcdir@; pwd)
all:: initialize
emacs html: all; $(MAKE) -C ../$@

##############################
.SUFFIXES: .m2
.PHONY: clean all install check html clean distclean check default initialize

# CFLAGS =
# LDFLAGS = -s
# LOADLIBES =
DUMPSEQUENCE = $(patsubst %, @srcdir@/%, $(shell cat @srcdir@/dumpseq))
DOCSEQUENCE  = $(patsubst %, @srcdir@/%, $(shell cat @srcdir@/docseq )) gbdoc.m2 gbfunctions.m2

MADEM2FILES := gbdoc.m2 gbfunctions.m2 loads.m2 docloads.m2 tutorials.m2 cmdnames.m2

ifdef MP
mpcodes.m2: ../../include/MP.h mpcodes.sed
	sed -f mpcodes.sed $< > $@
all:: mpcodes.m2
MADEM2FILES += mpcodes.m2
endif

cmdnames.m2 : ../e/cmdnames.m2; cp $< $@

TUTORIALS := $(wildcard ../tutorial/final/*.out)

DUMPEDM2FILES := $(DUMPSEQUENCE) @srcdir@/setup.m2 $(MADEM2FILES)

ifneq "$(DUMPDATA)" "no"
DUMPEDM2FILES := $(DUMPEDM2FILES) @srcdir@/dumpdata.m2
endif

NONDOCM2FILES = @srcdir@/setup.m2 $(DUMPSEQUENCE) \
	$(patsubst %, @srcdir@/%, dumpdata.m2 eg.m2 sagbi.m2 makeM2.m2)

M2FILES = $(NONDOCM2FILES) $(DOCSEQUENCE)

loads.m2 : loads.awk dumpseq
	@echo making $@
	@awk -f $^ >$@

docloads.m2 : loads.awk docseq 
	@echo making $@
	@awk -f $^ >$@

tutorials.m2 : $(TUTORIALS)
	@ echo making tutorials.m2
	@ ls $^ |awk '{printf "load \"%s\"\n", $$0}' >$@

################################# cache
cache cache/doc cache/tests ../tutorial/final/cache/doc :; mkdir $@
clean ::; rm -rf cache
initialize :: cache cache/tests cache/doc ../tutorial/final/cache/doc
################################# temporary directories for examples
initialize :: cache/doc/cache/doc cache/doc/tmp
cache/doc/cache/doc cache/doc/tmp :; mkdir -p $@
#################################

gbdoc.m2 : gbdoc.awk ../e/misc/cmdnames.input
	awk -f $^ >tmp
	mv tmp $@
gbfunctions.m2 : gbfuns.awk ../e/misc/cmdnames.input 
	awk -f $^ >tmp
	mv tmp $@
default:: TAGS.doc
TAGS.doc : docseq
	@echo making $@
	@../util/echoout '>$@' $(foreach i, $(DOCSEQUENCE),  $(i),0)
clean::; rm -f TAGS.doc

default:: TAGS
clean::; rm -f TAGS
TAGS: dumpseq
	@echo making $@
	@../util/echoout '>$@' $(foreach i, \
			      $(M2FILES) \
			      $(wildcard \
				@srcdir@/*.awk \
				@srcdir@/../basictests/*.m2 \
				@srcdir@/../test/*.m2 \
				@srcdir@/../html/*.m2 \
				@srcdir@/../book/*.m2 \
				@srcdir@/../packages/*.m2 \
				@srcdir@/../packages/*/*.m2 \
				@srcdir@/../emacs/makehlp.m2 \
				@srcdir@/../emacs/makem2.m2 \
				@srcdir@/../*/COPYRIGHT \
				@srcdir@/../emacs/makesyms.m2 \
				@srcdir@/../tutorial/prelim/*.m2 \
				@srcdir@/../tutorial/final/*.m2 \
				@srcdir@/../*/Makefile* \
				@srcdir@/../CHANGES), \
			       $(i),0)

phase1 :: $(DUMPEDM2FILES)

ifneq "$(DUMPDATA)" "no"
ARGS := -q -silent '-eloaddata("../$(DUMPDATAFILE)")' -- '-erunStartFunctions()' 
phase1 :: ../$(DUMPDATAFILE)
../$(DUMPDATAFILE) : $(DUMPEDM2FILES) ../libexec/Macaulay2
	 #------ phase 1: reading *.m2 (not the documentation), making $@
	rm -f ../$(DUMPDATAFILE)
	time env M2HOME=.. ../libexec/Macaulay2 -q -silent -tty \
		@srcdir@/setup.m2 @srcdir@/dumpdata.m2 '-edump()'
else
ARGS := -silent setup.m2
endif

phase1 :: ../cache/Macaulay2-made
../cache/Macaulay2-made : $(DUMPEDM2FILES) ../libexec/Macaulay2
	touch $@

phase2 :: initialize
phase2 :: phase1
phase2 :: ../cache/Macaulay2-pre cache/doc/.made cache/tests/.made
	touch $@

../cache/Macaulay2-pre cache/doc/.made cache/tests/.made : \
		$(DUMPEDM2FILES) ../libexec/Macaulay2 $(DOCSEQUENCE) $(TUTORIALS) docseq docloads.m2
	 #------ phase 2: making cache/doc/*.example, cache/tests/*.m2, and $@
	rm -rf ../cache/Macaulay2-tmp
	rm -rf cache/tests
	mkdir  cache/tests
	../../bin/M2 -q -silent \
		'-e phase = 2' \
		'-e errorDepth 0' \
		'-e DocDatabase = openDatabaseOut "../cache/Macaulay2-tmp"' \
		docloads.m2 '-eexit(0)'
	mv ../cache/Macaulay2-tmp ../cache/Macaulay2-pre
	touch cache/doc/.made cache/tests/.made

## .gdbinit
justM2 all:: .gdbinit .gdb-files .gdb-run-it
gdb: .gdbinit .gdb-files; env M2HOME=.. gdb ../libexec/Macaulay2
.gdbinit: .gdbinit.$(USER); cp $< $@
clean::; rm -f .gdbinit
.gdbinit.$(USER):; cp @srcdir@/.gdbinit.dan $@
.gdb-files:
	echo 'file ../libexec/Macaulay2' >$@
	: echo 'dir ../e ../d ../../gc ../../factory ../../libfac ../../gmp' >>$@
	echo 'set environment M2HOME ..' >>$@
clean :: ; rm -f .gdb-files
.gdb-run-it:
	echo 'echo \n' >$@
	echo 'run @srcdir@/setup.m2 "-e path = join({\"@srcdir@/../packages/\"},path)" "-e runStartFunctions()"' >>$@
clean :: ; rm -f .gdb-run-it
##
backup : CVS/Entries
CVS/Entries : $(M2FILES)
	mount /a.ext2
	tar cfv - $? | (cd /a.ext2; mkdir -p m2; cd m2; tar xf -)
	umount /a.ext2

profile : gmon.out
	env M2HOME=.. gprof ../libexec/Macaulay2 >profile
clean ::; rm -f profile

INPUTS := cache/doc/sample cache/doc/expression
cache/doc/sample: sample; cp $< $@
cache/doc/expression: expression; cp $< $@

phase3 : initialize phase2 cache/doc/sample cache/doc/expression
	 #------ phase 3: running new example input files: cache/doc/*.example
	$(MAKE) -C cache/doc -f $(srcdir)/Makefile.egs srcdir=$(srcdir)
	touch $@

all :: phase4
phase4 : phase3 ../cache/Macaulay2-doc
../cache/Macaulay2-doc : ../cache/Macaulay2-pre \
		$(MADEM2FILES) $(INPUTS) $(DOCSEQUENCE) $(TUTORIALS)
	 #------ phase 4: making $@
	rm -f ../cache/Macaulay2-tmp
	../../bin/M2 -q -silent \
		'-e phase = 4' \
		'-e errorDepth 0' \
		'-e DocDatabase = openDatabaseOut "../cache/Macaulay2-tmp"' \
		docloads.m2 '-eexit(0)'
	mv ../cache/Macaulay2-tmp $@
	touch $@

phase5 : phase4
	 #------ phase 5: making cache/doc/*.html
	../../bin/M2 -q -silent '-e phase = 5' \
		'-e errorDepth 0' \
		'-e DocDatabase = new MutableHashTable' docloads.m2 \
		@srcdir@/docfinish.m2 '-eexit(0)'
	touch $@

ifdef NEWENGINE
check:: test1
test1 : test.m2 phase1
	../../bin/M2 '-e errorDepth 0' -q test.m2 '-e << "--test succeeded" << endl' '-e exit 0'
	touch $@
endif

check:: test2
test2: phase1 ../libexec/Macaulay2
	$(MAKE) -k -C cache/tests -f $(srcdir)/Makefile.tests srcdir=$(srcdir)
	touch $@
clean::; rm -f test2

check:: test3
test3:
	echo 2+3 | ../../bin/M2
	touch $@
clean::; rm -f test3

ifeq ($(OS),Linux)
check:: test4
test4: ../util/screen
	echo 2+3 | ../util/screen ../../bin/M2
	touch $@
clean::; rm -f test4
endif

$(packagedir)/m2:; $(INSTALL) -d $(packagedir)/m2
install:: $(packagedir)/m2
install:: $(DUMPEDM2FILES) $(DOCSEQUENCE)
	$(INSTALL_DATA) $^ $(packagedir)/m2

clean::
	rm -rf ../$(DUMPDATAFILE) ../cache/Macaulay2-doc \
		cache *.obj *.exe runexample \
		temp.data distfiles \
		gbdoc.m2 gbfunctions.m2 loads.m2 docloads.m2 tutorials.m2 cmdnames.m2 \
		mpcodes.m2 tutorials.m2 version.m2 core
distclean : clean
	rm -f Makefile
