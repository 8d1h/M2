# @configure_input@
justM2 default :: initialize phase1
quick-install : justM2 install
include ../../include/config.Makefile
VPATH = @srcdir@:../tutorial/final
srcdir = $(shell cd @srcdir@; /bin/pwd)
all:: initialize
Makefile : Makefile.in ; cd ../.. && ./config.status Macaulay2/m2/Makefile
emacs html: all; $(MAKE) -C ../$@

##############################
.SUFFIXES: .m2
.PHONY: clean all install html distclean check default initialize prep always

LOADSEQUENCE = $(patsubst %, @srcdir@/%, $(shell cat @srcdir@/loadsequence))
DOCSEQUENCE  = $(patsubst %, @srcdir@/%, $(shell cat @srcdir@/docseq ))

# there is a parallel list of tutorials in overview3.m2
TUTORIALS = $(patsubst %, @srcdir@/../tutorial/final/%, Fano.out canEmbed.out divisors.out elementary.out)

# M2 files made in the build directory are not mentioned in LOADSEQUENCE above
MADEM2FILES := loads.m2 Macaulay2-doc.m2

initialize:: srcdir
srcdir:; ln -s @srcdir@ srcdir

ifdef MP
mpcodes.m2: ../../include/MP.h mpcodes.sed
	sed -f mpcodes.sed $< > $@
all:: mpcodes.m2
MADEM2FILES += mpcodes.m2
endif

DUMPEDM2FILES := $(LOADSEQUENCE) @srcdir@/setup.m2 @srcdir@/startup.m2 $(MADEM2FILES)

ifneq "$(DUMPDATA)" "no"
DUMPEDM2FILES := $(DUMPEDM2FILES)
endif

OTHERM2FILES = $(patsubst %, @srcdir@/%, eg.m2 sagbi.m2)

NONDOCM2FILES = @srcdir@/startup.m2 @srcdir@/setup.m2 $(LOADSEQUENCE) $(OTHERM2FILES)

loads.m2 : loads.awk loadsequence
	@echo making $@
	@awk -f $^ >$@

Macaulay2-doc.m2 : loads.awk docseq 
	@echo making $@
	@awk -f $^ >$@

################################# cache
cache cache/doc ../tutorial/final/cache/doc :; mkdir -p $@
clean ::; rm -rf cache
initialize :: cache cache/doc ../tutorial/final/cache/doc
################################# temporary directories for examples
initialize :: cache/doc/cache/doc cache/doc/tmp
cache/doc/cache/doc cache/doc/tmp :; mkdir -p $@
#################################

default:: TAGS.doc
TAGS.doc : docseq
	@echo making $@
	@../util/echoout '>$@' $(foreach i, $(DOCSEQUENCE),  $(i),0)
clean::; rm -f TAGS.doc

default:: TAGS
clean::; rm -f TAGS
TAGS: loadsequence
	@echo making $@
	@../util/echoout '>$@' $(foreach i, \
			      $(NONDOCM2FILES) $(DOCSEQUENCE) \
			      $(wildcard \
				@srcdir@/*.awk \
				@srcdir@/../basictests/*.m2 \
				@srcdir@/../test/*.m2 \
				@srcdir@/../html/*.m2 \
				@srcdir@/../book/*.m2 \
				@srcdir@/../packages/*.m2 \
				@srcdir@/../packages/*/*.m2 \
				@srcdir@/../emacs/makehlp.m2 \
				@srcdir@/../emacs/makem2.m2 \
				@srcdir@/../*/COPYRIGHT \
				@srcdir@/../emacs/makesyms.m2 \
				@srcdir@/../tutorial/prelim/*.m2 \
				@srcdir@/../tutorial/final/*.m2 \
				@srcdir@/../*/Makefile \
				@srcdir@/../*/Makefile.in \
				@srcdir@/Makefile.tests \
				@srcdir@/../CHANGES), \
			       $(i),0)

prep :: $(DUMPEDM2FILES)

phase1 :: prep

ifneq "$(DUMPDATA)" "no"
phase1 :: ../$(DUMPDATAFILE)
../$(DUMPDATAFILE) : $(DUMPEDM2FILES) ../bin/M2
	 #------ phase 1: reading *.m2 (not the documentation), making $@
	rm -f ../$(DUMPDATAFILE)
	../bin/M2 --dumpdata
endif

phase1 :: ../cache/Macaulay2-made
../cache/Macaulay2-made : $(DUMPEDM2FILES) ../bin/M2$(EXE)
	touch $@

## .gdbinit
justM2 all:: .gdbinit .gdb-files .gdb-run-it
gdb: .gdbinit .gdb-files; gdb ../bin/M2$(EXE)
.gdbinit: .gdbinit.$(USER); cp $< $@
clean::; rm -f .gdbinit
.gdbinit.$(USER):; cp @srcdir@/.gdbinit.dan $@
.gdb-files: Makefile
	echo 'echo -- loading .gdb-files\n' >$@
	echo 'file ../bin/M2' >>$@
clean :: ; rm -f .gdb-files
.gdb-run-it: Makefile
	echo 'echo -- loading .gdb-run-it\n' >$@
	echo 'echo \n' >>$@
	echo 'run -q --no-loaddata --debug' >>$@
clean :: ; rm -f .gdb-run-it
profile : gmon.out
	gprof ../bin/M2 >profile
clean ::; rm -f profile

INPUTS := cache/doc/sample cache/doc/expression
cache/doc/sample: sample; cp $< $@
cache/doc/expression: expression; cp $< $@

ifeq "$(DEBUG)" "yes"
EGFLAGS = -k
EGMORE = || true
endif

phase3 : initialize phase1 cache/doc/sample cache/doc/expression
	 #------ phase 3: running new example input files: cache/doc/*.example
	$(MAKE) -C cache/doc -f ../../Makefile.egs srcdir=$(srcdir)
	touch $@

all :: phase4
phase4 : phase3 ../cache/Macaulay2-doc
../cache/Macaulay2-doc : ../cache/Macaulay2-pre $(MADEM2FILES) $(INPUTS) $(DOCSEQUENCE) $(TUTORIALS)
	 #------ phase 4: making $@
	rm -f ../cache/Macaulay2-tmp
	../bin/M2 -q --silent --stop \
		-e 'phase = 4' \
		-e 'errorDepth = 0' \
		-e 'DocDatabase = openDatabaseOut "../cache/Macaulay2-tmp"' \
		Macaulay2-doc.m2 -e 'exit(0)'
	mv ../cache/Macaulay2-tmp $@
	touch $@

install:: phase1

$(htmldocdir) : ; install -d $@

phase5 : phase4 $(htmldocdir) $(htmldocdir)/index.html always
$(htmldocdir)/index.html : ../cache/Macaulay2-made ../cache/Macaulay2-doc ../bin/M2
	 #------ phase 5: making html documentation
	../bin/M2 -q --silent --stop \
		-e 'phase = 5; errorDepth = 0' \
		-e 'makeHTML("$(prefix)/","@prefix@")' \
		-e 'exit 0'
install:: "$(docm2dir)" "$(htmldocdir)" install-html
"$(htmldocdir)" "$(docm2dir)" :; $(INSTALL) -d "$@"
install-html :
	 # cd SOMEWHERE && tar cf - *.html | tar xf - -C "$(htmldocdir)"

HOMEDIR := $(shell cd .. && pwd)
check :: check-links
check-links :
	@ echo "make: Entering directory \`$(shell cd $(htmldocdir) && pwd)'"
	 #------ checking the links in the html documentation
	@ cd $(htmldocdir) && $(HOMEDIR)/html-check-links/html-check-links *.html
	@ echo "make: Leaving directory \`$(shell cd $(htmldocdir) && pwd)'"

ifdef NEWENGINE
check:: test1
test1 : test.m2 phase1
	../bin/M2 -e 'errorDepth = 0' -q test.m2 -e '<< "--test succeeded" << endl' -e 'exit 0'
	touch $@
endif

check:: test2
test2: phase1 ../bin/M2$(EXE)
	$(MAKE) -k -C cache/tests -f $(srcdir)/Makefile.tests srcdir=$(srcdir)
	touch $@
clean::; rm -f test2

check:: test3
test3:
	echo 2+3 | ../bin/M2
	touch $@
clean::; rm -f test3

ifeq ($(OS),Linux)
check:: test4
test4: ../util/screen
	echo 2+3 | ../util/screen ../bin/M2
	touch $@
clean::; rm -f test4
endif

install:: $(datam2dir)
$(datam2dir) :
	$(INSTALL) -d $(datam2dir)

install:: $(DUMPEDM2FILES) $(DOCSEQUENCE) $(TUTORIALS)
	$(INSTALL) -d "$(m2dir)"
	$(INSTALL_DATA) $^ "$(m2dir)"

clean::
	rm -rf ../$(DUMPDATAFILE) ../cache/Macaulay2-doc cache *.obj *.exe runexample \
		temp.data distfiles loads.m2 docloads.m2 mpcodes.m2 version.m2 core
distclean : clean
	rm -f Makefile

always:
