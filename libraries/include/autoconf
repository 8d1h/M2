# -*- mode: Makefile -*-
# Makefile for use with all packages using autoconf

include capybara/config

ifndef CONFIGENV
# The environment to pass to 'configure'
CONFIGENV ?= $(ENV)
ifdef LDFLAGS
CONFIGENV += LDFLAGS="$(LDFLAGS)"
endif
ifdef CFLAGS
CONFIGENV += CFLAGS="$(CFLAGS)"
endif
ifdef AM_CFLAGS
CONFIGENV += AM_CFLAGS="$(AM_CFLAGS)"
endif
ifdef CPPFLAGS
CONFIGENV += CPPFLAGS="$(CPPFLAGS)"
endif
ifdef CXXFLAGS
CONFIGENV += CXXFLAGS="$(CXXFLAGS)"
endif
ifdef CC
CONFIGENV += CC="$(CC)"
endif
ifdef LIBS
CONFIGENV += LIBS="$(LIBS)"
endif
endif

# The subdirectory of the top level source directory in which the file
# 'configure' is found.
CONFIGUREDIR ?= .

# the configure script
CONFIGUREPROG = $(CONFIGUREDIR)/configure

# The path to the configure script from the build directory, which might be different
# from the source directory.  We are careful about this because I've seen a configure
# script that gets confused when the path to it is not relative.
ifeq ($(SRCDIR),$(BUILDDIR))
CONFIGUREPATH = $(CONFIGUREPROG)
else
CONFIGUREPATH = $(PKGTOPDIR)/$(SRCDIR)/$(CONFIGUREPROG)
endif

# Some packages use "libtool", which handles the linking of sharable libraries in a portable way.
# But it usually breaks the feature most autoconf-produced Makefiles have, where you can configure
# with an option like --prefix=/usr/local and run "make install" with an option like "prefix=/usr/local/encap/foobar-1.2.3" 
# to install the package temporarily somewhere else, either for use with "epkg" or for creating a tarball.
# To work around the bug, specify "LIBTOOLBUG = no" in the package's Makefile, and give up on the idea of
# being able to position the directory tree of the package anywhere in your file system.
LIBTOOLBUG ?= no
ifeq ($(LIBTOOLBUG),no)
CONFIGPREFIX := $(FINALDESTINATION)
else
CONFIGPREFIX := $(PREFIX)/$(PREFIXSUBDIR)
endif

# the command used to configure a package that uses GNU autoconf
ifneq ($(BUILD),)
CONFIGOPTIONS += --build=$(BUILD)
endif
CONFIGOPTIONS += $(MORECONFIGOPTIONS)
AUTOCONFCMD ?=  $(CONFIGUREPATH) --prefix=$(CONFIGPREFIX) $(CONFIGOPTIONS)

# the command to see whether it really is autoconf
AUTOCONFIRM ?= head -60 $(SRCDIR)/$(CONFIGUREDIR)/configure | egrep -i '\#.*[gG]enerated.*autoconf' >/dev/null

# Sometimes config.guess in the package is too old.
# Tried this, it has drawbacks:
#		    --host=$(shell if ! config.guess ; then echo NONE ; fi) \

include capybara/common

configure :: $(SRCDIR)/$(CONFIGUREDIR)/configure
MAKEAUTOCONFCMD ?= autoconf
ifeq "$(MAKECONFIGURE)" "yes"
$(SRCDIR)/$(CONFIGUREDIR)/configure : always
	cd $(SRCDIR) && $(MAKEAUTOCONFCMD)
#	$(MAKE) -C $(SRCDIR) $(CONFIGUREDIR)/configure
endif

configure :: $(BUILDDIR) $(BUILDDIR)/.configured
package-distclean unstamp-configure :: ; rm -f $(BUILDDIR)/.configured
configure-help :: $(SRCDIR)/$(CONFIGUREPROG)
	cd $(SRCDIR) && ./configure --help

# we include this step in case we have patched configure.ac and thus need to update configure
pre-configure ::
	@cd $(SRCDIR) && \
	 if [ -f configure.ac -a -f configure -a configure.ac -nt configure ] ; \
	 then set -x autoconf ; \
	 fi

$(BUILDDIR) :
	mkdir -p "$@"

$(BUILDDIR)/.configured : $(SRCDIR)/$(CONFIGUREDIR)/configure
	@(echo "$(AUTOCONFIRM)" ; $(AUTOCONFIRM)) || (echo "capybara: error: configure script not generated by autoconf" >&2 ; exit 1)
	cd $(BUILDDIR) && env $(CONFIGENV) printenv | \
		egrep '^(CC|CXX|CPPFLAGS|CFLAGS|CXXFLAGS|LDFLAGS|LIBS|LD_LIBRARY_PATH)=' || true
	unset TMPDIR ; cd $(BUILDDIR) && env $(CONFIGENV) $(AUTOCONFCMD)
	touch $@
