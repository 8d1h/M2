# -*- Makefile -*-

# indicate this file has been loaded
CAPYBARA = yes

# This file contains default values and documentation for all the variables you 
# can set in the Makefile of a package.

### Global variables

# Load the local-overrides file, if present.  The system administrator may override
# global variables set with the "?=" operator using that file.  Another way to override
# such variables is to set them in the environment.  See "local-overrides.sample" for
# an example of what to put in that file.
-include capybara/local-overrides

# The directory where the packages and their files go.  Each subdirectory of
# this directory corresponds to a separate package.  The packages should not know
# or care what the precise location of this directory is, and it may be
# something different in the final installation.  (Part of our goal in
# building these packages is to defeat the Makefiles of the authors, which
# naturally try to incorporate information about the location of the files
# inthe files themselves.)
ENCAPDIR ?= /opt

# The final location of the directory where epkg should put the symbolic links.
# Don't expect to find any of our files there now, since we may be making a
# new system or even cross-compiling.  Overriding it with an environment
# variable and using the command "make -e" would be a good way to avoid
# editing all the Makefiles of all the packages.
FINALDESTINATION ?= /usr

# Override this one with SUDO= if you want capybara not to use the sudo
# command to run epkg as root.  If you use sudo, it should be configured to
# permit you to run both 'epkg' and 'test' as root.  We use 'test' because
# 'epkg' fails (!) to give a nonzero return code when errors occur.
## SUDO ?= sudo

# Use this one to list the names of the packages upon which this one depends.
PREREQ ?=

# Override this one with FAKEROOT=fakeroot if you want "make install" to be
# run under fakeroot, so that attempts to change the ownership of files will
# silently be recorded instead of being accomplished.
FAKEROOT ?=
PREREQ += $(FAKEROOT)

# The location where epkg has put the symbolic links for capybara itself, on
# the build system.  We expect to find our files there in 
# $(LOCALDESTINATION)/share/capybara and $(LOCALDESTINATION)/include/capybara.
LOCALDESTINATION ?= $(FINALDESTINATION)

# This is the directory where epkg should put the symbolic links to the files
# in the packages.  It may differ from the final destination, since we may be
# making a new system or cross-compiling, in which case you should override
# it.
DESTINATION ?= $(FINALDESTINATION)

# A temporary directory (given by an absolute path) specifying where the
# files can be stored temporarily while building.  You may want to override
# this with an environment variable, specifying a directory on a file system
# with 800MB of free space for compiling those big big packages.
# There will be a symbolic link called TMP made to it.
TMPDIR ?= /tmp

# Whether to run "make clean" after each successful installation of a package.
# You may want to override this and set it to "no" when creating the Makefile for
# a package, to save time downloading, configuring, etc.
AUTOCLEAN ?= yes

# A system administrator should override CAPYBARAHOME with an environment variable.
CAPYBARAHOME ?= $(LOCALDESTINATION)/share/capybara

# The list of directories in which to search for prerequisite packages, i.e.,
# for the capybara directories.
CAPYBARAPATH ?= $(CAPYBARAHOME)/packages

# Flags for use with wget.
# Example: WGETOPTIONS = --passive-ftp
WGETOPTIONS ?=

# The base of the URL for gnu packages.
# You may override this in the environment with your favorite gnu mirror.
# Only relevant for gnu packages.
# the complete list of mirrors is at http://www.gnu.org/order/ftp.html
# URLGNU ?= ftp://gnu.ms.uky.edu/pub/mirrors/gnu
# URLGNU ?= ftp://ftp.in-span.net/pub/mirrors/ftp.gnu.org
URLGNU ?= ftp://ftp.gnu.org/pub/gnu

# TeX sources
# CTAN ?= /ftp@ctan.math.utah.edu:/pub/mirrors/ctan.tug.org/tex-archive
CTAN ?= ftp://cam.ctan.org/tex-archive

# our choice of mirror for sourceforge files
# SOURCEFORGE ?= http://telia.dl.sourceforge.net/sourceforge
SOURCEFORGE ?= http://umn.dl.sourceforge.net/sourceforge

# our choice of mirror for netlib files
# NETLIB = http://www.netlib.org
# NETLIB = http://www.netlib.no/netlib
# NETLIB = http://www.mirror.ac.uk/sites/netlib.bell-labs.com/netlib
NETLIB ?= http://cm.bell-labs.com/netlib

#############################################################################

### Local variables, specific to a single package

# location of the home page of the package, as a URL
HOMEPAGE ?=

# the directory name part of the URL from which to download the package
URL ?=

# email address for bug reports
BUGREPORTS ?= 

# a brief description of the package
DESCRIPTION ?= 

# location of answers to frequently asked questions for this package, as a URL
FAQ ?=

ifneq ($(VERSION),$(sort $(strip $(VERSION))))
$(error the value '$(VERSION)' of make variable VERSION contains whitespace)
endif

# The version number.  You must override this in the Makefile for the package.
VERSION ?= 0.0.0

## The options for 'configure', used only with systems based on 'autoconf'.
# the build type, in the format returned by config.guess
#  this can be put in "include/capybara/local-overrides", or on the command line
#  example: BUILD = sparc-sun-solaris2.8
BUILD ?= 
# other options to configure, usually placed in the package's Makefile
CONFIGOPTIONS ?= --enable-strip
# use this option on the command line, to avoid overriding the configure 
# options specified in the package's Makefile:
MORECONFIGOPTIONS ?=

# Additional options for mkencap, which makes the encapinfo file.
MKENCAPOPTIONS ?=
# obsolete options and the corresponding encapinfo commands:
#       -d desc
#       -D prereq_dir
#       -F prereq_file
#       -l linkdir
#       -n relative/path/name newname
#       -P range prereq_pkgspec
#       -r require
#       -X exclude
# with epkg version 2.3 and above we use something like:
#       -a "exclude ..."

# This string is appended at the end to form the PREFIX, which is the
# directory tree in which the package is installed.  Override it if you are
# trying to compile the package in a different way, and an installation has
# already been done with the same version number.  This should be overridden
# just on the command line, as it is usually a temporary thing.
PKGSUFFIX ?=

# The form of the mkencap command.  Shouldn't be changed.
MKENCAPCMD = mkencap -e -f -s $(ENCAPDIR) \
	-a "exclude CVS" -a "exclude usr" -a "exclude opt" -a "exclude info/dir" -a "exclude share/info/dir" \
	$(MKENCAPOPTIONS) $(PKG)

# The options for use with 'epkg'.  The user might want to add an
# option such as -p to override prerequisite checking.
EPKGOPTIONS += -v -s $(ENCAPDIR) -t $(DESTINATION)

# the top directory, where we are when make is run
PKGTOPDIR := $(shell pwd)

# The name of the package.  Make the name of the directory the same.
# This name does not include the version number.
PKGNAME ?= $(shell basename $(PKGTOPDIR))

# To make an old version of the package and install it side by side with
# another version, you may include a line like this:
#    SIDEBYSIDE = yes
# in which case we form the package name with an equal sign instead of a
# hyphen; then epkg will regard the entire string as the name of the package,
# without no version number.
ifdef SIDEBYSIDE
VERSIONSEPARATOR = =
else
VERSIONSEPARATOR = -
endif

# The complete name of the package, with the version number included.
# This is called the "pkgspec" in the epkg documentation.
# We replace the hyphens in the version number by periods, because the last
# hyphen here signals the start of the version number, according to 'epkg'.
PKG ?= $(PKGNAME)$(PKGSUFFIX)$(VERSIONSEPARATOR)$(shell echo $(VERSION) | sed s/-/./g)

# The encap subdirectory in which the files for this package should be installed.
PREFIX = $(ENCAPDIR)/$(PKG)

# The standard extension for compressed tar files.  Override this one if you
# prefer to get the tar.bz2 file, which is usually shorter.
TARFILEEXT ?= tar.gz

# The name of the tar file to download.  Override if necessary.
# If there is no tar file, set it to NONE like this:
#	TARFILE = NONE
# The assignment here doesn't use $(PKG), which might be overridden.
TARFILE ?= $(PKGNAME)-$(VERSION).$(TARFILEEXT)
ifeq "$(TARFILE)" "NONE"
TARFILE=
endif

# The complete list of tar files to download and unpack.  Override if necessary.
TARFILES ?= $(TARFILE)
ifeq "$(TARFILES)" "NONE"
TARFILES=
endif

# The complete list of non-tar files to download.  Override if necessary.
FILES ?= 

# name of patch file, optional
PATCHFILE ?=

# The temporary directory where all of the files are placed.  You can't
# override this safely, because 'make clean' will do 'rm -rf' on this.
# The second one, TMPARENA, is relative to $(PKGTOPDIR).
ABSTMPARENA = $(TMPDIR)/$(PKGNAME)-build
TMPARENA = TMP

# We need various subdirectories of $(TMPARENA), one for each version,
# and one where we can untar a clean copy of the source files so we
# can make diffs.  Usually the name of it is just $(VERSION), but for
# diffs, we will use $(VERSION)-orig/.
# (We can't always depend on the package to have a predictable name for 
# the top level directory in the tar file, to have just one top level directory,
# or even to have tar files; some packages are just a few files.)
TMPARENASUBDIR ?= $(VERSION)
DIFFSUBDIR = $(VERSION)-orig

# sometimes the directory named $(PKGNAME)-$(VERSION) is not the top
# level directory in the tar file.  You can override this by
# specifying here a directory it will be a subdirectory of.
TARTOPDIR ?= .

# Additional options to pass to tar during untarring.  Override this to
# untar just certain directories, for example.
UNTAROPTIONS ?=

# The name of the top level directory contained in the downloaded tar
# file usually consists of the package name, a hyphen, and the version
# number.  We will find the source code, the configure file, or the
# top level makefile in this directory.  The default assignment here
# doesn't use $(PKG), for it might be overridden.  This directory will
# a subdirectory of $(TMPARENA)/$(TMPARENASUBDIR).
ifeq "$(TARFILES)" ""
TARDIR = .
else
TARDIR ?= $(TARTOPDIR)/$(PKGNAME)-$(VERSION)
endif

# SRCSUBDIR is the subdirectory of $(TARDIR) in which to find the source code
SRCSUBDIR ?= .

# SRCDIR is the directory in which to find the source code, relative to PKGTOPDIR!
ifdef URL
ifeq ($(SRCSUBDIR),.)
ifeq ($(TARDIR),.)
SRCDIR ?= $(TMPARENA)/$(TMPARENASUBDIR)
else
SRCDIR ?= $(TMPARENA)/$(TMPARENASUBDIR)/$(TARDIR)
endif
else
SRCDIR ?= $(TMPARENA)/$(TMPARENASUBDIR)/$(TARDIR)/$(SRCSUBDIR)
endif
else
# Some few packages are not downloadable, so we provide the source immediately.
SRCDIR ?= src
endif

# The absolute path to the top level source directory.
ABSSRCDIR = $(PKGTOPDIR)/$(SRCDIR)


# The build directory, in which we will run 'make'. 
BUILDDIR ?= $(SRCDIR)
# Non-autoconf packages are usually built in the top level source directory.
# good autoconf packages can be built in an arbitrary temporary directory,
# and the maintainers of gcc urge strongly that it be built in a separate directory.
# By default we build all packages in the source directory.
# This directory will be created for you if it doesn't exist; you want
# 'make clean' to remove it, so it should be a subdirectory of $(TMPARENA).
# A good choice might be this:
#      BUILDDIR = $(TMPARENA)/$(TARDIR)-build



# List here directories that need to be made in the target location before installation
INSTALLDIRS ?=
# Example: INSTALLDIRS = man/man1 bin sbin
# Good packages take care of this themselves.


APPLICATION ?= $(PKGNAME)

# Most makefiles allow you to type a command such as
#              make prefix=/opt/foo-1.2 install
# or
#              make DESTDIR=/opt/foo-1.2 install
# as the final step in the installation, in order to install the package's files
# somewhere other than the prefix told to it at configuration time.  Non-autoconf
# packages usually have this feature, but the keyword varies, and can be
# prefix, PREFIX, INSTALLROOT, INS_BASE, ROOT, or DESTDIR.  Override 
# the default below if necessary.
#
#    If you need to set two keywords, mention them both, like this:
# PREFIX_KEYWORD ?= prefix exec_prefix
#
PREFIX_KEYWORD ?= prefix

# Any additional 'make' options to use when building or checking.
BUILDOPTIONS ?= 

# Most packages can be built (compiled) by simply typing "make".  Some packages
# may require additional targets, as in the command "make all shared", for 
# example.  In such a case you could override the (empty) default with
#	BUILDTARGET = all shared
BUILDTARGET ?=

# target to use for checking the compiled package, along with BUILDOPTIONS above
CHECKTARGET ?= check

# Any additional 'make' options to use when installing.
INSTALLOPTIONS ?=

# Most packages can be installed after being built by typing "make install".  Some 
# packages may require additional targets, as in the command 
# "make install install-libs", for example.  In such a case you could
#  override the default with
#	BUILDTARGET = install install-libs
INSTALLTARGET ?= install

# The environment for the configuration step, the build command, and the install command.
# There are separate variables for each of those that override this one.
ENV ?= 

# The environment for the build command.
BUILDENV ?= $(ENV)

# our choice of yacc replacement
YACC ?= bison -o y.tab.c

# The command to issue to compile the package.  Override if necessary.
# For example, if no compilation is necessary, you might specify
#		BUILDCMD = :
# because ':' is a shell-builtin command that does nothing.
BUILDCMD ?= unset PWD; env $(BUILDENV) $(MAKE) -C $(BUILDDIR) YACC="$(YACC)" $(BUILDOPTIONS) $(BUILDTARGET)

# The environment for the install command.
INSTALLENV ?= $(ENV)

# basic install options, intended to be overridden by capybara files only, and not overridden in individual packages
BASICINSTALLOPTIONS ?= 

PREFIXSUBDIR ?= .

ifeq ($(PREFIXSUBDIR),.)
PREFIXANDSUBDIR = $(PREFIX)
else
PREFIXANDSUBDIR = $(PREFIX)/$(PREFIXSUBDIR)
endif

# The command to issue to install the package.  Override if necessary.
# We used to include the option
#      exec_prefix=$(PREFIX)
# but with some packages we have to use $(DESTDIR) instead, and the
# two are incompatible because they get concatenated!
# Some packages will need this, and will have to be amended.
INSTALLSTUB ?= env $(INSTALLENV) $(MAKE) \
			$(patsubst %, %=$(PREFIXANDSUBDIR), $(PREFIX_KEYWORD)) \
			-C $(BUILDDIR) \
			$(BASICINSTALLOPTIONS) $(INSTALLOPTIONS)  
INSTALLCMD ?= unset PWD; $(FAKEROOT) $(INSTALLSTUB) $(INSTALLTARGET)

# command to use for patching
PATCHCOMMAND ?= for f in $(PATCHFILE) ; \
		do test -f "$$f" \
		   && case "$$f" in *.gz) gunzip <"$$f" ;; *) cat <"$$f" ;; esac \
		   | ( cd $(TMPARENA)/$(TMPARENASUBDIR) && set -x && patch -p0 ) ; \
		done

# flags for linking
LDFLAGS ?= -s

# flags for use with autoconf
MAKECONFIGURE ?= no

# program to use for ranlib
RANLIB ?= ranlib
