# -*- Makefile -*-
LIBRARY_MODE = yes
include ../../include/config.Makefile
TARFILE_DIR = @abs_top_srcdir@/BUILD/tarfiles
# some libraries (gdbm, mpfr, readline, gmp, and gc) use libtool, which 
# insists on installing its files to a directory whose trailing part is the
# prefix that was used at compile time, i.e., the only change allowed to the prefix
# between compile time and install time is to prepend a string
PREFIX = $(BUILTLIBPATH)
LIBNAME = $(shell basename `pwd`)
UNTARDIR = build
OLDUNTARDIR = build-old
TARDIR ?= $(LIBNAME)-$(VERSION)
TARFILE ?= $(LIBNAME)-$(VERSION).tar.gz
CHECKTARGET ?= check
CHECKOPTIONS ?= 
CHECKCMD ?= $(MAKE) -C $(BUILDDIR) $(CHECKOPTIONS) $(CHECKTARGET)
LIBRARIESDIR := $(PREFIX)
PRECONFIGURE  ?= :
CONFIGOPTIONS += --build=@build@ --host=@host@ --cache-file=/dev/null
CONFIGENV     = env \
	CPPFLAGS="$(CPPFLAGS)" \
	CC="$(CC)" \
	CFLAGS="$(CFLAGS)" \
	CXX="@CXX@" \
	CXXFLAGS="$(CXXFLAGS)" \
	LDFLAGS="$(LDFLAGS)" \
	LOADLIBES="$(LOADLIBES)" \
	LDLIBS="$(LDLIBS)" \
	FFLAGS="$(FCFLAGS)" \
	FCFLAGS="$(FCFLAGS)"
CONFIGURESCRIPT ?= configure
CONFIGURECMD  ?= $(PRECONFIGURE) && $(CONFIGENV) ./$(CONFIGURESCRIPT) --prefix=$(LIBRARIESDIR) $(CONFIGOPTIONS)
BUILDTARGET   ?= 
BUILDCMD      ?= $(MAKE) $(BUILDOPTIONS) $(BUILDTARGET)
INSTALLTARGET ?= install
INSTALLCMD    ?= $(MAKE) $(INSTALLOPTIONS) prefix=$(LIBRARIESDIR) $(INSTALLTARGET)
BUILDDIR      ?= $(UNTARDIR)/$(TARDIR)
UNTARCMD      ?= @TAR@ xzf $(TARFILE_DIR)/$(TARFILE)
%.E: %.c; $(COMPILE.c) -E $(OUTPUT_OPTION) $<
export PATH := @abs_top_srcdir@/autoconf/final/bin:$(PATH)
all:install post-install
post-install:
show-flags:; $(CONFIGENV) :
install: .installed-$(VERSION) config-chk
unconfigure:; rm -f .configured-$(VERSION) .compiled-$(VERSION) .installed-$(VERSION)
reconfigure: unconfigure configure
uninstall::; rm -f .installed-$(VERSION)
reinstall: uninstall install
always:
diffs: .patched-$(VERSION) .untarred2-$(VERSION) always
	D=`pwd`; cd $(UNTARDIR) && diff -ur --exclude=configure $$D/tmp/$(TARDIR) $(TARDIR) |egrep -v '^Only in ' >$$D/$@ || echo diffs: `pwd`/$@
unmark:; rm -f .configured-$(VERSION) .compiled-$(VERSION)
package-clean: unmark ; if [ -d $(BUILDDIR) ]; then $(MAKE) -C $(BUILDDIR) clean ; fi
package-distclean: unmark ; if [ -d $(BUILDDIR) ]; then $(MAKE) -C $(BUILDDIR) distclean ; fi
fetch: $(TARFILE_DIR)/$(TARFILE)
patch: .patched-$(VERSION)
compile: .compiled-$(VERSION) config-chk
configure: .configured-$(VERSION) config-chk
config-chk:
.installed-$(VERSION)  : .compiled-$(VERSION)   ; @ set -x ; ( cd $(BUILDDIR) && $(INSTALLCMD)   ) && touch $@
.compiled-$(VERSION)   : .configured-$(VERSION) ; @ set -x ; ( cd $(BUILDDIR) && $(BUILDCMD)     ) && touch $@
.configured-$(VERSION) : .patched-$(VERSION)    ; @ set -x ; ( cd $(BUILDDIR) && $(CONFIGURECMD) ) && touch $@
ifneq ($(PATCHFILE),)
.patched-$(VERSION) : $(PATCHFILE)
PATCHCMD = cd $(UNTARDIR) && patch -p0 $(PATCHOPTIONS) <$(PATCHFILE)
else
PATCHCMD = :
endif
.patched-$(VERSION) : $(TARFILE_DIR)/$(TARFILE)
	if [ -d $(UNTARDIR) -a -d $(OLDUNTARDIR)/$(UNTARDIR) ] ; \
	    then echo please remove or move $(OLDUNTARDIR)/$(UNTARDIR) out of the way ; \
	         exit 1 ; \
	    fi
	if [ -d $(UNTARDIR) ] ; then mv $(UNTARDIR) $(OLDUNTARDIR) ; fi
	mkdir $(UNTARDIR)
	$(UNTARCMD) -C $(UNTARDIR)
	$(PATCHCMD)
	touch $@
.untarred2-$(VERSION) : $(TARFILE_DIR)/$(TARFILE) ; mkdir tmp ; $(UNTARCMD) -C tmp && touch $@
ifeq ($(FETCHER),)
ifneq (@WGET@,)
FETCHER = @WGET@
else
ifneq (@CURL@,)
FETCHER = @CURL@
else
ifeq (@DOWNLOAD@,yes)
$(error either curl or wget is needed for downloading library source code, please install one of them and reconfigure)
else
FETCHER = false
endif
endif
endif
endif
ifeq ($(FETCHER),curl)
FETCHOPTS = -o "$(TARFILE)"
else
ifneq ($(FETCHER),wget)
FETCHOPTS = 
endif
endif
CHECKFETCHED = case "$(URL)" in									\
	http:*)											\
	    if file $(TARFILE_DIR)/$(TARFILE) | grep HTML ;					\
	    then echo tried to fetch file, but HTML file returned instead >&2 ; exit 1 ;	\
	    fi ;;										\
	esac
$(TARFILE_DIR)/$(TARFILE) :
	$(MKDIR_P) $(TARFILE_DIR)
ifeq (@DOWNLOAD@,yes)
	(cd $(TARFILE_DIR) && $(FETCHER) $(URL)/$(TARFILE) $(FETCHOPTS) && $(CHECKFETCHED))
else
	@ echo "error: third-party library source code not present: $(LIBNAME)" >&2
	@ echo "       in file $@" >&2
	@ echo "       and not configured for automatic downloading with --enable-download" >&2
	@ false
endif
distclean: package-distclean
clean::; rm -rf .patched* .untarred* $(LIBNAME)* .compiled* .configured* .installed* .untarred2* diffs tmp $(TARDIR) $(UNTARDIR) $(OLDUNTARDIR)
distclean: clean ; rm -rf Makefile
check:; $(CHECKCMD)
ls:; ls -la . tarfiles
help:;
	@ echo ""
	@ echo "usage: make [option...] [target...]"
	@ echo ""
	@ echo "targets:"
	@ echo ""
	@ echo "  all                         build/compile all files [the default target]"
	@ echo "  reconfigure		      remake configuration files for library"
	@ echo "  diffs			      create diff file for changes to library sources"
	@ echo "  clean			      remove most created files, except Makefiles and dowloaded tarfiles"
	@ echo "  distclean		      remove all created files"
	@ echo "  package-clean		      remove most created files in the package's directory tree, except Makefiles"
	@ echo "  package-distclean	      remove all created files in the package's directory tree"
	@ echo "  check			      check whether library compiled correctly"
	@ echo ""

# Local Variables:
# compile-command: "make -C $M2BUILDDIR/libraries Makefile.library"
# End:
